<!DOCTYPE html>
<html lang="ko">
<head>
    <!-- simple-keyboard CSS -->
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/simple-keyboard@latest/build/css/index.css">
    <!-- simple-keyboard JS -->
    <script src="https://cdn.jsdelivr.net/npm/simple-keyboard@latest/build/index.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/novnc/1.3.0/core/util.js"></script>
    <script src="https://unpkg.com/@novnc/novnc/lib/rfb.js"></script>
    
    <!-- ÎòêÎäî Î°úÏª¨ noVNC ÌååÏùº ÏÇ¨Ïö© -->
    <!-- <script src="/novnc/core/rfb.js"></script> -->
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Ïõπ Í∏∞Î∞ò ÏÉåÎìúÎ∞ïÏä§ ÌîåÎû´Ìèº</title>
    <script>
        // ÌôòÍ≤Ω Î≥ÄÏàò ÏÑ§Ï†ï Í∞úÏÑ†
        window.ENV = {
            NODE_ENV: 'development', // Ïã§Ï†ú ÌôòÍ≤ΩÏóê ÎßûÍ≤å ÏÑ§Ï†ï
            API_BASE_URL: 'http://localhost:3000' // Ïã§Ï†ú API URLÎ°ú Î≥ÄÍ≤Ω
        };
    </script>
        <style>
    * {
        margin: 0;
        padding: 0;
        box-sizing: border-box;
    }

    body {
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        background: linear-gradient(135deg, #e0f7fa 0%, #b2ebf2 100%);
        min-height: 100vh;
        display: flex;
        flex-direction: column;
    }

    .header {
        background: rgba(255, 255, 255, 0.1);
        backdrop-filter: blur(10px);
        padding: 1rem 2rem;
        border-bottom: 1px solid rgba(255, 255, 255, 0.2);
    }

    .header h1 {
        color: black;
        font-size: 1.5rem;
        font-weight: 600;
    }

    .main-container {
        display: flex;
        flex: 1;
        gap: 1rem;
        padding: 1rem;
    }

    .sidebar {
        width: 300px;
        background: rgba(255, 255, 255, 0.95);
        border-radius: 15px;
        padding: 1.5rem;
        box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
        backdrop-filter: blur(10px);
    }

    .sidebar h2 {
        color: #333;
        margin-bottom: 1rem;
        font-size: 1.2rem;
    }

    .vm-list {
        display: flex;
        flex-direction: column;
        gap: 0.5rem;
        margin-bottom: 2rem;
    }

    .vm-item {
        padding: 0.8rem;
        background: linear-gradient(135deg, #667eea, #764ba2);
        color: white;
        border: none;
        border-radius: 10px;
        cursor: pointer;
        transition: all 0.3s ease;
        text-align: left;
        font-size: 0.9rem;
    }

    .vm-item:hover {
        transform: translateY(-2px);
        box-shadow: 0 5px 15px rgba(0, 0, 0, 0.2);
    }

    .vm-item.active {
        background: linear-gradient(135deg, #4CAF50, #45a049);
    }

    .controls {
        display: flex;
        flex-direction: column;
        gap: 0.5rem;
    }

    .control-btn {
        padding: 0.8rem;
        border: none;
        border-radius: 8px;
        cursor: pointer;
        font-weight: 500;
        transition: all 0.3s ease;
    }

    .start-btn {
        background: #4CAF50;
        color: white;
    }

    .stop-btn {
        background: #f44336;
        color: white;
    }

    .restart-btn {
        background: #ff9800;
        color: white;
    }

    .control-btn:hover {
        opacity: 0.8;
        transform: translateY(-1px);
    }

    .control-btn:disabled {
        opacity: 0.5;
        cursor: not-allowed;
        transform: none;
    }

    .vm-viewer {
        flex: 1;
        background: rgba(255, 255, 255, 0.95);
        border-radius: 15px;
        padding: 1.5rem;
        box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
        backdrop-filter: blur(10px);
        display: flex;
        flex-direction: column;
    }

    .viewer-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 1rem;
        padding-bottom: 1rem;
        border-bottom: 1px solid #eee;
    }

    .viewer-title {
        color: #333;
        font-size: 1.1rem;
        font-weight: 600;
    }

    .connection-status {
        display: flex;
        align-items: center;
        gap: 0.5rem;
        font-size: 0.9rem;
    }

    .status-indicator {
        width: 10px;
        height: 10px;
        border-radius: 50%;
        background: #ccc;
        transition: all 0.3s ease;
    }

    .status-indicator.connected {
        background: #4CAF50;
        box-shadow: 0 0 10px rgba(76, 175, 80, 0.5);
    }

    .status-indicator.connecting {
        background: #ff9800;
        animation: pulse 1.5s infinite;
    }

    @keyframes pulse {
        0%, 100% { opacity: 1; }
        50% { opacity: 0.5; }
    }

    .toolbar {
        display: flex;
        gap: 0.5rem;
        margin-bottom: 1rem;
        flex-wrap: wrap;
    }

    .toolbar-btn {
        padding: 0.5rem 1rem;
        background: #667eea;
        color: white;
        border: none;
        border-radius: 6px;
        cursor: pointer;
        font-size: 0.8rem;
        transition: all 0.3s ease;
        display: inline-flex;
        align-items: center;
        gap: 0.3rem;
    }

    .toolbar-btn:hover {
        background: #5a6fd8;
        transform: translateY(-1px);
    }

    .toolbar-btn:active {
        transform: translateY(0);
    }

    .vnc-container {
        flex: 1;
        background: #000;
        border-radius: 10px;
        position: relative;
        min-height: 400px;
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .vnc-screen {
        width: 100%;
        height: 100%;
        border: none;
        border-radius: 10px;
    }

    .no-connection {
        color: #666;
        text-align: center;
        font-size: 1.1rem;
    }

    .loading {
        color: #667eea;
        font-size: 1.1rem;
        display: flex;
        align-items: center;
        gap: 0.5rem;
    }

    .spinner {
        width: 20px;
        height: 20px;
        border: 2px solid #667eea;
        border-top: 2px solid transparent;
        border-radius: 50%;
        animation: spin 1s linear infinite;
    }

    @keyframes spin {
        0% { transform: rotate(0deg); }
        100% { transform: rotate(360deg); }
    }

    .vm-info {
        background: #f8f9fa;
        padding: 1rem;
        border-radius: 8px;
        margin-bottom: 1rem;
        font-size: 0.9rem;
    }

    .vm-info-item {
        display: flex;
        justify-content: space-between;
        margin-bottom: 0.5rem;
    }

    .vm-info-item:last-child {
        margin-bottom: 0;
    }

    .performance-stats {
        display: grid;
        grid-template-columns: 1fr 1fr;
        gap: 1rem;
        margin-top: 1rem;
    }

    .stat-card {
        background: white;
        padding: 1rem;
        border-radius: 8px;
        text-align: center;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
    }

    .stat-value {
        font-size: 1.5rem;
        font-weight: bold;
        color: #667eea;
    }

    .stat-label {
        font-size: 0.8rem;
        color: #666;
        margin-top: 0.5rem;
    }

    /* Í∞ÄÏÉÅ ÌÇ§Î≥¥Îìú Î™®Îã¨ Ïä§ÌÉÄÏùº */
    .virtual-keyboard-modal {
        display: none;
        position: fixed;
        z-index: 1000;
        left: 0;
        top: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.5);
    }

    .virtual-keyboard-content {
        background-color: #fefefe;
        margin: 5% auto;
        padding: 20px;
        border: none;
        border-radius: 10px;
        width: 90%;
        max-width: 800px;
        max-height: 80vh;
        overflow-y: auto;
    }

    .keyboard-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(40px, 1fr));
        gap: 5px;
        margin: 10px 0;
    }

    .key-btn {
        padding: 10px;
        background: #f0f0f0;
        border: 1px solid #ccc;
        border-radius: 5px;
        cursor: pointer;
        font-size: 14px;
        transition: all 0.2s;
    }

    .key-btn:hover {
        background: #e0e0e0;
    }

    .key-btn:active {
        background: #d0d0d0;
        transform: scale(0.95);
    }

    .space-key {
        grid-column: span 6;
    }

    .close-btn {
        color: #aaa;
        float: right;
        font-size: 28px;
        font-weight: bold;
        cursor: pointer;
    }

    .close-btn:hover {
        color: black;
    }

    @media (max-width: 768px) {
        .main-container {
            flex-direction: column;
        }

        .sidebar {
            width: 100%;
        }

        .toolbar {
            flex-wrap: wrap;
        }

        .toolbar-btn {
            font-size: 0.7rem;
            padding: 0.4rem 0.8rem;
        }
    }
</style>
</head>
<body>
    <div class="header">
        <h1>üñ•Ô∏è Ïõπ Í∏∞Î∞ò ÏÉåÎìúÎ∞ïÏä§ ÌîåÎû´Ìèº</h1>
    </div>
    <!-- vnc-container ÎÇ¥Î∂ÄÏóê Ï∫îÎ≤ÑÏä§ ÏöîÏÜå Ï∂îÍ∞Ä ÌïÑÏöî -->
    
    <div class="main-container">
        <div class="sidebar">
            <h2>Í∞ÄÏÉÅÌôòÍ≤Ω Î™©Î°ù</h2>
            <div class="vm-list">
                <button class="vm-item" data-vm="ubuntu-desktop">
                    üêß Ubuntu Desktop 20.04
                </button>
            </div>

            <div class="vm-info" id="vm-info" style="display: none;">
                <div class="vm-info-item">
                    <span>ÏÉÅÌÉú:</span>
                    <span id="vm-status">Ï§ëÏßÄÎê®</span>
                </div>
                <div class="vm-info-item">
                    <span>Î©îÎ™®Î¶¨:</span>
                    <span id="vm-memory">2GB</span>
                </div>
                <div class="vm-info-item">
                    <span>CPU:</span>
                    <span id="vm-cpu">2 cores</span>
                </div>
                <div class="vm-info-item">
                    <span>ÎîîÏä§ÌÅ¨:</span>
                    <span id="vm-disk">20GB</span>
                </div>
            </div>

            <div class="controls">
                <button class="control-btn start-btn" id="start-btn">üöÄ ÏãúÏûë</button>
                <button class="control-btn stop-btn" id="stop-btn">‚èπÔ∏è Ï§ëÏßÄ</button>
                <button class="control-btn restart-btn" id="restart-btn">üîÑ Ïû¨ÏãúÏûë</button>
            </div>

            <div class="performance-stats">
                <div class="stat-card">
                    <div class="stat-value" id="cpu-usage">0%</div>
                    <div class="stat-label">CPU ÏÇ¨Ïö©Î•†</div>
                </div>
                <div class="stat-card">
                    <div class="stat-value" id="memory-usage">0%</div>
                    <div class="stat-label">Î©îÎ™®Î¶¨ ÏÇ¨Ïö©Î•†</div>
                </div>
            </div>
        </div>

        <div class="vm-viewer">
            <div class="vnc-container" id="vnc-container">
                <canvas id="vnc-canvas" style="display: none;"></canvas>
                <div class="no-connection" id="no-connection">
                    Í∞ÄÏÉÅÌôòÍ≤ΩÏùÑ ÏÑ†ÌÉùÌïòÍ≥† ÏãúÏûë Î≤ÑÌäºÏùÑ ÎàåÎü¨Ï£ºÏÑ∏Ïöî
                </div>
            </div>
            <div class="viewer-header">
                <div class="viewer-title" id="viewer-title">Í∞ÄÏÉÅÌôòÍ≤ΩÏùÑ ÏÑ†ÌÉùÌï¥Ï£ºÏÑ∏Ïöî</div>
                <div class="connection-status">
                    <div class="status-indicator" id="status-indicator"></div>
                    <span id="connection-text">Ïó∞Í≤∞ ÏïàÎê®</span>
                </div>
            </div>

            <div class="toolbar" id="toolbar" style="display: none;">
                <button class="toolbar-btn" onclick="sendCtrlAltDel()">Ctrl+Alt+Del</button>
                <button class="toolbar-btn" onclick="toggleFullscreen()">Ï†ÑÏ≤¥ÌôîÎ©¥</button>
                <button class="toolbar-btn" onclick="takeScreenshot()">Ïä§ÌÅ¨Î¶∞ÏÉ∑</button>
                <button class="toolbar-btn" onclick="showKeyboard()">Í∞ÄÏÉÅÌÇ§Î≥¥Îìú</button>
            </div>
            // simple-keyboard Ï¥àÍ∏∞Ìôî ÏΩîÎìú
            const Keyboard = window.SimpleKeyboard.default;
            
            const keyboard = new Keyboard({
              onChange: input => onChange(input),
              onKeyPress: button => onKeyPress(button),
              layout: {
                default: [
                  "1 2 3 4 5 6 7 8 9 0 {bksp}",
                  "„ÖÇ „Öà „Ñ∑ „Ñ± „ÖÖ „Öõ „Öï „Öë „Öê „Öî",
                  "„ÖÅ „Ñ¥ „Öá „Ñπ „Öé „Öó „Öì „Öè „Ö£",
                  "„Öã „Öå „Öä „Öç „Ö† „Öú „Ö° {shift}",
                  "{lang} {space} {enter}"
                ],
                shift: [
                  "! @ # $ % ^ & * ( ) {bksp}",
                  "„ÖÉ „Öâ „Ñ∏ „Ñ≤ „ÖÜ „Öõ „Öï „Öë „Öí „Öñ",
                  "„ÖÅ „Ñ¥ „Öá „Ñπ „Öé „Öó „Öì „Öè „Ö£",
                  "„Öã „Öå „Öä „Öç „Ö† „Öú „Ö° {shift}",
                  "{lang} {space} {enter}"
                ],
                en: [
                  "1 2 3 4 5 6 7 8 9 0 {bksp}",
                  "q w e r t y u i o p",
                  "a s d f g h j k l",
                  "z x c v b n m {shift}",
                  "{lang} {space} {enter}"
                ],
                enShift: [
                  "! @ # $ % ^ & * ( ) {bksp}",
                  "Q W E R T Y U I O P",
                  "A S D F G H J K L",
                  "Z X C V B N M {shift}",
                  "{lang} {space} {enter}"
                ]
              },
              display: {
                "{bksp}": "‚å´",
                "{enter}": "‚èé",
                "{shift}": "‚áß",
                "{space}": "‚éµ",
                "{lang}": "Ìïú/ÏòÅ"
              }
            });
            
            let isKorean = true;
            let isShift = false;
            
            function onChange(input) {
              document.getElementById("virtual-input").value = input;
            }
            
            function onKeyPress(button) {
              if (button === "{shift}") {
                isShift = !isShift;
                if (isKorean) {
                  keyboard.setOptions({ layoutName: isShift ? "shift" : "default" });
                } else {
                  keyboard.setOptions({ layoutName: isShift ? "enShift" : "en" });
                }
              }
              if (button === "{lang}") {
                isKorean = !isKorean;
                keyboard.setOptions({ layoutName: isKorean ? (isShift ? "shift" : "default") : (isShift ? "enShift" : "en") });
              }
            }

            <!-- Ìà¥Î∞î ÏïÑÎûòÏóê ÏûÖÎ†•Ï∞ΩÍ≥º ÌÇ§Î≥¥Îìú Ïª®ÌÖåÏù¥ÎÑà Ï∂îÍ∞Ä -->
            <input id="virtual-input" class="input" readonly style="width:300px;font-size:1.2rem; margin-top:10px; display:none;" />
            <div id="keyboard" style="display:none;"></div>
                    </div>
    </div>

    <script>
                // ÌôòÍ≤ΩÎ≥Ñ ÏÑ§Ï†ï Î∂ÑÎ¶¨ - Ïù¥ ÏúÑÏπòÍ∞Ä ÏµúÏ†Å!
        const CONFIG = {
            development: {
                wsProtocol: 'ws:',
                apiBaseUrl: 'http://localhost:3000',
                vncHost: 'localhost'
            },
            production: {
                wsProtocol: 'wss:',
                apiBaseUrl: 'https://your-domain.com',
                vncHost: 'your-vnc-server.com'
            }
        };

        const currentConfig = CONFIG[window.ENV?.NODE_ENV || 'development'];

        function showKeyboard() {
              document.getElementById("keyboard").style.display = "block";
              document.getElementById("virtual-input").style.display = "block";
            }
        function addChar(c) {
          const input = document.getElementById('virtual-input');
          input.value += c;
        }
        function removeChar() {
          const input = document.getElementById('virtual-input');
          input.value = input.value.slice(0, -1);
        }
        function showKeyboard() {
          document.getElementById('virtual-keyboard').style.display = 'block';
        }
        class SandboxPlatform {
            constructor() {
                this.currentVM = null;
                this.vncWebSocket = null;
                this.isConnected = false;
                this.isConnecting = false;
                this.performanceInterval = null;
                this.config = currentConfig; // Ï∂îÍ∞Ä ÌïÑÏöî
                this.authToken = localStorage.getItem('authToken'); // Ï∂îÍ∞Ä ÌïÑÏöî
                
                this.vmConfigs = {
                    'ubuntu-desktop': {
                        name: 'Ubuntu Desktop 20.04',
                        memory: '4GB',
                        cpu: '2 cores',
                        disk: '25GB',
                        host: 'localhost', // VNC ÏÑúÎ≤Ñ Ìò∏Ïä§Ìä∏
                        port: 6080,       // Websockify Ìè¨Ìä∏
                        vncPort: 5901,    // Ïã§Ï†ú VNC Ìè¨Ìä∏
                        password: '',      // VNC Ìå®Ïä§ÏõåÎìú
                        path: '/websockify' // WebSocket Í≤ΩÎ°ú
                    },
                };

                this.initEventListeners();
                this.updatePerformanceStats();
            }

            initEventListeners() {
                // VM ÏÑ†ÌÉù Ïù¥Î≤§Ìä∏
                document.querySelectorAll('.vm-item').forEach(item => {
                    item.addEventListener('click', (e) => {
                        this.selectVM(e.target.dataset.vm);
                    });
                });

                // Ïª®Ìä∏Î°§ Î≤ÑÌäº Ïù¥Î≤§Ìä∏
                document.getElementById('start-btn').addEventListener('click', () => {
                    this.startVM();
                });

                document.getElementById('stop-btn').addEventListener('click', () => {
                    this.stopVM();
                });

                document.getElementById('restart-btn').addEventListener('click', () => {
                    this.restartVM();
                });

                // Ï∞Ω ÌÅ¨Í∏∞ Î≥ÄÍ≤Ω Ïù¥Î≤§Ìä∏
                window.addEventListener('resize', () => {
                    this.resizeVNCViewer();
                });
            }

            selectVM(vmId) {
                // Ïù¥Ï†Ñ ÏÑ†ÌÉù Ìï¥Ï†ú
                document.querySelectorAll('.vm-item').forEach(item => {
                    item.classList.remove('active');
                });

                // ÏÉàÎ°úÏö¥ VM ÏÑ†ÌÉù
                document.querySelector(`[data-vm="${vmId}"]`).classList.add('active');
                this.currentVM = vmId;

                // VM Ï†ïÎ≥¥ ÏóÖÎç∞Ïù¥Ìä∏
                this.updateVMInfo(vmId);
                
                // Î∑∞Ïñ¥ Ï†úÎ™© ÏóÖÎç∞Ïù¥Ìä∏
                document.getElementById('viewer-title').textContent = this.vmConfigs[vmId].name;

                // Ïó∞Í≤∞Ïù¥ ÏûàÎã§Î©¥ ÎÅäÍ∏∞
                if (this.isConnected) {
                    this.disconnect();
                }
            }

            updateVMInfo(vmId) {
                const config = this.vmConfigs[vmId];
                const vmInfo = document.getElementById('vm-info');
                
                document.getElementById('vm-memory').textContent = config.memory;
                document.getElementById('vm-cpu').textContent = config.cpu;
                document.getElementById('vm-disk').textContent = config.disk;
                
                vmInfo.style.display = 'block';
            }

            async startVMBackend(vmId) {
                try {
                    const response = await fetch(`/api/vm/${vmId}/start`, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'Authorization': `Bearer ${this.getAuthToken()}`
                        }
                    });

                    if (!response.ok) {
                        throw new Error(`VM ÏãúÏûë Ïã§Ìå®: ${response.statusText}`);
                    }

                    const result = await response.json();
                    return result;
                } catch (error) {
                    console.error('Backend VM ÏãúÏûë Ïã§Ìå®:', error);
                    throw error;
                }
            }

            async startVM() {
                if (!this.currentVM) {
                    alert('Î®ºÏ†Ä Í∞ÄÏÉÅÌôòÍ≤ΩÏùÑ ÏÑ†ÌÉùÌï¥Ï£ºÏÑ∏Ïöî.');
                    return;
                }

                try {
                    this.setConnectionStatus('connecting', 'Ïó∞Í≤∞ Ï§ë...');
                    
                    // Ïã§Ï†ú VM ÏãúÏûë API Ìò∏Ï∂ú
                    await this.startVMBackend(this.currentVM);
                    
                    // VNC Ïó∞Í≤∞ ÎåÄÍ∏∞ ÏãúÍ∞Ñ
                    await new Promise(resolve => setTimeout(resolve, 5000));
                    
                    // VNC Ïó∞Í≤∞ ÏãúÎèÑ
                    await this.connectVNC();
                    
                } catch (error) {
                    console.error('VM ÏãúÏûë Ïã§Ìå®:', error);
                    this.setConnectionStatus('disconnected', 'Ïó∞Í≤∞ Ïã§Ìå®');
                    alert('Í∞ÄÏÉÅÌôòÍ≤Ω ÏãúÏûëÏóê Ïã§Ìå®ÌñàÏäµÎãàÎã§: ' + error.message);
                }
            }

            async simulateVMStart() {
                // VM ÏãúÏûë ÏãúÎÆ¨Î†àÏù¥ÏÖò (Ïã§Ï†úÎ°úÎäî Î∞±ÏóîÎìú API Ìò∏Ï∂ú)
                return new Promise((resolve) => {
                    setTimeout(() => {
                        resolve();
                    }, 3000);
                });
            }

            async connectVNC() {
                const config = this.vmConfigs[this.currentVM];
                const canvas = document.getElementById('vnc-canvas');
                
                try {
                    // WebSocket URL Íµ¨ÏÑ±
                    const wsProtocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';
                    const wsUrl = `${wsProtocol}//${config.host || 'localhost'}:${config.port}/websockify`;

                    // noVNC RFB Í∞ùÏ≤¥ ÏÉùÏÑ±
                    this.rfb = new RFB(canvas, wsUrl, {
                        credentials: {
                            password: config.password || ''
                        }
                    });
                    
                    // Ïù¥Î≤§Ìä∏ Î¶¨Ïä§ÎÑà Îì±Î°ù (Ï£ºÏÑù Ìï¥Ï†ú Î∞è ÏàòÏ†ï)
                    this.rfb.addEventListener('connect', this.onVNCConnect.bind(this));
                    this.rfb.addEventListener('disconnect', this.onVNCDisconnect.bind(this));
                    this.rfb.addEventListener('credentialsrequired', this.onVNCCredentials.bind(this));
                    this.rfb.addEventListener('securityfailure', this.onVNCSecurityFailure.bind(this));
                    
                    // Ïó∞Í≤∞ ÏÑ§Ï†ï
                    this.rfb.scaleViewport = true;
                    this.rfb.resizeSession = true;
                    
                } catch (error) {
                    console.error('VNC Ïó∞Í≤∞ Ïã§Ìå®:', error);
                    this.setConnectionStatus('disconnected', 'Ïó∞Í≤∞ Ïã§Ìå®');
                    throw error;
                }
            }

            async callAPI(endpoint, method = 'GET', data = null) {
                const url = `${this.config.apiBaseUrl}${endpoint}`;
                const options = {
                    method,
                    headers: {
                        'Content-Type': 'application/json',
                        'Authorization': this.authToken ? `Bearer ${this.authToken}` : ''
                    }
                };

                if (data) {
                    options.body = JSON.stringify(data);
                }

                try {
                    const response = await fetch(url, options);
                    if (!response.ok) {
                        throw new Error(`API Ìò∏Ï∂ú Ïã§Ìå®: ${response.statusText}`);
                    }
                    return response.json();
                } catch (error) {
                    console.error('API Ìò∏Ï∂ú Ïò§Î•ò:', error);
                    throw error;
                }
            }

            getAuthToken() {
                return this.authToken || localStorage.getItem('authToken');
            }

            // VNC Ïù¥Î≤§Ìä∏ Ìï∏Îì§Îü¨Îì§
            onVNCConnect() {
                console.log('VNC Ïó∞Í≤∞ ÏÑ±Í≥µ');
                this.isConnected = true;
                this.isConnecting = false;
                this.setConnectionStatus('connected', 'Ïó∞Í≤∞Îê®');
                this.updateVMStatus('Ïã§Ìñâ Ï§ë');
                this.showVNCViewer();
                this.startPerformanceMonitoring();
            }

            onVNCDisconnect(e) {
                console.log('VNC Ïó∞Í≤∞ Ìï¥Ï†ú:', e.detail);
                this.isConnected = false;
                this.isConnecting = false;
                this.setConnectionStatus('disconnected', 'Ïó∞Í≤∞ ÏïàÎê®');
                this.updateVMStatus('Ï§ëÏßÄÎê®');
                this.hideVNCViewer();
                this.stopPerformanceMonitoring();
            }

            onVNCCredentials() {
                const password = prompt('VNC Ìå®Ïä§ÏõåÎìúÎ•º ÏûÖÎ†•ÌïòÏÑ∏Ïöî:');
                if (password) {
                    this.rfb.sendCredentials({ password: password });
                }
            }

            onVNCSecurityFailure(e) {
                console.error('VNC Î≥¥Ïïà Ïã§Ìå®:', e.detail);
                alert('VNC Ïù∏Ï¶ùÏóê Ïã§Ìå®ÌñàÏäµÎãàÎã§.');
            }

            async simulateVNCConnection() {
                return new Promise((resolve) => {
                    setTimeout(() => {
                        this.isConnected = true;
                        this.isConnecting = false;
                        resolve();
                    }, 2000);
                });
            }

            showVNCViewer() {
                const noConnection = document.getElementById('no-connection');
                const toolbar = document.getElementById('toolbar');
                const canvas = document.getElementById('vnc-canvas');

                noConnection.style.display = 'none';
                toolbar.style.display = 'flex';
                canvas.style.display = 'block';
                
                // Ïã§Ï†ú VNC ÌôîÎ©¥ ÏãúÎÆ¨Î†àÏù¥ÏÖò
                container.innerHTML = `
                    <div style="width: 100%; height: 100%; background: linear-gradient(45deg, #1e3c72, #2a5298); 
                                display: flex; align-items: center; justify-content: center; 
                                border-radius: 10px; color: white; font-size: 1.2rem;">
                        <div style="text-align: center;">
                            <div style="font-size: 3rem; margin-bottom: 1rem;">üñ•Ô∏è</div>
                            <div>${this.vmConfigs[this.currentVM].name}</div>
                            <div style="font-size: 0.9rem; margin-top: 0.5rem; opacity: 0.8;">
                                VNC Ïó∞Í≤∞Îê® - Ïã§Ï†ú Íµ¨ÌòÑÏãú noVNC Ï∫îÎ≤ÑÏä§Í∞Ä Ïó¨Í∏∞Ïóê ÌëúÏãúÎê©ÎãàÎã§
                            </div>
                        </div>
                    </div>
                `;
            }

            stopVM() {
                if (!this.isConnected) {
                    return;
                }

                this.disconnect();
                this.setConnectionStatus('disconnected', 'Ïó∞Í≤∞ ÏïàÎê®');
                this.updateVMStatus('Ï§ëÏßÄÎê®');
                this.hideVNCViewer();
                this.stopPerformanceMonitoring();
            }

            restartVM() {
                if (this.isConnected) {
                    this.stopVM();
                    setTimeout(() => {
                        this.startVM();
                    }, 1000);
                }
            }

            disconnect() {
                if (this.rfb) {
                    this.rfb.disconnect();
                    this.rfb = null;
                }
                this.isConnected = false;
                this.isConnecting = false;
            }

            hideVNCViewer() {
                const container = document.getElementById('vnc-container');
                const toolbar = document.getElementById('toolbar');
                const canvas = document.getElementById('vnc-canvas');
                
                toolbar.style.display = 'none';
                canvas.style.display = 'none';
                
                // no-connection divÍ∞Ä ÏóÜÏúºÎ©¥ ÏÉùÏÑ±
                let noConnection = document.getElementById('no-connection');
                if (!noConnection) {
                    noConnection = document.createElement('div');
                    noConnection.id = 'no-connection';
                    noConnection.className = 'no-connection';
                    container.appendChild(noConnection);
                }
                
                noConnection.style.display = 'block';
                noConnection.textContent = 'Í∞ÄÏÉÅÌôòÍ≤ΩÏùÑ ÏÑ†ÌÉùÌïòÍ≥† ÏãúÏûë Î≤ÑÌäºÏùÑ ÎàåÎü¨Ï£ºÏÑ∏Ïöî';
            }

            setConnectionStatus(status, text) {
                const indicator = document.getElementById('status-indicator');
                const connectionText = document.getElementById('connection-text');
                
                indicator.className = `status-indicator ${status}`;
                connectionText.textContent = text;
            }

            updateVMStatus(status) {
                document.getElementById('vm-status').textContent = status;
            }

            startPerformanceMonitoring() {
                this.performanceInterval = setInterval(() => {
                    this.updatePerformanceStats();
                }, 2000);
            }

            stopPerformanceMonitoring() {
                if (this.performanceInterval) {
                    clearInterval(this.performanceInterval);
                    this.performanceInterval = null;
                }
                
                // ÏÑ±Îä• ÌÜµÍ≥Ñ Ï¥àÍ∏∞Ìôî
                document.getElementById('cpu-usage').textContent = '0%';
                document.getElementById('memory-usage').textContent = '0%';
            }

            updatePerformanceStats() {
                if (this.isConnected) {
                    // Ïã§Ï†úÎ°úÎäî Î∞±ÏóîÎìúÏóêÏÑú ÏÑ±Îä• Îç∞Ïù¥ÌÑ∞Î•º Í∞ÄÏ†∏Ïò¥
                    const cpuUsage = Math.floor(Math.random() * 60) + 20;
                    const memoryUsage = Math.floor(Math.random() * 40) + 30;
                    
                    document.getElementById('cpu-usage').textContent = `${cpuUsage}%`;
                    document.getElementById('memory-usage').textContent = `${memoryUsage}%`;
                }
            }

            resizeVNCViewer() {
                if (this.rfb) {
                    this.rfb.autoscale = true;
                }
            }
        }
        // ExtendedSandboxPlatform ÌÅ¥ÎûòÏä§ Ï†ïÏùò Ï∂îÍ∞Ä
        class ExtendedSandboxPlatform extends SandboxPlatform {
            constructor() {
                super();
                this.isRecording = false;
                this.clipboardModal = null;
                this.currentScale = 100;
            }
            
            // ÌôïÏû• Í∏∞Îä•Îì§ Íµ¨ÌòÑ
            showVNCViewer() {
                super.showVNCViewer();
                const noConnection = document.getElementById('no-connection');
                const toolbar = document.getElementById('toolbar');
                const canvas = document.getElementById('vnc-canvas');

                noConnection.style.display = 'none';
                toolbar.style.display = 'flex';
                canvas.style.display = 'block';
            }
        }

class SecurityManager {
    constructor() {
        this.currentUser = null;
        this.sessionTimeout = 30 * 60 * 1000; // 30Î∂Ñ
        this.maxLoginAttempts = 3;
        this.loginAttempts = new Map(); // IPÎ≥Ñ Î°úÍ∑∏Ïù∏ ÏãúÎèÑ ÌöüÏàò Ï∂îÏ†Å
        this.allowedIPs = [];
        this.auditLogs = [];
        this.rateLimiter = new Map(); // ÏöîÏ≤≠ Ï†úÌïú Ï∂îÏ†Å
    }

    async getClientIP() {
        try {
            const response = await fetch('/api/client-ip', {
                credentials: 'same-origin',
                headers: {
                    'X-Requested-With': 'XMLHttpRequest'
                }
            });
            
            if (!response.ok) {
                throw new Error('IP Ï°∞Ìöå Ïã§Ìå®');
            }
            
            const data = await response.json();
            return data.ip;
        } catch (error) {
            console.error('IP Ï°∞Ìöå Ïò§Î•ò:', error);
            return 'unknown';
        }
    }

    async handleLoginFailure(clientIP) {
        const attempts = this.loginAttempts.get(clientIP) || 0;
        const newAttempts = attempts + 1;
        this.loginAttempts.set(clientIP, newAttempts);
        
        if (newAttempts >= this.maxLoginAttempts) {
            // Í≥ÑÏ†ï Ïû†Í∏à ÏãúÍ∞Ñ ÏÑ§Ï†ï (Ïòà: 30Î∂Ñ)
            setTimeout(() => {
                this.loginAttempts.delete(clientIP);
            }, 30 * 60 * 1000);
            
            this.logSecurityEvent('ACCOUNT_LOCKED', { 
                ip: clientIP, 
                attempts: newAttempts 
            });
            
            throw new Error('Í≥ÑÏ†ïÏù¥ Ïû†Í≤ºÏäµÎãàÎã§. 30Î∂Ñ ÌõÑ Îã§Ïãú ÏãúÎèÑÌï¥Ï£ºÏÑ∏Ïöî.');
        }
    }

    logout(reason) {
        console.log(`Î°úÍ∑∏ÏïÑÏõÉ: ${reason}`);
        this.logSecurityEvent('LOGOUT', { reason });
        this.currentUser = null;
        
        if (this.sessionTimer) {
            clearTimeout(this.sessionTimer);
        }
        
        // ÏÑ∏ÏÖò Ïä§ÌÜ†Î¶¨ÏßÄ ÏôÑÏ†Ñ Ï†ïÎ¶¨
        sessionStorage.clear();
        
        // Î≥¥Ïïà Î¶¨Îã§Ïù¥Î†âÌä∏
        window.location.replace('/login');
    }

    // Í∞úÏÑ†Îêú Ïù∏Ï¶ù Î©îÏÑúÎìú
    async authenticate(username, password, mfaCode = null) {
        // ÏûÖÎ†• Í∞í Í≤ÄÏ¶ù
        if (!this.validateInput(username) || !this.validateInput(password)) {
            throw new Error('Ïú†Ìö®ÌïòÏßÄ ÏïäÏùÄ ÏûÖÎ†•Í∞íÏûÖÎãàÎã§.');
        }

        const clientIP = await this.getClientIP();
        
        // ÏöîÏ≤≠ Ï†úÌïú ÌôïÏù∏
        if (!this.checkRateLimit(clientIP)) {
            throw new Error('ÎÑàÎ¨¥ ÎßéÏùÄ ÏöîÏ≤≠ÏûÖÎãàÎã§. Ïû†Ïãú ÌõÑ Îã§Ïãú ÏãúÎèÑÌï¥Ï£ºÏÑ∏Ïöî.');
        }

        try {
            // IP Ï£ºÏÜå ÌôïÏù∏
            if (!this.checkIPWhitelist(clientIP)) {
                throw new Error('ÌóàÏö©ÎêòÏßÄ ÏïäÏùÄ IP Ï£ºÏÜåÏûÖÎãàÎã§');
            }

            // ÎπÑÎ∞ÄÎ≤àÌò∏ Ìï¥ÏãúÌôî (ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏ Ï∏°ÏóêÏÑú ÏÇ¨Ï†Ñ Ìï¥ÏãúÌôî)
            const hashedPassword = await this.hashPassword(password);

            const response = await fetch('/api/auth/login', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'X-Requested-With': 'XMLHttpRequest'
                },
                credentials: 'same-origin',
                body: JSON.stringify({
                    username: this.sanitizeString(username),
                    password: hashedPassword,
                    mfaCode,
                    clientIP,
                    timestamp: Date.now()
                })
            });

            if (response.ok) {
                const userData = await response.json();
                this.currentUser = userData;
                this.startSessionTimeout();
                this.logSecurityEvent('LOGIN_SUCCESS', { username });
                
                // Î°úÍ∑∏Ïù∏ ÏÑ±Í≥µ Ïãú Ïã§Ìå® ÌöüÏàò Ï¥àÍ∏∞Ìôî
                this.loginAttempts.delete(clientIP);
                
                return true;
            } else {
                await this.handleLoginFailure(clientIP);
                return false;
            }
        } catch (error) {
            this.logSecurityEvent('LOGIN_ERROR', { 
                username, 
                error: error.message,
                ip: clientIP 
            });
            throw error;
        }
    }

    // ÏûÖÎ†•Í∞í Í≤ÄÏ¶ù
    validateInput(input) {
        if (typeof input !== 'string' || input.length === 0) {
            return false;
        }
        
        // Í∏∞Î≥∏Ï†ÅÏù∏ SQL Ïù∏Ï†ùÏÖò, XSS Ìå®ÌÑ¥ Ï∞®Îã®
        const dangerousPatterns = [
            /<script\b[^<]*(?:(?!<\/script>)<[^<]*)*<\/script>/gi,
            /javascript:/gi,
            /on\w+=/gi,
            /union\s+select/gi,
            /drop\s+table/gi,
            /insert\s+into/gi,
            /delete\s+from/gi
        ];
        
        return !dangerousPatterns.some(pattern => pattern.test(input));
    }

    // Î¨∏ÏûêÏó¥ Ï†ïÏ†ú
    sanitizeString(str) {
        return str.replace(/[<>\"'&]/g, function(match) {
            const map = {
                '<': '&lt;',
                '>': '&gt;',
                '"': '&quot;',
                "'": '&#x27;',
                '&': '&amp;'
            };
            return map[match];
        });
    }

    // ÎπÑÎ∞ÄÎ≤àÌò∏ Ìï¥ÏãúÌôî
    async hashPassword(password) {
        const encoder = new TextEncoder();
        const data = encoder.encode(password);
        const hashBuffer = await crypto.subtle.digest('SHA-256', data);
        const hashArray = Array.from(new Uint8Array(hashBuffer));
        return hashArray.map(b => b.toString(16).padStart(2, '0')).join('');
    }

    // ÏöîÏ≤≠ Ï†úÌïú ÌôïÏù∏
    checkRateLimit(clientIP) {
        const now = Date.now();
        const windowTime = 60000; // 1Î∂Ñ
        const maxRequests = 10; // Î∂ÑÎãπ ÏµúÎåÄ 10Ìöå ÏöîÏ≤≠
        
        if (!this.rateLimiter.has(clientIP)) {
            this.rateLimiter.set(clientIP, []);
        }
        
        const requests = this.rateLimiter.get(clientIP);
        
        // Ïò§ÎûòÎêú ÏöîÏ≤≠ Ï†úÍ±∞
        const recentRequests = requests.filter(timestamp => now - timestamp < windowTime);
        
        if (recentRequests.length >= maxRequests) {
            return false;
        }
        
        recentRequests.push(now);
        this.rateLimiter.set(clientIP, recentRequests);
        
        return true;
    }

    // ÏÑ∏ÏÖò ÌÉÄÏûÑÏïÑÏõÉ Í¥ÄÎ¶¨ Í∞úÏÑ†
    startSessionTimeout() {
        if (this.sessionTimer) {
            clearTimeout(this.sessionTimer);
        }
        
        this.sessionTimer = setTimeout(() => {
            this.logout('SESSION_TIMEOUT');
        }, this.sessionTimeout);
        
        // ÌôúÎèô Í∞êÏßÄ Ïãú ÏÑ∏ÏÖò Ïó∞Ïû•
        this.setupActivityDetection();
    }

    setupActivityDetection() {
        const events = ['mousedown', 'mousemove', 'keypress', 'scroll', 'touchstart'];
        
        events.forEach(event => {
            document.addEventListener(event, () => {
                this.startSessionTimeout(); // ÌôúÎèô Í∞êÏßÄ Ïãú ÌÉÄÏù¥Î®∏ Ïû¨ÏÑ§Ï†ï
            }, { once: true, passive: true });
        });
    }

    // Í∂åÌïú ÌôïÏù∏ Í∞úÏÑ†
    checkPermission(action, vmId) {
        if (!this.currentUser) {
            return false;
        }

        // ÏÑ∏ÏÖò Ïú†Ìö®ÏÑ± ÌôïÏù∏
        if (!this.isSessionValid()) {
            this.logout('INVALID_SESSION');
            return false;
        }

        const userPermissions = this.currentUser.permissions || [];
        const vmPermissions = this.currentUser.vmAccess || [];

        const hasAction = userPermissions.includes(action) || userPermissions.includes('*');
        const hasVmAccess = vmPermissions.includes(vmId) || vmPermissions.includes('*');

        return hasAction && hasVmAccess;
    }

    // ÏÑ∏ÏÖò Ïú†Ìö®ÏÑ± ÌôïÏù∏
    isSessionValid() {
        if (!this.currentUser || !this.currentUser.sessionExpiry) {
            return false;
        }
        
        return Date.now() < this.currentUser.sessionExpiry;
    }

    // IP ÌôîÏù¥Ìä∏Î¶¨Ïä§Ìä∏ ÌôïÏù∏ Í∞úÏÑ†
    async checkIPWhitelist(clientIP = null) {
        if (this.allowedIPs.length === 0) {
            return true; // ÌôîÏù¥Ìä∏Î¶¨Ïä§Ìä∏Í∞Ä ÎπÑÏñ¥ÏûàÏúºÎ©¥ Î™®Îì† IP ÌóàÏö©
        }
        
        const ip = clientIP || await this.getClientIP();
        
        // CIDR ÌëúÍ∏∞Î≤ï ÏßÄÏõê
        return this.allowedIPs.some(allowedIP => {
            if (allowedIP.includes('/')) {
                return this.isIPInCIDR(ip, allowedIP);
            }
            return ip === allowedIP;
        });
    }

    // CIDR Î≤îÏúÑ ÌôïÏù∏
    isIPInCIDR(ip, cidr) {
        // Í∞ÑÎã®Ìïú CIDR ÌôïÏù∏ Î°úÏßÅ (Ïã§Ï†ú Íµ¨ÌòÑÏóêÏÑúÎäî Îçî Ï†ïÍµêÌïú ÎùºÏù¥Î∏åÎü¨Î¶¨ ÏÇ¨Ïö© Í∂åÏû•)
        const [network, prefixLength] = cidr.split('/');
        // IPv4 Í∏∞Î≥∏ Íµ¨ÌòÑ
        return ip.startsWith(network.split('.').slice(0, Math.floor(prefixLength / 8)).join('.'));
    }

    // Î≥¥Ïïà Ïù¥Î≤§Ìä∏ Î°úÍπÖ Í∞úÏÑ†
    async logSecurityEvent(eventType, details) {
        const logEntry = {
            id: crypto.randomUUID(),
            timestamp: new Date().toISOString(),
            eventType,
            user: this.currentUser?.username || 'anonymous',
            ip: await this.getClientIP(),
            userAgent: navigator.userAgent.substring(0, 200), // Í∏∏Ïù¥ Ï†úÌïú
            details: this.sanitizeLogDetails(details)
        };
        
        this.auditLogs.push(logEntry);
        
        // Î°úÍ∑∏ ÌÅ¨Í∏∞ Ï†úÌïú (Î©îÎ™®Î¶¨ ÎàÑÏàò Î∞©ÏßÄ)
        if (this.auditLogs.length > 1000) {
            this.auditLogs = this.auditLogs.slice(-500);
        }
        
        // Î∞±ÏóîÎìúÎ°ú Î°úÍ∑∏ Ï†ÑÏÜ° (ÏóêÎü¨ Ï≤òÎ¶¨ Í∞úÏÑ†)
        try {
            await fetch('/api/security/log', {
                method: 'POST',
                headers: { 
                    'Content-Type': 'application/json',
                    'X-Requested-With': 'XMLHttpRequest'
                },
                credentials: 'same-origin',
                body: JSON.stringify(logEntry)
            });
        } catch (error) {
            console.error('Î≥¥Ïïà Î°úÍ∑∏ Ï†ÑÏÜ° Ïã§Ìå®:', error);
            // Î°úÍ∑∏ Ï†ÑÏÜ° Ïã§Ìå® Ïãú Î°úÏª¨ Ï†ÄÏû•ÏÜåÏóê ÏûÑÏãú Ï†ÄÏû•
            this.storeFailedLog(logEntry);
        }
    }

    // Î°úÍ∑∏ ÏÑ∏Î∂ÄÏÇ¨Ìï≠ Ï†ïÏ†ú
    sanitizeLogDetails(details) {
        if (typeof details !== 'object' || details === null) {
            return details;
        }
        
        const sanitized = {};
        for (const [key, value] of Object.entries(details)) {
            if (typeof value === 'string') {
                sanitized[key] = this.sanitizeString(value);
            } else if (typeof value === 'object') {
                sanitized[key] = this.sanitizeLogDetails(value);
            } else {
                sanitized[key] = value;
            }
        }
        return sanitized;
    }

    // Ïã§Ìå®Ìïú Î°úÍ∑∏ Ï†ÄÏû•
    storeFailedLog(logEntry) {
        try {
            const failedLogs = JSON.parse(sessionStorage.getItem('failedLogs') || '[]');
            failedLogs.push(logEntry);
            
            // ÏµúÎåÄ 50Í∞úÍπåÏßÄÎßå Ï†ÄÏû•
            if (failedLogs.length > 50) {
                failedLogs.splice(0, failedLogs.length - 50);
            }
            
            sessionStorage.setItem('failedLogs', JSON.stringify(failedLogs));
        } catch (error) {
            console.error('Ïã§Ìå®Ìïú Î°úÍ∑∏ Ï†ÄÏû• Ïò§Î•ò:', error);
        }
    }
}

// ÏïîÌò∏Ìôî Ïó∞Í≤∞ ÌÅ¥ÎûòÏä§ Í∞úÏÑ†
class SecureConnection {
    constructor() {
        this.sslEnabled = true;
        this.cryptoKey = null;
        this.algorithm = 'AES-GCM';
        this.keyLength = 256;
        this.ivLength = 12;
        this.tagLength = 128;
        this.isEncryptionReady = false;
        this.sessionKeys = new Map();
        this.keyRotationInterval = 60 * 60 * 1000; // 1ÏãúÍ∞ÑÎßàÎã§ ÌÇ§ ÌöåÏ†Ñ
        this.setupKeyRotation();
    }

    // ÌÇ§ ÌöåÏ†Ñ ÏÑ§Ï†ï
    setupKeyRotation() {
        setInterval(() => {
            this.rotateSessionKeys();
        }, this.keyRotationInterval);
    }

    // ÏÑ∏ÏÖò ÌÇ§ ÌöåÏ†Ñ
    async rotateSessionKeys() {
        console.log('ÏÑ∏ÏÖò ÌÇ§ ÌöåÏ†Ñ ÏãúÏûë');
        const newKeys = new Map();
        
        for (const [sessionId, oldKey] of this.sessionKeys.entries()) {
            try {
                const newKey = await this.generateCryptoKey();
                newKeys.set(sessionId, newKey);
            } catch (error) {
                console.error(`ÏÑ∏ÏÖò ${sessionId} ÌÇ§ ÌöåÏ†Ñ Ïã§Ìå®:`, error);
                newKeys.set(sessionId, oldKey); // Ïã§Ìå® Ïãú Í∏∞Ï°¥ ÌÇ§ Ïú†ÏßÄ
            }
        }
        
        this.sessionKeys = newKeys;
        console.log('ÏÑ∏ÏÖò ÌÇ§ ÌöåÏ†Ñ ÏôÑÎ£å');
    }

    // ÌÇ§ ÏÉùÏÑ± Í∞úÏÑ†
    async generateCryptoKey() {
        try {
            const key = await crypto.subtle.generateKey(
                {
                    name: this.algorithm,
                    length: this.keyLength
                },
                false, // extractableÏùÑ falseÎ°ú ÏÑ§Ï†ïÌïòÏó¨ Î≥¥Ïïà Í∞ïÌôî
                ['encrypt', 'decrypt']
            );
            
            return key;
        } catch (error) {
            console.error('ÏïîÌò∏Ìôî ÌÇ§ ÏÉùÏÑ± Ïã§Ìå®:', error);
            throw new Error('ÌÇ§ ÏÉùÏÑ±Ïóê Ïã§Ìå®ÌñàÏäµÎãàÎã§.');
        }
    }

    // ÏïîÌò∏Ìôî Í∞úÏÑ† (ÏóêÎü¨ Ï≤òÎ¶¨ Í∞ïÌôî)
    async encryptData(data, key = this.cryptoKey) {
        if (!key) {
            throw new Error('ÏïîÌò∏Ìôî ÌÇ§Í∞Ä ÏÑ§Ï†ïÎêòÏßÄ ÏïäÏïòÏäµÎãàÎã§.');
        }

        try {
            const iv = crypto.getRandomValues(new Uint8Array(this.ivLength));
            const encoder = new TextEncoder();
            const dataBuffer = typeof data === 'string' ? encoder.encode(data) : data;

            // Îç∞Ïù¥ÌÑ∞ ÌÅ¨Í∏∞ Ï†úÌïú (DoS Í≥µÍ≤© Î∞©ÏßÄ)
            if (dataBuffer.byteLength > 1024 * 1024) { // 1MB Ï†úÌïú
                throw new Error('Îç∞Ïù¥ÌÑ∞ ÌÅ¨Í∏∞Í∞Ä ÎÑàÎ¨¥ ÌÅΩÎãàÎã§.');
            }

            const encryptedBuffer = await crypto.subtle.encrypt(
                {
                    name: this.algorithm,
                    iv: iv,
                    tagLength: this.tagLength
                },
                key,
                dataBuffer
            );

            const result = new Uint8Array(iv.length + encryptedBuffer.byteLength);
            result.set(iv, 0);
            result.set(new Uint8Array(encryptedBuffer), iv.length);

            return result.buffer;
        } catch (error) {
            console.error('Îç∞Ïù¥ÌÑ∞ ÏïîÌò∏Ìôî Ïã§Ìå®:', error);
            throw new Error('ÏïîÌò∏ÌôîÏóê Ïã§Ìå®ÌñàÏäµÎãàÎã§.');
        }
    }

    // Î≥µÌò∏Ìôî Í∞úÏÑ†
    async decryptData(encryptedData, key = this.cryptoKey) {
        if (!key) {
            throw new Error('Î≥µÌò∏Ìôî ÌÇ§Í∞Ä ÏÑ§Ï†ïÎêòÏßÄ ÏïäÏïòÏäµÎãàÎã§.');
        }

        try {
            const dataArray = new Uint8Array(encryptedData);
            
            // ÏµúÏÜå Îç∞Ïù¥ÌÑ∞ ÌÅ¨Í∏∞ ÌôïÏù∏
            if (dataArray.length < this.ivLength + this.tagLength / 8) {
                throw new Error('ÏûòÎ™ªÎêú ÏïîÌò∏Ìôî Îç∞Ïù¥ÌÑ∞ ÌòïÏãùÏûÖÎãàÎã§.');
            }
            
            const iv = dataArray.slice(0, this.ivLength);
            const encrypted = dataArray.slice(this.ivLength);

            const decryptedBuffer = await crypto.subtle.decrypt(
                {
                    name: this.algorithm,
                    iv: iv,
                    tagLength: this.tagLength
                },
                key,
                encrypted
            );

            const decoder = new TextDecoder();
            return decoder.decode(decryptedBuffer);
        } catch (error) {
            console.error('Îç∞Ïù¥ÌÑ∞ Î≥µÌò∏Ìôî Ïã§Ìå®:', error);
            throw new Error('Î≥µÌò∏ÌôîÏóê Ïã§Ìå®ÌñàÏäµÎãàÎã§.');
        }
    }

    // Ìï¥Ïãú ÏÉùÏÑ± Í∞úÏÑ†
    async generateHash(data, algorithm = 'SHA-256') {
        try {
            const encoder = new TextEncoder();
            const dataBuffer = typeof data === 'string' ? encoder.encode(data) : data;
            
            const hashBuffer = await crypto.subtle.digest(algorithm, dataBuffer);
            const hashArray = Array.from(new Uint8Array(hashBuffer));
            
            return hashArray.map(b => b.toString(16).padStart(2, '0')).join('');
        } catch (error) {
            console.error('Ìï¥Ïãú ÏÉùÏÑ± Ïã§Ìå®:', error);
            throw new Error('Ìï¥Ïãú ÏÉùÏÑ±Ïóê Ïã§Ìå®ÌñàÏäµÎãàÎã§.');
        }
    }

    // Î≥¥Ïïà ÎπÑÎ∞ÄÎ≤àÌò∏ ÏÉùÏÑ± Í∞úÏÑ†
    generateSecurePassword(length = 16, includeSymbols = true) {
        if (length < 8 || length > 128) {
            throw new Error('ÎπÑÎ∞ÄÎ≤àÌò∏ Í∏∏Ïù¥Îäî 8-128Ïûê ÏÇ¨Ïù¥Ïó¨Ïïº Ìï©ÎãàÎã§.');
        }

        const lowercase = 'abcdefghijklmnopqrstuvwxyz';
        const uppercase = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';
        const numbers = '0123456789';
        const symbols = includeSymbols ? '!@#$%^&*()_+-=[]{}|;:,.<>?' : '';
        
        const charset = lowercase + uppercase + numbers + symbols;
        const randomValues = new Uint8Array(length);
        crypto.getRandomValues(randomValues);
        
        let password = '';
        for (let i = 0; i < length; i++) {
            password += charset[randomValues[i] % charset.length];
        }
        
        // ÏµúÏÜå ÏöîÍµ¨ÏÇ¨Ìï≠ ÌôïÏù∏ (Í∞Å ÌÉÄÏûÖÎ≥Ñ ÏµúÏÜå 1Í∞ú)
        const hasLower = /[a-z]/.test(password);
        const hasUpper = /[A-Z]/.test(password);
        const hasNumber = /[0-9]/.test(password);
        const hasSymbol = !includeSymbols || /[!@#$%^&*()_+\-=\[\]{}|;:,.<>?]/.test(password);
        
        if (!hasLower || !hasUpper || !hasNumber || !hasSymbol) {
            // Ïû¨Í∑ÄÏ†ÅÏúºÎ°ú Îã§Ïãú ÏÉùÏÑ±
            return this.generateSecurePassword(length, includeSymbols);
        }
        
        return password;
    }

    // SSL/TLS Ïó∞Í≤∞ ÏÑ§Ï†ï Í∞úÏÑ†
    async setupSecureConnection(vmConfig) {
        try {
            if (!this.cryptoKey) {
                this.cryptoKey = await this.generateCryptoKey();
                this.isEncryptionReady = true;
            }

            // ÌîÑÎ°úÌÜ†ÏΩú Ïú†Ìö®ÏÑ± Í≤ÄÏÇ¨
            if (!vmConfig.host || !vmConfig.securePort) {
                throw new Error('Ïú†Ìö®ÌïòÏßÄ ÏïäÏùÄ VM ÏÑ§Ï†ïÏûÖÎãàÎã§.');
            }

            const protocol = this.sslEnabled ? 'wss:' : 'ws:';
            const wsUrl = `${protocol}//${vmConfig.host}:${vmConfig.securePort}/websockify`;
            
            // ÏÑ∏ÏÖò ÌÇ§ ÏÉùÏÑ±
            const sessionKey = await this.generateCryptoKey();
            const sessionId = await this.generateHash(Date.now().toString() + Math.random().toString());
            
            this.sessionKeys.set(sessionId, sessionKey);
            
            // ÏÑ∏ÏÖò ÎßåÎ£å ÏãúÍ∞Ñ ÏÑ§Ï†ï
            setTimeout(() => {
                this.clearSessionKey(sessionId);
            }, this.keyRotationInterval);

            return {
                ...vmConfig,
                wsUrl,
                encrypt: true,
                sessionId,
                credentials: {
                    password: this.generateSecurePassword(20, true)
                }
            };
        } catch (error) {
            console.error('Î≥¥Ïïà Ïó∞Í≤∞ ÏÑ§Ï†ï Ïã§Ìå®:', error);
            throw error;
        }
    }

    // ÏÑ∏ÏÖò ÌÇ§ Ï†ïÎ¶¨ Í∞úÏÑ†
    clearSessionKey(sessionId) {
        if (this.sessionKeys.has(sessionId)) {
            this.sessionKeys.delete(sessionId);
            console.log(`ÏÑ∏ÏÖò ÌÇ§ ${sessionId} Ï†ïÎ¶¨ ÏôÑÎ£å`);
        }
    }

    // Î™®Îì† ÏÑ∏ÏÖò ÌÇ§ ÏïàÏ†ÑÌïòÍ≤å Ï†ïÎ¶¨
    clearAllSessionKeys() {
        const count = this.sessionKeys.size;
        this.sessionKeys.clear();
        console.log(`${count}Í∞úÏùò ÏÑ∏ÏÖò ÌÇ§Í∞Ä Ï†ïÎ¶¨ÎêòÏóàÏäµÎãàÎã§.`);
    }
}

// Î≥¥Ïïà ÏÉåÎìúÎ∞ïÏä§ ÌîåÎû´Ìèº Í∞úÏÑ†
class SecureSandboxPlatform extends ExtendedSandboxPlatform {
    constructor() {
        super();
        this.securityManager = new SecurityManager();
        this.secureConnection = new SecureConnection();
        this.currentSessionId = null;
        this.securityConfig = {
            maxIdleTime: 15 * 60 * 1000, // 15Î∂Ñ Ïú†Ìú¥ ÏãúÍ∞Ñ
            maxSessionDuration: 4 * 60 * 60 * 1000, // 4ÏãúÍ∞Ñ ÏµúÎåÄ ÏÑ∏ÏÖò
            enableDevToolsBlocking: true,
            enableContextMenuBlocking: true,
            enableCopyPasteRestriction: false
        };
        this.initSecurity();
    }

    async initSecurity() {
        // Web Crypto API ÏßÄÏõê ÌôïÏù∏
        if (!crypto || !crypto.subtle) {
            this.handleSecurityError('Web Crypto APIÍ∞Ä ÏßÄÏõêÎêòÏßÄ ÏïäÏäµÎãàÎã§.');
            return;
        }

        try {
            await this.secureConnection.generateCryptoKey();
            this.secureConnection.isEncryptionReady = true;
            console.log('Î≥¥Ïïà Î™®ÎìàÏù¥ ÏÑ±Í≥µÏ†ÅÏúºÎ°ú Ï¥àÍ∏∞ÌôîÎêòÏóàÏäµÎãàÎã§.');
        } catch (error) {
            this.handleSecurityError('Î≥¥Ïïà Î™®Îìà Ï¥àÍ∏∞Ìôî Ïã§Ìå®', error);
            return;
        }

        await this.checkAuthentication();
        this.setupSecurityFilters();
        this.startSecurityMonitoring();
    }

    handleSecurityError(message, error = null) {
        console.error(message, error);
        
        // ÏÇ¨Ïö©ÏûêÏóêÍ≤å Î≥¥Ïïà Ïò§Î•ò ÏïåÎ¶º
        const notification = document.createElement('div');
        notification.className = 'security-alert';
        notification.textContent = message;
        notification.style.cssText = `
            position: fixed;
            top: 20px;
            right: 20px;
            background: #f44336;
            color: white;
            padding: 15px;
            border-radius: 4px;
            z-index: 10000;
            max-width: 300px;
        `;
        
        document.body.appendChild(notification);
        
        setTimeout(() => {
            notification.remove();
        }, 5000);
    }

    // Î≥¥Ïïà Î™®ÎãàÌÑ∞ÎßÅ ÏãúÏûë
    startSecurityMonitoring() {
        // Ï†ïÍ∏∞Ï†ÅÏù∏ Î≥¥Ïïà Ï†êÍ≤Ä
        setInterval(() => {
            this.performSecurityCheck();
        }, 60000); // 1Î∂ÑÎßàÎã§
        
        // ÌéòÏù¥ÏßÄ Í∞ÄÏãúÏÑ± Î≥ÄÍ≤Ω Í∞êÏßÄ
        document.addEventListener('visibilitychange', () => {
            if (document.hidden) {
                this.securityManager.logSecurityEvent('PAGE_HIDDEN', {
                    timestamp: Date.now()
                });
            } else {
                this.securityManager.logSecurityEvent('PAGE_VISIBLE', {
                    timestamp: Date.now()
                });
            }
        });
        
        // ÌéòÏù¥ÏßÄ Ïñ∏Î°úÎìú Ïãú Ï†ïÎ¶¨
        window.addEventListener('beforeunload', () => {
            this.cleanup();
        });
    }

    // Ï†ïÎ¶¨ ÏûëÏóÖ
    cleanup() {
        if (this.currentSessionId) {
            this.secureConnection.clearSessionKey(this.currentSessionId);
        }
        this.securityManager.logSecurityEvent('SESSION_CLEANUP', {
            timestamp: Date.now()
        });
    }

    // Î≥¥Ïïà ÌïÑÌÑ∞ ÏÑ§Ï†ï Í∞úÏÑ†
    setupSecurityFilters() {
        if (this.securityConfig.enableDevToolsBlocking) {
            this.blockDevTools();
        }
        
        if (this.securityConfig.enableContextMenuBlocking) {
            this.blockContextMenu();
        }
        
        if (this.securityConfig.enableCopyPasteRestriction) {
            this.restrictCopyPaste();
        }
        
        // ÌÇ§Î≥¥Îìú Îã®Ï∂ïÌÇ§ Ï∞®Îã®
        this.blockDangerousKeyboardShortcuts();
    }

    blockDevTools() {
        // F12, Ctrl+Shift+I, Ctrl+U Îì± Ï∞®Îã®
        document.addEventListener('keydown', (event) => {
            const isDangerous = (
                event.key === 'F12' ||
                (event.ctrlKey && event.shiftKey && event.key === 'I') ||
                (event.ctrlKey && event.key === 'U') ||
                (event.ctrlKey && event.shiftKey && event.key === 'C') ||
                (event.ctrlKey && event.shiftKey && event.key === 'J')
            );
            
            if (isDangerous) {
                event.preventDefault();
                event.stopPropagation();
                this.securityManager.logSecurityEvent('DEV_TOOLS_BLOCKED', {
                    key: event.key,
                    ctrlKey: event.ctrlKey,
                    shiftKey: event.shiftKey
                });
            }
        }, true);
    }

    blockContextMenu() {
        document.addEventListener('contextmenu', (event) => {
            event.preventDefault();
            this.securityManager.logSecurityEvent('CONTEXT_MENU_BLOCKED', {
                target: event.target.tagName
            });
        });
    }

    restrictCopyPaste() {
        ['copy', 'cut', 'paste'].forEach(event => {
            document.addEventListener(event, (e) => {
                e.preventDefault();
                this.securityManager.logSecurityEvent('CLIPBOARD_BLOCKED', {
                    action: event
                });
            });
        });
    }

    blockDangerousKeyboardShortcuts() {
        document.addEventListener('keydown', (event) => {
            // ÏúÑÌóòÌïú ÌÇ§ Ï°∞Ìï©Îì§
            const dangerousShortcuts = [
                { ctrl: true, key: 'S' }, // Ï†ÄÏû•
                { ctrl: true, key: 'P' }, // Ïù∏ÏáÑ
                { ctrl: true, key: 'O' }, // Ïó¥Í∏∞
                { ctrl: true, shift: true, key: 'Delete' }, // ÏûëÏóÖ Í¥ÄÎ¶¨Ïûê
                { alt: true, key: 'F4' }, // ÌîÑÎ°úÍ∑∏Îû® Ï¢ÖÎ£å
            ];
            
            const isDangerous = dangerousShortcuts.some(shortcut => {
                return (
                    (!shortcut.ctrl || event.ctrlKey) &&
                    (!shortcut.shift || event.shiftKey) &&
                    (!shortcut.alt || event.altKey) &&
                    event.key === shortcut.key
                );
            });
            
            if (isDangerous) {
                event.preventDefault();
                event.stopPropagation();
                this.securityManager.logSecurityEvent('DANGEROUS_SHORTCUT_BLOCKED', {
                    key: event.key,
                    modifiers: {
                        ctrl: event.ctrlKey,
                        shift: event.shiftKey,
                        alt: event.altKey
                    }
                });
            }
        }, true);
    }

    // Ïù∏Ï¶ù ÌôïÏù∏ Í∞úÏÑ†
    async checkAuthentication() {
        const token = this.getAuthToken();
        if (!token) {
            return false;
        }

        try {
            const tokenHash = await this.secureConnection.generateHash(token);
            
            const response = await fetch('/api/auth/verify', {
                method: 'POST',
                headers: {
                    'Authorization': `Bearer ${token}`,
                    'Content-Type': 'application/json',
                    'X-Token-Hash': tokenHash,
                    'X-Requested-With': 'XMLHttpRequest'
                },
                credentials: 'same-origin'
            });
            
            if (response.ok) {
                const userData = await response.json();
                this.securityManager.currentUser = userData;
                return true;
            } else {
                this.securityManager.logout('INVALID_TOKEN');
                return false;
            }
        } catch (error) {
            console.error('Ïù∏Ï¶ù ÌôïÏù∏ Ïã§Ìå®:', error);
            this.securityManager.logSecurityEvent('AUTH_CHECK_ERROR', {
                error: error.message
            });
            return false;
        }
    }

    getAuthToken() {
        // sessionStorage ÏÇ¨Ïö© (localStorageÎ≥¥Îã§ ÏïàÏ†Ñ)
        try {
            const token = sessionStorage.getItem('authToken');
            if (token) {
                // ÌÜ†ÌÅ∞ ÌòïÏãù Í≤ÄÏ¶ù
                const parts = token.split('.');
                if (parts.length !== 3) {
                    sessionStorage.removeItem('authToken');
                    return null;
                }
            }
            return token;
        } catch (error) {
            console.error('ÌÜ†ÌÅ∞ Ï°∞Ìöå Ïò§Î•ò:', error);
            return null;
        }
    }

    // Î≥¥Ïïà Ï†êÍ≤Ä Í∞úÏÑ†
    performSecurityCheck() {
        try {
            // ÏÑ∏ÏÖò Ïú†Ìö®ÏÑ± Í≤ÄÏÇ¨
            if (!this.securityManager.currentUser) {
                this.redirectToLogin();
                return;
            }

            // ÏÑ∏ÏÖò ÎßåÎ£å ÌôïÏù∏
            if (!this.securityManager.isSessionValid()) {
                this.securityManager.logout('SESSION_EXPIRED');
                return;
            }

            // Î©îÎ™®Î¶¨ ÏÇ¨Ïö©Îüâ ÌôïÏù∏
            this.checkMemoryUsage();
            
            // ÏùòÏã¨Ïä§Îü¨Ïö¥ ÌôúÎèô Í∞êÏßÄ
            this.detectSuspiciousActivity();
            
            // ÎÑ§Ìä∏ÏõåÌÅ¨ Ïó∞Í≤∞ ÏÉÅÌÉú ÌôïÏù∏
            this.checkNetworkStatus();
            
        } catch (error) {
            console.error('Î≥¥Ïïà Ï†êÍ≤Ä Ïò§Î•ò:', error);
            this.securityManager.logSecurityEvent('SECURITY_CHECK_ERROR', {
                error: error.message
            });
        }
    }

    // Î©îÎ™®Î¶¨ ÏÇ¨Ïö©Îüâ ÌôïÏù∏
    checkMemoryUsage() {
        if ('memory' in performance) {
            const memInfo = performance.memory;
            const usedMemory = memInfo.usedJSHeapSize;
            const totalMemory = memInfo.totalJSHeapSize;
            const memoryUsagePercent = (usedMemory / totalMemory) * 100;
            
            if (memoryUsagePercent > 80) {
                this.securityManager.logSecurityEvent('HIGH_MEMORY_USAGE', {
                    usedMemory,
                    totalMemory,
                    usagePercent: memoryUsagePercent
                });
                
                // Î©îÎ™®Î¶¨ Ï†ïÎ¶¨ ÏãúÎèÑ
                this.performMemoryCleanup();
            }
        }
    }

    // Î©îÎ™®Î¶¨ Ï†ïÎ¶¨
    performMemoryCleanup() {
        // Ïò§ÎûòÎêú Î°úÍ∑∏ Ï†ïÎ¶¨
        if (this.securityManager.auditLogs.length > 500) {
            this.securityManager.auditLogs = this.securityManager.auditLogs.slice(-200);
        }
        
        // ÎßåÎ£åÎêú ÏÑ∏ÏÖò ÌÇ§ Ï†ïÎ¶¨
        this.secureConnection.sessionKeys.forEach((value, key) => {
            // ÏÑ∏ÏÖò ÌÇ§ ÏÉùÏÑ± ÏãúÍ∞ÑÏùÑ Ï∂îÏ†ÅÌïòÏó¨ ÎßåÎ£åÎêú ÌÇ§ Ï†úÍ±∞
            // Ïã§Ï†ú Íµ¨ÌòÑÏóêÏÑúÎäî ÌÇ§ ÏÉùÏÑ± ÏãúÍ∞ÑÏùÑ Î≥ÑÎèÑÎ°ú Ï†ÄÏû•Ìï¥Ïïº Ìï®
        });
        
        // Í∞ÄÎπÑÏßÄ Ïª¨Î†âÏÖò Í∞ïÏ†ú Ïã§Ìñâ (Í∞úÎ∞ú ÌôòÍ≤ΩÏóêÏÑúÎßå)
        if (window.gc && typeof window.gc === 'function') {
            window.gc();
        }
    }

    // ÎÑ§Ìä∏ÏõåÌÅ¨ ÏÉÅÌÉú ÌôïÏù∏
    checkNetworkStatus() {
        if ('onLine' in navigator && !navigator.onLine) {
            this.securityManager.logSecurityEvent('NETWORK_DISCONNECTED', {
                timestamp: Date.now()
            });
            
            // ÎÑ§Ìä∏ÏõåÌÅ¨ Ïó∞Í≤∞ Î≥µÍµ¨ ÎåÄÍ∏∞
            window.addEventListener('online', () => {
                this.securityManager.logSecurityEvent('NETWORK_RECONNECTED', {
                    timestamp: Date.now()
                });
            }, { once: true });
        }
    }

    // ÏùòÏã¨Ïä§Îü¨Ïö¥ ÌôúÎèô Í∞êÏßÄ Í∞úÏÑ†
    detectSuspiciousActivity() {
        const now = Date.now();
        const recentLogs = this.securityManager.auditLogs.filter(
            log => now - new Date(log.timestamp).getTime() < 300000 // 5Î∂Ñ Ïù¥ÎÇ¥
        );
        
        // Ìå®ÌÑ¥ Î∂ÑÏÑù
        const patterns = {
            rapidRequests: this.detectRapidRequests(recentLogs),
            failedLogins: this.detectFailedLogins(recentLogs),
            suspiciousKeystrokes: this.detectSuspiciousKeystrokes(recentLogs),
            timeAnomaly: this.detectTimeAnomaly(recentLogs)
        };
        
        Object.entries(patterns).forEach(([pattern, detected]) => {
            if (detected.isSuspicious) {
                this.securityManager.logSecurityEvent('SUSPICIOUS_ACTIVITY_DETECTED', {
                    pattern,
                    details: detected.details,
                    severity: detected.severity || 'medium'
                });
                
                if (detected.severity === 'high') {
                    this.handleHighSeverityThreat(pattern, detected);
                }
            }
        });
    }

    // Îπ†Î•∏ ÏöîÏ≤≠ Ìå®ÌÑ¥ Í∞êÏßÄ
    detectRapidRequests(logs) {
        const apiCalls = logs.filter(log => 
            log.eventType.includes('API_CALL') || 
            log.eventType.includes('REQUEST')
        );
        
        if (apiCalls.length > 50) { // 5Î∂ÑÍ∞Ñ 50Ìöå Ïù¥ÏÉÅ
            return {
                isSuspicious: true,
                details: { count: apiCalls.length, timeWindow: '5Î∂Ñ' },
                severity: 'high'
            };
        }
        
        return { isSuspicious: false };
    }

    // Ïã§Ìå®Ìïú Î°úÍ∑∏Ïù∏ ÏãúÎèÑ Í∞êÏßÄ
    detectFailedLogins(logs) {
        const failedLogins = logs.filter(log => 
            log.eventType === 'LOGIN_ERROR' || 
            log.eventType === 'ACCOUNT_LOCKED'
        );
        
        if (failedLogins.length > 5) {
            return {
                isSuspicious: true,
                details: { failedAttempts: failedLogins.length },
                severity: 'high'
            };
        }
        
        return { isSuspicious: false };
    }

    // ÏùòÏã¨Ïä§Îü¨Ïö¥ ÌÇ§ ÏûÖÎ†• Ìå®ÌÑ¥ Í∞êÏßÄ
    detectSuspiciousKeystrokes(logs) {
        const blockedEvents = logs.filter(log => 
            log.eventType.includes('BLOCKED') && 
            log.details && log.details.key
        );
        
        if (blockedEvents.length > 10) {
            return {
                isSuspicious: true,
                details: { blockedAttempts: blockedEvents.length },
                severity: 'medium'
            };
        }
        
        return { isSuspicious: false };
    }

    // ÏãúÍ∞Ñ Ïù¥ÏÉÅ Ìå®ÌÑ¥ Í∞êÏßÄ
    detectTimeAnomaly(logs) {
        if (logs.length < 2) {
            return { isSuspicious: false };
        }
        
        // ÎπÑÏ†ïÏÉÅÏ†ÅÏúºÎ°ú Îπ†Î•∏ Ïó∞ÏÜç ÏûëÏóÖ Í∞êÏßÄ
        const timestamps = logs.map(log => new Date(log.timestamp).getTime());
        const rapidActions = timestamps.reduce((count, current, index) => {
            if (index > 0 && current - timestamps[index - 1] < 100) { // 100ms Ïù¥ÎÇ¥
                return count + 1;
            }
            return count;
        }, 0);
        
        if (rapidActions > 20) {
            return {
                isSuspicious: true,
                details: { rapidActionCount: rapidActions },
                severity: 'medium'
            };
        }
        
        return { isSuspicious: false };
    }

    // Í≥†ÏúÑÌóò ÏúÑÌòë Ï≤òÎ¶¨
    handleHighSeverityThreat(pattern, detected) {
        console.warn(`Í≥†ÏúÑÌóò Î≥¥Ïïà ÏúÑÌòë Í∞êÏßÄ: ${pattern}`, detected);
        
        // ÏûÑÏãú ÏÑ∏ÏÖò Ï§ëÎã®
        if (this.currentSessionId) {
            this.secureConnection.clearSessionKey(this.currentSessionId);
            this.currentSessionId = null;
        }
        
        // Í¥ÄÎ¶¨ÏûêÏóêÍ≤å ÏïåÎ¶º (Ïã§Ï†ú Íµ¨ÌòÑÏóêÏÑúÎäî ÏÑúÎ≤ÑÎ°ú Ï†ÑÏÜ°)
        this.notifyAdministrator(pattern, detected);
        
        // ÏÇ¨Ïö©ÏûêÏóêÍ≤å Í≤ΩÍ≥†
        this.showSecurityWarning(`Î≥¥Ïïà ÏúÑÌòëÏù¥ Í∞êÏßÄÎêòÏñ¥ ÏÑ∏ÏÖòÏù¥ ÏùºÏãú Ï§ëÎã®ÎêòÏóàÏäµÎãàÎã§.`);
    }

    // Í¥ÄÎ¶¨Ïûê ÏïåÎ¶º
    async notifyAdministrator(pattern, details) {
        try {
            await fetch('/api/security/alert', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'X-Requested-With': 'XMLHttpRequest'
                },
                credentials: 'same-origin',
                body: JSON.stringify({
                    type: 'HIGH_SEVERITY_THREAT',
                    pattern,
                    details,
                    user: this.securityManager.currentUser?.username,
                    timestamp: new Date().toISOString(),
                    userAgent: navigator.userAgent,
                    ip: await this.securityManager.getClientIP()
                })
            });
        } catch (error) {
            console.error('Í¥ÄÎ¶¨Ïûê ÏïåÎ¶º Ï†ÑÏÜ° Ïã§Ìå®:', error);
        }
    }

    // Î≥¥Ïïà Í≤ΩÍ≥† ÌëúÏãú
    showSecurityWarning(message) {
        const warning = document.createElement('div');
        warning.className = 'security-warning';
        warning.innerHTML = `
            <div style="
                position: fixed;
                top: 0;
                left: 0;
                width: 100%;
                height: 100%;
                background: rgba(0,0,0,0.8);
                z-index: 999999;
                display: flex;
                align-items: center;
                justify-content: center;
            ">
                <div style="
                    background: white;
                    padding: 30px;
                    border-radius: 8px;
                    max-width: 400px;
                    text-align: center;
                    box-shadow: 0 4px 20px rgba(0,0,0,0.3);
                ">
                    <h3 style="color: #f44336; margin-top: 0;">Î≥¥Ïïà Í≤ΩÍ≥†</h3>
                    <p>${message}</p>
                    <button onclick="location.reload()" style="
                        background: #f44336;
                        color: white;
                        border: none;
                        padding: 10px 20px;
                        border-radius: 4px;
                        cursor: pointer;
                        margin-top: 15px;
                    ">ÌéòÏù¥ÏßÄ ÏÉàÎ°úÍ≥†Ïπ®</button>
                </div>
            </div>
        `;
        
        document.body.appendChild(warning);
    }

    redirectToLogin() {
        this.cleanup();
        window.location.replace('/login');
    }

    // VM ÏãúÏûë Í∞úÏÑ†
    async startVM() {
        try {
            // Í∂åÌïú ÌôïÏù∏
            if (!this.securityManager.checkPermission('START_VM', this.currentVM)) {
                throw new Error('Í∞ÄÏÉÅÎ®∏Ïã† ÏãúÏûë Í∂åÌïúÏù¥ ÏóÜÏäµÎãàÎã§.');
            }

            // Î≥¥Ïïà Ïó∞Í≤∞ ÏÑ§Ï†ï
            const secureConfig = await this.secureConnection.setupSecureConnection(this.vmConfig);
            this.currentSessionId = secureConfig.sessionId;

            // ÏãúÏûë Îç∞Ïù¥ÌÑ∞ ÏïîÌò∏Ìôî
            const startupData = {
                vmId: this.currentVM,
                config: secureConfig,
                timestamp: Date.now(),
                user: this.securityManager.currentUser?.username,
                checksum: await this.secureConnection.generateHash(
                    JSON.stringify(secureConfig) + this.currentVM
                )
            };

            const encryptedStartupData = await this.secureConnection.encryptSessionData(
                JSON.stringify(startupData), 
                this.currentSessionId
            );

            // Î≥¥Ïïà Ïù¥Î≤§Ìä∏ Î°úÍπÖ
            this.securityManager.logSecurityEvent('VM_START_ATTEMPT', {
                vmId: this.currentVM,
                sessionId: this.currentSessionId,
                encrypted: true,
                checksumVerified: true
            });

            console.log('VM ÏãúÏûë Îç∞Ïù¥ÌÑ∞Í∞Ä ÏïîÌò∏ÌôîÎêòÏóàÏäµÎãàÎã§.');
            
            // Î∂ÄÎ™® ÌÅ¥ÎûòÏä§Ïùò startVM Ìò∏Ï∂ú
            await super.startVM();
            
            this.securityManager.logSecurityEvent('VM_START_SUCCESS', {
                vmId: this.currentVM,
                sessionId: this.currentSessionId
            });
            
        } catch (error) {
            console.error('Î≥¥Ïïà VM ÏãúÏûë Ïã§Ìå®:', error);
            this.securityManager.logSecurityEvent('VM_START_ERROR', {
                error: error.message,
                vmId: this.currentVM
            });
            throw error;
        }
    }

    // ÏïàÏ†ÑÌïú Îç∞Ïù¥ÌÑ∞ Ï†ÑÏÜ° Í∞úÏÑ†
    async sendSecureData(data) {
        if (!this.currentSessionId) {
            throw new Error('Î≥¥Ïïà ÏÑ∏ÏÖòÏù¥ ÏÑ§Ï†ïÎêòÏßÄ ÏïäÏïòÏäµÎãàÎã§.');
        }

        try {
            // Îç∞Ïù¥ÌÑ∞ Ïú†Ìö®ÏÑ± Í≤ÄÏÇ¨
            if (!data || typeof data !== 'object') {
                throw new Error('Ïú†Ìö®ÌïòÏßÄ ÏïäÏùÄ Îç∞Ïù¥ÌÑ∞ÏûÖÎãàÎã§.');
            }

            // ÌÉÄÏûÑÏä§ÌÉ¨ÌîÑÏôÄ Ï≤¥ÌÅ¨ÏÑ¨ Ï∂îÍ∞Ä
            const secureData = {
                ...data,
                timestamp: Date.now(),
                sessionId: this.currentSessionId,
                checksum: await this.secureConnection.generateHash(JSON.stringify(data))
            };

            const encryptedData = await this.secureConnection.encryptSessionData(
                JSON.stringify(secureData), 
                this.currentSessionId
            );
            
            // ÏïàÏ†ÑÌïú Base64 Ïù∏ÏΩîÎî©
            const base64Data = this.arrayBufferToBase64(encryptedData);
            
            this.securityManager.logSecurityEvent('SECURE_DATA_SENT', {
                dataType: data.type || 'unknown',
                size: base64Data.length,
                sessionId: this.currentSessionId
            });
            
            return base64Data;
        } catch (error) {
            console.error('Îç∞Ïù¥ÌÑ∞ ÏïîÌò∏Ìôî Ïã§Ìå®:', error);
            this.securityManager.logSecurityEvent('SECURE_DATA_SEND_ERROR', {
                error: error.message
            });
            throw error;
        }
    }

    // ArrayBufferÎ•º Base64Î°ú Î≥ÄÌôò (ÏïàÏ†ÑÌïú Î∞©Î≤ï)
    arrayBufferToBase64(buffer) {
        const bytes = new Uint8Array(buffer);
        let binary = '';
        for (let i = 0; i < bytes.byteLength; i++) {
            binary += String.fromCharCode(bytes[i]);
        }
        return btoa(binary);
    }

    // Base64Î•º ArrayBufferÎ°ú Î≥ÄÌôò (ÏïàÏ†ÑÌïú Î∞©Î≤ï)
    base64ToArrayBuffer(base64) {
        try {
            const binaryString = atob(base64);
            const bytes = new Uint8Array(binaryString.length);
            for (let i = 0; i < binaryString.length; i++) {
                bytes[i] = binaryString.charCodeAt(i);
            }
            return bytes.buffer;
        } catch (error) {
            throw new Error('Base64 ÎîîÏΩîÎî© Ïã§Ìå®');
        }
    }

    // ÏïîÌò∏ÌôîÎêú Îç∞Ïù¥ÌÑ∞ ÏàòÏã† Í∞úÏÑ†
    async receiveSecureData(base64Data) {
        if (!this.currentSessionId) {
            throw new Error('Î≥¥Ïïà ÏÑ∏ÏÖòÏù¥ ÏÑ§Ï†ïÎêòÏßÄ ÏïäÏïòÏäµÎãàÎã§.');
        }

        try {
            if (!base64Data || typeof base64Data !== 'string') {
                throw new Error('Ïú†Ìö®ÌïòÏßÄ ÏïäÏùÄ Îç∞Ïù¥ÌÑ∞ ÌòïÏãùÏûÖÎãàÎã§.');
            }

            const encryptedData = this.base64ToArrayBuffer(base64Data);
            
            const decryptedData = await this.secureConnection.decryptSessionData(
                encryptedData, 
                this.currentSessionId
            );
            
            const parsedData = JSON.parse(decryptedData);
            
            // Îç∞Ïù¥ÌÑ∞ Î¨¥Í≤∞ÏÑ± ÌôïÏù∏
            if (!parsedData.checksum || !parsedData.timestamp) {
                throw new Error('Îç∞Ïù¥ÌÑ∞ Î¨¥Í≤∞ÏÑ± ÌôïÏù∏ Ïã§Ìå®');
            }
            
            // Ï≤¥ÌÅ¨ÏÑ¨ Í≤ÄÏ¶ù
            const originalData = { ...parsedData };
            delete originalData.checksum;
            delete originalData.timestamp;
            delete originalData.sessionId;
            
            const expectedChecksum = await this.secureConnection.generateHash(
                JSON.stringify(originalData)
            );
            
            if (parsedData.checksum !== expectedChecksum) {
                throw new Error('Îç∞Ïù¥ÌÑ∞ Ï≤¥ÌÅ¨ÏÑ¨ Î∂àÏùºÏπò');
            }
            
            // ÌÉÄÏûÑÏä§ÌÉ¨ÌîÑ ÌôïÏù∏ (Ïû¨ÏÉù Í≥µÍ≤© Î∞©ÏßÄ)
            const now = Date.now();
            const dataAge = now - parsedData.timestamp;
            if (dataAge > 300000) { // 5Î∂Ñ Ïù¥ÏÉÅ Îêú Îç∞Ïù¥ÌÑ∞ Í±∞Î∂Ä
                throw new Error('Îç∞Ïù¥ÌÑ∞Í∞Ä ÎÑàÎ¨¥ Ïò§ÎûòÎêòÏóàÏäµÎãàÎã§.');
            }
            
            this.securityManager.logSecurityEvent('SECURE_DATA_RECEIVED', {
                dataType: originalData.type || 'unknown',
                dataAge,
                sessionId: this.currentSessionId
            });
            
            return originalData;
        } catch (error) {
            console.error('Îç∞Ïù¥ÌÑ∞ Î≥µÌò∏Ìôî Ïã§Ìå®:', error);
            this.securityManager.logSecurityEvent('SECURE_DATA_RECEIVE_ERROR', {
                error: error.message
            });
            throw error;
        }
    }
}

// Î≥¥Ïïà Ìà¥Î∞î Í∏∞Îä•Îì§
function sendCtrlAltDel() {
    if (platform.rfb && platform.isConnected) {
        platform.securityManager.logSecurityEvent('CTRL_ALT_DEL_SENT', {
            vmId: platform.currentVM
        });
        platform.rfb.sendCtrlAltDel();
    }
}

function toggleFullscreen() {
    const container = document.getElementById('vnc-container');
    if (document.fullscreenElement) {
        document.exitFullscreen();
        platform.securityManager.logSecurityEvent('FULLSCREEN_EXIT', {});
    } else {
        container.requestFullscreen().then(() => {
            platform.securityManager.logSecurityEvent('FULLSCREEN_ENTER', {});
        }).catch(error => {
            console.error('Ï†ÑÏ≤¥ÌôîÎ©¥ Ï†ÑÌôò Ïã§Ìå®:', error);
        });
    }
}

async function takeScreenshot() {
    if (!platform.rfb || !platform.isConnected) {
        alert('VMÏóê Ïó∞Í≤∞ÎêòÏßÄ ÏïäÏïòÏäµÎãàÎã§.');
        return;
    }

    // Ïä§ÌÅ¨Î¶∞ÏÉ∑ Í∂åÌïú ÌôïÏù∏
    if (!platform.securityManager.checkPermission('TAKE_SCREENSHOT', platform.currentVM)) {
        alert('Ïä§ÌÅ¨Î¶∞ÏÉ∑ Í∂åÌïúÏù¥ ÏóÜÏäµÎãàÎã§.');
        return;
    }

    try {
        const canvas = document.getElementById('vnc-canvas');
        if (!canvas) {
            throw new Error('Ï∫îÎ≤ÑÏä§Î•º Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§.');
        }

        const dataUrl = canvas.toDataURL('image/png');
        
        // Ïä§ÌÅ¨Î¶∞ÏÉ∑ Îç∞Ïù¥ÌÑ∞Î•º ÏïîÌò∏Ìôî
        const screenshotData = {
            type: 'screenshot',
            data: dataUrl,
            vmId: platform.currentVM,
            timestamp: Date.now(),
            user: platform.securityManager.currentUser?.username
        };
        
        const encryptedScreenshot = await platform.sendSecureData(screenshotData);
        
        // Îã§Ïö¥Î°úÎìú ÎßÅÌÅ¨ ÏÉùÏÑ±
        const link = document.createElement('a');
        link.download = `screenshot-${platform.currentVM}-${new Date().getTime()}.png`;
        link.href = dataUrl;
        
        // ÏûÑÏãúÎ°ú DOMÏóê Ï∂îÍ∞ÄÌïòÍ≥† ÌÅ¥Î¶≠
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
        
        platform.securityManager.logSecurityEvent('SCREENSHOT_TAKEN', {
            vmId: platform.currentVM,
            encrypted: true,
            fileSize: dataUrl.length
        });
        
    } catch (error) {
        console.error('Î≥¥Ïïà Ïä§ÌÅ¨Î¶∞ÏÉ∑ Ïã§Ìå®:', error);
        platform.securityManager.logSecurityEvent('SCREENSHOT_ERROR', {
            error: error.message,
            vmId: platform.currentVM
        });
        alert('Ïä§ÌÅ¨Î¶∞ÏÉ∑ ÏÉùÏÑ±Ïóê Ïã§Ìå®ÌñàÏäµÎãàÎã§.');
    }
}

// Ï†ÑÏó≠ Ïò§Î•ò Ï≤òÎ¶¨Í∏∞
window.addEventListener('error', (event) => {
    if (window.platform && window.platform.securityManager) {
        platform.securityManager.logSecurityEvent('JAVASCRIPT_ERROR', {
            message: event.message,
            filename: event.filename,
            lineno: event.lineno,
            colno: event.colno
        });
    }
});

// Ï≤òÎ¶¨ÎêòÏßÄ ÏïäÏùÄ Promise Í±∞Î∂Ä Ï≤òÎ¶¨
window.addEventListener('unhandledrejection', (event) => {
    if (window.platform && window.platform.securityManager) {
        platform.securityManager.logSecurityEvent('UNHANDLED_PROMISE_REJECTION', {
            reason: event.reason?.toString() || 'Unknown reason'
        });
    }
});

// ÌîåÎû´Ìèº Ï¥àÍ∏∞Ìôî
const platform = new SecureSandboxPlatform();

// Ï¥àÍ∏∞Ìôî Î∞è Ïù∏Ï¶ù ÌôïÏù∏
document.addEventListener('DOMContentLoaded', async () => {
    console.log('Ïõπ Í∏∞Î∞ò Î≥¥Ïïà ÏÉåÎìúÎ∞ïÏä§ ÌîåÎû´ÌèºÏù¥ Ï¥àÍ∏∞ÌôîÎêòÏóàÏäµÎãàÎã§.');
    
    try {
        // Web Crypto API ÏßÄÏõê Ïû¨ÌôïÏù∏
        if (!crypto || !crypto.subtle) {
            throw new Error('Web Crypto API ÎØ∏ÏßÄÏõê');
        }
        
        // Î≥¥Ïïà Ìó§Îçî ÌôïÏù∏
        if (location.protocol !== 'https:' && location.hostname !== 'localhost') {
            console.warn('HTTPS Ïó∞Í≤∞Ïù¥ Í∂åÏû•Îê©ÎãàÎã§.');
        }
        
        // Ïù∏Ï¶ù ÏÉÅÌÉú ÌôïÏù∏ (Î°úÏª¨ Í∞úÎ∞ú ÌôòÍ≤Ω Ï†úÏô∏)
        if (currentConfig.apiBaseUrl !== 'http://localhost:3000') {
            const isAuthenticated = await platform.checkAuthentication();
            if (!isAuthenticated) {
                platform.redirectToLogin();
                return;
            }
        }

        console.log('Î≥¥Ïïà Ï¥àÍ∏∞ÌôîÍ∞Ä ÏôÑÎ£åÎêòÏóàÏäµÎãàÎã§.');
        
        // Î≥¥Ïïà ÏÉÅÌÉú ÌëúÏãú
        const statusElement = document.getElementById('security-status');
        if (statusElement) {
            statusElement.textContent = 'Î≥¥Ïïà Ïó∞Í≤∞ ÌôúÏÑ±ÌôîÎê®';
            statusElement.style.color = '#4CAF50';
        }
        
    } catch (error) {
        console.error('Î≥¥Ïïà Ï¥àÍ∏∞Ìôî Ïã§Ìå®:', error);
        
        // ÏÇ¨Ïö©ÏûêÏóêÍ≤å Ïò§Î•ò ÏïåÎ¶º
        const errorDiv = document.createElement('div');
        errorDiv.innerHTML = `
            <div style="
                position: fixed;
                top: 20px;
                left: 50%;
                transform: translateX(-50%);
                background: #f44336;
                color: white;
                padding: 15px;
                border-radius: 4px;
                z-index: 10000;
                max-width: 400px;
                text-align: center;
            ">
                Î≥¥Ïïà Ï¥àÍ∏∞Ìôî Ïã§Ìå®: ${error.message}
                <br>
                <button onclick="location.reload()" style="
                    background: rgba(255,255,255,0.2);
                    color: white;
                    border: 1px solid white;
                    padding: 5px 10px;
                    margin-top: 10px;
                    border-radius: 3px;
                    cursor: pointer;
                ">ÏÉàÎ°úÍ≥†Ïπ®</button>
            </div>
        `;
        document.body.appendChild(errorDiv);
    }
});
    </script>
</body>
</html>
