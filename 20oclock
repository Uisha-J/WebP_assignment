<!DOCTYPE html>
<html lang="ko">
<head>
    <!-- simple-keyboard CSS -->
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/simple-keyboard@latest/build/css/index.css">
    <!-- simple-keyboard JS -->
    <script src="https://cdn.jsdelivr.net/npm/simple-keyboard@latest/build/index.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/novnc/1.3.0/core/util.js"></script>
    <script src="https://unpkg.com/@novnc/novnc/lib/rfb.js"></script>
    
    <!-- ÎòêÎäî Î°úÏª¨ noVNC ÌååÏùº ÏÇ¨Ïö© -->
    <!-- <script src="/novnc/core/rfb.js"></script> -->
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Ïõπ Í∏∞Î∞ò ÏÉåÎìúÎ∞ïÏä§ ÌîåÎû´Ìèº</title>
    <script>
        // ÌôòÍ≤Ω Î≥ÄÏàò ÏÑ§Ï†ï Í∞úÏÑ†
        window.ENV = {
            NODE_ENV: 'development', // Ïã§Ï†ú ÌôòÍ≤ΩÏóê ÎßûÍ≤å ÏÑ§Ï†ï
            API_BASE_URL: 'http://localhost:3000' // Ïã§Ï†ú API URLÎ°ú Î≥ÄÍ≤Ω
        };
    </script>
        <style>
    * {
        margin: 0;
        padding: 0;
        box-sizing: border-box;
    }

    body {
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        background: linear-gradient(135deg, #e0f7fa 0%, #b2ebf2 100%);
        min-height: 100vh;
        display: flex;
        flex-direction: column;
    }

    .header {
        background: rgba(255, 255, 255, 0.1);
        backdrop-filter: blur(10px);
        padding: 1rem 2rem;
        border-bottom: 1px solid rgba(255, 255, 255, 0.2);
    }

    .header h1 {
        color: black;
        font-size: 1.5rem;
        font-weight: 600;
    }

    .main-container {
        display: flex;
        flex: 1;
        gap: 1rem;
        padding: 1rem;
    }

    .sidebar {
        width: 300px;
        background: rgba(255, 255, 255, 0.95);
        border-radius: 15px;
        padding: 1.5rem;
        box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
        backdrop-filter: blur(10px);
    }

    .sidebar h2 {
        color: #333;
        margin-bottom: 1rem;
        font-size: 1.2rem;
    }

    .vm-list {
        display: flex;
        flex-direction: column;
        gap: 0.5rem;
        margin-bottom: 2rem;
    }

    .vm-item {
        padding: 0.8rem;
        background: linear-gradient(135deg, #667eea, #764ba2);
        color: white;
        border: none;
        border-radius: 10px;
        cursor: pointer;
        transition: all 0.3s ease;
        text-align: left;
        font-size: 0.9rem;
    }

    .vm-item:hover {
        transform: translateY(-2px);
        box-shadow: 0 5px 15px rgba(0, 0, 0, 0.2);
    }

    .vm-item.active {
        background: linear-gradient(135deg, #4CAF50, #45a049);
    }

    .controls {
        display: flex;
        flex-direction: column;
        gap: 0.5rem;
    }

    .control-btn {
        padding: 0.8rem;
        border: none;
        border-radius: 8px;
        cursor: pointer;
        font-weight: 500;
        transition: all 0.3s ease;
    }

    .start-btn {
        background: #4CAF50;
        color: white;
    }

    .stop-btn {
        background: #f44336;
        color: white;
    }

    .restart-btn {
        background: #ff9800;
        color: white;
    }

    .control-btn:hover {
        opacity: 0.8;
        transform: translateY(-1px);
    }

    .control-btn:disabled {
        opacity: 0.5;
        cursor: not-allowed;
        transform: none;
    }

    .vm-viewer {
        flex: 1;
        background: rgba(255, 255, 255, 0.95);
        border-radius: 15px;
        padding: 1.5rem;
        box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
        backdrop-filter: blur(10px);
        display: flex;
        flex-direction: column;
    }

    .viewer-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 1rem;
        padding-bottom: 1rem;
        border-bottom: 1px solid #eee;
    }

    .viewer-title {
        color: #333;
        font-size: 1.1rem;
        font-weight: 600;
    }

    .connection-status {
        display: flex;
        align-items: center;
        gap: 0.5rem;
        font-size: 0.9rem;
    }

    .status-indicator {
        width: 10px;
        height: 10px;
        border-radius: 50%;
        background: #ccc;
        transition: all 0.3s ease;
    }

    .status-indicator.connected {
        background: #4CAF50;
        box-shadow: 0 0 10px rgba(76, 175, 80, 0.5);
    }

    .status-indicator.connecting {
        background: #ff9800;
        animation: pulse 1.5s infinite;
    }

    @keyframes pulse {
        0%, 100% { opacity: 1; }
        50% { opacity: 0.5; }
    }

    .toolbar {
        display: flex;
        gap: 0.5rem;
        margin-bottom: 1rem;
        flex-wrap: wrap;
    }

    .toolbar-btn {
        padding: 0.5rem 1rem;
        background: #667eea;
        color: white;
        border: none;
        border-radius: 6px;
        cursor: pointer;
        font-size: 0.8rem;
        transition: all 0.3s ease;
        display: inline-flex;
        align-items: center;
        gap: 0.3rem;
    }

    .toolbar-btn:hover {
        background: #5a6fd8;
        transform: translateY(-1px);
    }

    .toolbar-btn:active {
        transform: translateY(0);
    }

    .vnc-container {
        flex: 1;
        background: #000;
        border-radius: 10px;
        position: relative;
        min-height: 400px;
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .vnc-screen {
        width: 100%;
        height: 100%;
        border: none;
        border-radius: 10px;
    }

    .no-connection {
        color: #666;
        text-align: center;
        font-size: 1.1rem;
    }

    .loading {
        color: #667eea;
        font-size: 1.1rem;
        display: flex;
        align-items: center;
        gap: 0.5rem;
    }

    .spinner {
        width: 20px;
        height: 20px;
        border: 2px solid #667eea;
        border-top: 2px solid transparent;
        border-radius: 50%;
        animation: spin 1s linear infinite;
    }

    @keyframes spin {
        0% { transform: rotate(0deg); }
        100% { transform: rotate(360deg); }
    }

    .vm-info {
        background: #f8f9fa;
        padding: 1rem;
        border-radius: 8px;
        margin-bottom: 1rem;
        font-size: 0.9rem;
    }

    .vm-info-item {
        display: flex;
        justify-content: space-between;
        margin-bottom: 0.5rem;
    }

    .vm-info-item:last-child {
        margin-bottom: 0;
    }

    .performance-stats {
        display: grid;
        grid-template-columns: 1fr 1fr;
        gap: 1rem;
        margin-top: 1rem;
    }

    .stat-card {
        background: white;
        padding: 1rem;
        border-radius: 8px;
        text-align: center;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
    }

    .stat-value {
        font-size: 1.5rem;
        font-weight: bold;
        color: #667eea;
    }

    .stat-label {
        font-size: 0.8rem;
        color: #666;
        margin-top: 0.5rem;
    }

    /* Í∞ÄÏÉÅ ÌÇ§Î≥¥Îìú Î™®Îã¨ Ïä§ÌÉÄÏùº */
    .virtual-keyboard-modal {
        display: none;
        position: fixed;
        z-index: 1000;
        left: 0;
        top: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.5);
    }

    .virtual-keyboard-content {
        background-color: #fefefe;
        margin: 5% auto;
        padding: 20px;
        border: none;
        border-radius: 10px;
        width: 90%;
        max-width: 800px;
        max-height: 80vh;
        overflow-y: auto;
    }

    .keyboard-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(40px, 1fr));
        gap: 5px;
        margin: 10px 0;
    }

    .key-btn {
        padding: 10px;
        background: #f0f0f0;
        border: 1px solid #ccc;
        border-radius: 5px;
        cursor: pointer;
        font-size: 14px;
        transition: all 0.2s;
    }

    .key-btn:hover {
        background: #e0e0e0;
    }

    .key-btn:active {
        background: #d0d0d0;
        transform: scale(0.95);
    }

    .space-key {
        grid-column: span 6;
    }

    .close-btn {
        color: #aaa;
        float: right;
        font-size: 28px;
        font-weight: bold;
        cursor: pointer;
    }

    .close-btn:hover {
        color: black;
    }

    @media (max-width: 768px) {
        .main-container {
            flex-direction: column;
        }

        .sidebar {
            width: 100%;
        }

        .toolbar {
            flex-wrap: wrap;
        }

        .toolbar-btn {
            font-size: 0.7rem;
            padding: 0.4rem 0.8rem;
        }
    }
</style>
</head>
<body>
    <div class="header">
        <h1>üñ•Ô∏è Ïõπ Í∏∞Î∞ò ÏÉåÎìúÎ∞ïÏä§ ÌîåÎû´Ìèº</h1>
    </div>
    <!-- vnc-container ÎÇ¥Î∂ÄÏóê Ï∫îÎ≤ÑÏä§ ÏöîÏÜå Ï∂îÍ∞Ä ÌïÑÏöî -->
    
    <div class="main-container">
        <div class="sidebar">
            <h2>Í∞ÄÏÉÅÌôòÍ≤Ω Î™©Î°ù</h2>
            <div class="vm-list">
                <button class="vm-item" data-vm="ubuntu-desktop">
                    üêß Ubuntu Desktop 20.04
                </button>
            </div>

            <div class="vm-info" id="vm-info" style="display: none;">
                <div class="vm-info-item">
                    <span>ÏÉÅÌÉú:</span>
                    <span id="vm-status">Ï§ëÏßÄÎê®</span>
                </div>
                <div class="vm-info-item">
                    <span>Î©îÎ™®Î¶¨:</span>
                    <span id="vm-memory">2GB</span>
                </div>
                <div class="vm-info-item">
                    <span>CPU:</span>
                    <span id="vm-cpu">2 cores</span>
                </div>
                <div class="vm-info-item">
                    <span>ÎîîÏä§ÌÅ¨:</span>
                    <span id="vm-disk">20GB</span>
                </div>
            </div>

            <div class="controls">
                <button class="control-btn start-btn" id="start-btn">üöÄ ÏãúÏûë</button>
                <button class="control-btn stop-btn" id="stop-btn">‚èπÔ∏è Ï§ëÏßÄ</button>
                <button class="control-btn restart-btn" id="restart-btn">üîÑ Ïû¨ÏãúÏûë</button>
            </div>

            <div class="performance-stats">
                <div class="stat-card">
                    <div class="stat-value" id="cpu-usage">0%</div>
                    <div class="stat-label">CPU ÏÇ¨Ïö©Î•†</div>
                </div>
                <div class="stat-card">
                    <div class="stat-value" id="memory-usage">0%</div>
                    <div class="stat-label">Î©îÎ™®Î¶¨ ÏÇ¨Ïö©Î•†</div>
                </div>
            </div>
        </div>

        <div class="vm-viewer">
            <div class="vnc-container" id="vnc-container">
                <canvas id="vnc-canvas" style="display: none;"></canvas>
                <div class="no-connection" id="no-connection">
                    Í∞ÄÏÉÅÌôòÍ≤ΩÏùÑ ÏÑ†ÌÉùÌïòÍ≥† ÏãúÏûë Î≤ÑÌäºÏùÑ ÎàåÎü¨Ï£ºÏÑ∏Ïöî
                </div>
            </div>
            <div class="viewer-header">
                <div class="viewer-title" id="viewer-title">Í∞ÄÏÉÅÌôòÍ≤ΩÏùÑ ÏÑ†ÌÉùÌï¥Ï£ºÏÑ∏Ïöî</div>
                <div class="connection-status">
                    <div class="status-indicator" id="status-indicator"></div>
                    <span id="connection-text">Ïó∞Í≤∞ ÏïàÎê®</span>
                </div>
            </div>

            <div class="toolbar" id="toolbar" style="display: none;">
                <button class="toolbar-btn" onclick="sendCtrlAltDel()">Ctrl+Alt+Del</button>
                <button class="toolbar-btn" onclick="toggleFullscreen()">Ï†ÑÏ≤¥ÌôîÎ©¥</button>
                <button class="toolbar-btn" onclick="takeScreenshot()">Ïä§ÌÅ¨Î¶∞ÏÉ∑</button>
                <button class="toolbar-btn" onclick="showKeyboard()">Í∞ÄÏÉÅÌÇ§Î≥¥Îìú</button>
            </div>
            // simple-keyboard Ï¥àÍ∏∞Ìôî ÏΩîÎìú
            const Keyboard = window.SimpleKeyboard.default;
            
            const keyboard = new Keyboard({
              onChange: input => onChange(input),
              onKeyPress: button => onKeyPress(button),
              layout: {
                default: [
                  "1 2 3 4 5 6 7 8 9 0 {bksp}",
                  "„ÖÇ „Öà „Ñ∑ „Ñ± „ÖÖ „Öõ „Öï „Öë „Öê „Öî",
                  "„ÖÅ „Ñ¥ „Öá „Ñπ „Öé „Öó „Öì „Öè „Ö£",
                  "„Öã „Öå „Öä „Öç „Ö† „Öú „Ö° {shift}",
                  "{lang} {space} {enter}"
                ],
                shift: [
                  "! @ # $ % ^ & * ( ) {bksp}",
                  "„ÖÉ „Öâ „Ñ∏ „Ñ≤ „ÖÜ „Öõ „Öï „Öë „Öí „Öñ",
                  "„ÖÅ „Ñ¥ „Öá „Ñπ „Öé „Öó „Öì „Öè „Ö£",
                  "„Öã „Öå „Öä „Öç „Ö† „Öú „Ö° {shift}",
                  "{lang} {space} {enter}"
                ],
                en: [
                  "1 2 3 4 5 6 7 8 9 0 {bksp}",
                  "q w e r t y u i o p",
                  "a s d f g h j k l",
                  "z x c v b n m {shift}",
                  "{lang} {space} {enter}"
                ],
                enShift: [
                  "! @ # $ % ^ & * ( ) {bksp}",
                  "Q W E R T Y U I O P",
                  "A S D F G H J K L",
                  "Z X C V B N M {shift}",
                  "{lang} {space} {enter}"
                ]
              },
              display: {
                "{bksp}": "‚å´",
                "{enter}": "‚èé",
                "{shift}": "‚áß",
                "{space}": "‚éµ",
                "{lang}": "Ìïú/ÏòÅ"
              }
            });
            
            let isKorean = true;
            let isShift = false;
            
            function onChange(input) {
              document.getElementById("virtual-input").value = input;
            }
            
            function onKeyPress(button) {
              if (button === "{shift}") {
                isShift = !isShift;
                if (isKorean) {
                  keyboard.setOptions({ layoutName: isShift ? "shift" : "default" });
                } else {
                  keyboard.setOptions({ layoutName: isShift ? "enShift" : "en" });
                }
              }
              if (button === "{lang}") {
                isKorean = !isKorean;
                keyboard.setOptions({ layoutName: isKorean ? (isShift ? "shift" : "default") : (isShift ? "enShift" : "en") });
              }
            }

            <!-- Ìà¥Î∞î ÏïÑÎûòÏóê ÏûÖÎ†•Ï∞ΩÍ≥º ÌÇ§Î≥¥Îìú Ïª®ÌÖåÏù¥ÎÑà Ï∂îÍ∞Ä -->
            <input id="virtual-input" class="input" readonly style="width:300px;font-size:1.2rem; margin-top:10px; display:none;" />
            <div id="keyboard" style="display:none;"></div>
                    </div>
    </div>

    <script>
                // ÌôòÍ≤ΩÎ≥Ñ ÏÑ§Ï†ï Î∂ÑÎ¶¨ - Ïù¥ ÏúÑÏπòÍ∞Ä ÏµúÏ†Å!
        const CONFIG = {
            development: {
                wsProtocol: 'ws:',
                apiBaseUrl: 'http://localhost:3000',
                vncHost: 'localhost'
            },
            production: {
                wsProtocol: 'wss:',
                apiBaseUrl: 'https://your-domain.com',
                vncHost: 'your-vnc-server.com'
            }
        };

        const currentConfig = CONFIG[window.ENV?.NODE_ENV || 'development'];

        function showKeyboard() {
            alert('Í∞ÄÏÉÅÌÇ§Î≥¥Îìú Í∏∞Îä•ÏùÄ Íµ¨ÌòÑ ÏòàÏ†ïÏûÖÎãàÎã§.');
        }
        function addChar(c) {
          const input = document.getElementById('virtual-input');
          input.value += c;
        }
        function removeChar() {
          const input = document.getElementById('virtual-input');
          input.value = input.value.slice(0, -1);
        }
        function showKeyboard() {
          document.getElementById('virtual-keyboard').style.display = 'block';
        }
        class SandboxPlatform {
            constructor() {
                this.currentVM = null;
                this.vncWebSocket = null;
                this.isConnected = false;
                this.isConnecting = false;
                this.performanceInterval = null;
                this.config = currentConfig; // Ï∂îÍ∞Ä ÌïÑÏöî
                this.authToken = localStorage.getItem('authToken'); // Ï∂îÍ∞Ä ÌïÑÏöî
                
                this.vmConfigs = {
                    'ubuntu-desktop': {
                        name: 'Ubuntu Desktop 20.04',
                        memory: '4GB',
                        cpu: '2 cores',
                        disk: '25GB',
                        host: 'localhost', // VNC ÏÑúÎ≤Ñ Ìò∏Ïä§Ìä∏
                        port: 6080,       // Websockify Ìè¨Ìä∏
                        vncPort: 5901,    // Ïã§Ï†ú VNC Ìè¨Ìä∏
                        password: '',      // VNC Ìå®Ïä§ÏõåÎìú
                        path: '/websockify' // WebSocket Í≤ΩÎ°ú
                    },
                };

                this.initEventListeners();
                this.updatePerformanceStats();
            }

            initEventListeners() {
                // VM ÏÑ†ÌÉù Ïù¥Î≤§Ìä∏
                document.querySelectorAll('.vm-item').forEach(item => {
                    item.addEventListener('click', (e) => {
                        this.selectVM(e.target.dataset.vm);
                    });
                });

                // Ïª®Ìä∏Î°§ Î≤ÑÌäº Ïù¥Î≤§Ìä∏
                document.getElementById('start-btn').addEventListener('click', () => {
                    this.startVM();
                });

                document.getElementById('stop-btn').addEventListener('click', () => {
                    this.stopVM();
                });

                document.getElementById('restart-btn').addEventListener('click', () => {
                    this.restartVM();
                });

                // Ï∞Ω ÌÅ¨Í∏∞ Î≥ÄÍ≤Ω Ïù¥Î≤§Ìä∏
                window.addEventListener('resize', () => {
                    this.resizeVNCViewer();
                });
            }

            selectVM(vmId) {
                // Ïù¥Ï†Ñ ÏÑ†ÌÉù Ìï¥Ï†ú
                document.querySelectorAll('.vm-item').forEach(item => {
                    item.classList.remove('active');
                });

                // ÏÉàÎ°úÏö¥ VM ÏÑ†ÌÉù
                document.querySelector(`[data-vm="${vmId}"]`).classList.add('active');
                this.currentVM = vmId;

                // VM Ï†ïÎ≥¥ ÏóÖÎç∞Ïù¥Ìä∏
                this.updateVMInfo(vmId);
                
                // Î∑∞Ïñ¥ Ï†úÎ™© ÏóÖÎç∞Ïù¥Ìä∏
                document.getElementById('viewer-title').textContent = this.vmConfigs[vmId].name;

                // Ïó∞Í≤∞Ïù¥ ÏûàÎã§Î©¥ ÎÅäÍ∏∞
                if (this.isConnected) {
                    this.disconnect();
                }
            }

            updateVMInfo(vmId) {
                const config = this.vmConfigs[vmId];
                const vmInfo = document.getElementById('vm-info');
                
                document.getElementById('vm-memory').textContent = config.memory;
                document.getElementById('vm-cpu').textContent = config.cpu;
                document.getElementById('vm-disk').textContent = config.disk;
                
                vmInfo.style.display = 'block';
            }

            async startVMBackend(vmId) {
                try {
                    const response = await fetch(`/api/vm/${vmId}/start`, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'Authorization': `Bearer ${this.getAuthToken()}`
                        }
                    });

                    if (!response.ok) {
                        throw new Error(`VM ÏãúÏûë Ïã§Ìå®: ${response.statusText}`);
                    }

                    const result = await response.json();
                    return result;
                } catch (error) {
                    console.error('Backend VM ÏãúÏûë Ïã§Ìå®:', error);
                    throw error;
                }
            }

            async startVM() {
                if (!this.currentVM) {
                    alert('Î®ºÏ†Ä Í∞ÄÏÉÅÌôòÍ≤ΩÏùÑ ÏÑ†ÌÉùÌï¥Ï£ºÏÑ∏Ïöî.');
                    return;
                }

                try {
                    this.setConnectionStatus('connecting', 'Ïó∞Í≤∞ Ï§ë...');
                    
                    // Ïã§Ï†ú VM ÏãúÏûë API Ìò∏Ï∂ú
                    await this.startVMBackend(this.currentVM);
                    
                    // VNC Ïó∞Í≤∞ ÎåÄÍ∏∞ ÏãúÍ∞Ñ
                    await new Promise(resolve => setTimeout(resolve, 5000));
                    
                    // VNC Ïó∞Í≤∞ ÏãúÎèÑ
                    await this.connectVNC();
                    
                } catch (error) {
                    console.error('VM ÏãúÏûë Ïã§Ìå®:', error);
                    this.setConnectionStatus('disconnected', 'Ïó∞Í≤∞ Ïã§Ìå®');
                    alert('Í∞ÄÏÉÅÌôòÍ≤Ω ÏãúÏûëÏóê Ïã§Ìå®ÌñàÏäµÎãàÎã§: ' + error.message);
                }
            }

            async simulateVMStart() {
                // VM ÏãúÏûë ÏãúÎÆ¨Î†àÏù¥ÏÖò (Ïã§Ï†úÎ°úÎäî Î∞±ÏóîÎìú API Ìò∏Ï∂ú)
                return new Promise((resolve) => {
                    setTimeout(() => {
                        resolve();
                    }, 3000);
                });
            }

            async connectVNC() {
                const config = this.vmConfigs[this.currentVM];
                const canvas = document.getElementById('vnc-canvas');
                
                try {
                    // WebSocket URL Íµ¨ÏÑ±
                    const wsProtocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';
                    const wsUrl = `${wsProtocol}//${config.host || 'localhost'}:${config.port}/websockify`;

                    // noVNC RFB Í∞ùÏ≤¥ ÏÉùÏÑ±
                    this.rfb = new RFB(canvas, wsUrl, {
                        credentials: {
                            password: config.password || ''
                        }
                    });
                    
                    // Ïù¥Î≤§Ìä∏ Î¶¨Ïä§ÎÑà Îì±Î°ù (Ï£ºÏÑù Ìï¥Ï†ú Î∞è ÏàòÏ†ï)
                    this.rfb.addEventListener('connect', this.onVNCConnect.bind(this));
                    this.rfb.addEventListener('disconnect', this.onVNCDisconnect.bind(this));
                    this.rfb.addEventListener('credentialsrequired', this.onVNCCredentials.bind(this));
                    this.rfb.addEventListener('securityfailure', this.onVNCSecurityFailure.bind(this));
                    
                    // Ïó∞Í≤∞ ÏÑ§Ï†ï
                    this.rfb.scaleViewport = true;
                    this.rfb.resizeSession = true;
                    
                } catch (error) {
                    console.error('VNC Ïó∞Í≤∞ Ïã§Ìå®:', error);
                    this.setConnectionStatus('disconnected', 'Ïó∞Í≤∞ Ïã§Ìå®');
                    throw error;
                }
            }

            async callAPI(endpoint, method = 'GET', data = null) {
                const url = `${this.config.apiBaseUrl}${endpoint}`;
                const options = {
                    method,
                    headers: {
                        'Content-Type': 'application/json',
                        'Authorization': this.authToken ? `Bearer ${this.authToken}` : ''
                    }
                };

                if (data) {
                    options.body = JSON.stringify(data);
                }

                try {
                    const response = await fetch(url, options);
                    if (!response.ok) {
                        throw new Error(`API Ìò∏Ï∂ú Ïã§Ìå®: ${response.statusText}`);
                    }
                    return response.json();
                } catch (error) {
                    console.error('API Ìò∏Ï∂ú Ïò§Î•ò:', error);
                    throw error;
                }
            }

            getAuthToken() {
                return this.authToken || localStorage.getItem('authToken');
            }

            // VNC Ïù¥Î≤§Ìä∏ Ìï∏Îì§Îü¨Îì§
            onVNCConnect() {
                console.log('VNC Ïó∞Í≤∞ ÏÑ±Í≥µ');
                this.isConnected = true;
                this.isConnecting = false;
                this.setConnectionStatus('connected', 'Ïó∞Í≤∞Îê®');
                this.updateVMStatus('Ïã§Ìñâ Ï§ë');
                this.showVNCViewer();
                this.startPerformanceMonitoring();
            }

            onVNCDisconnect(e) {
                console.log('VNC Ïó∞Í≤∞ Ìï¥Ï†ú:', e.detail);
                this.isConnected = false;
                this.isConnecting = false;
                this.setConnectionStatus('disconnected', 'Ïó∞Í≤∞ ÏïàÎê®');
                this.updateVMStatus('Ï§ëÏßÄÎê®');
                this.hideVNCViewer();
                this.stopPerformanceMonitoring();
            }

            onVNCCredentials() {
                const password = prompt('VNC Ìå®Ïä§ÏõåÎìúÎ•º ÏûÖÎ†•ÌïòÏÑ∏Ïöî:');
                if (password) {
                    this.rfb.sendCredentials({ password: password });
                }
            }

            onVNCSecurityFailure(e) {
                console.error('VNC Î≥¥Ïïà Ïã§Ìå®:', e.detail);
                alert('VNC Ïù∏Ï¶ùÏóê Ïã§Ìå®ÌñàÏäµÎãàÎã§.');
            }

            async simulateVNCConnection() {
                return new Promise((resolve) => {
                    setTimeout(() => {
                        this.isConnected = true;
                        this.isConnecting = false;
                        resolve();
                    }, 2000);
                });
            }

            showVNCViewer() {
                const noConnection = document.getElementById('no-connection');
                const toolbar = document.getElementById('toolbar');
                const canvas = document.getElementById('vnc-canvas');

                noConnection.style.display = 'none';
                toolbar.style.display = 'flex';
                canvas.style.display = 'block';
                
                // Ïã§Ï†ú VNC ÌôîÎ©¥ ÏãúÎÆ¨Î†àÏù¥ÏÖò
                container.innerHTML = `
                    <div style="width: 100%; height: 100%; background: linear-gradient(45deg, #1e3c72, #2a5298); 
                                display: flex; align-items: center; justify-content: center; 
                                border-radius: 10px; color: white; font-size: 1.2rem;">
                        <div style="text-align: center;">
                            <div style="font-size: 3rem; margin-bottom: 1rem;">üñ•Ô∏è</div>
                            <div>${this.vmConfigs[this.currentVM].name}</div>
                            <div style="font-size: 0.9rem; margin-top: 0.5rem; opacity: 0.8;">
                                VNC Ïó∞Í≤∞Îê® - Ïã§Ï†ú Íµ¨ÌòÑÏãú noVNC Ï∫îÎ≤ÑÏä§Í∞Ä Ïó¨Í∏∞Ïóê ÌëúÏãúÎê©ÎãàÎã§
                            </div>
                        </div>
                    </div>
                `;
            }

            stopVM() {
                if (!this.isConnected) {
                    return;
                }

                this.disconnect();
                this.setConnectionStatus('disconnected', 'Ïó∞Í≤∞ ÏïàÎê®');
                this.updateVMStatus('Ï§ëÏßÄÎê®');
                this.hideVNCViewer();
                this.stopPerformanceMonitoring();
            }

            restartVM() {
                if (this.isConnected) {
                    this.stopVM();
                    setTimeout(() => {
                        this.startVM();
                    }, 1000);
                }
            }

            disconnect() {
                if (this.rfb) {
                    this.rfb.disconnect();
                    this.rfb = null;
                }
                this.isConnected = false;
                this.isConnecting = false;
            }

            hideVNCViewer() {
                const container = document.getElementById('vnc-container');
                const toolbar = document.getElementById('toolbar');
                const canvas = document.getElementById('vnc-canvas');
                
                toolbar.style.display = 'none';
                canvas.style.display = 'none';
                
                // no-connection divÍ∞Ä ÏóÜÏúºÎ©¥ ÏÉùÏÑ±
                let noConnection = document.getElementById('no-connection');
                if (!noConnection) {
                    noConnection = document.createElement('div');
                    noConnection.id = 'no-connection';
                    noConnection.className = 'no-connection';
                    container.appendChild(noConnection);
                }
                
                noConnection.style.display = 'block';
                noConnection.textContent = 'Í∞ÄÏÉÅÌôòÍ≤ΩÏùÑ ÏÑ†ÌÉùÌïòÍ≥† ÏãúÏûë Î≤ÑÌäºÏùÑ ÎàåÎü¨Ï£ºÏÑ∏Ïöî';
            }

            setConnectionStatus(status, text) {
                const indicator = document.getElementById('status-indicator');
                const connectionText = document.getElementById('connection-text');
                
                indicator.className = `status-indicator ${status}`;
                connectionText.textContent = text;
            }

            updateVMStatus(status) {
                document.getElementById('vm-status').textContent = status;
            }

            startPerformanceMonitoring() {
                this.performanceInterval = setInterval(() => {
                    this.updatePerformanceStats();
                }, 2000);
            }

            stopPerformanceMonitoring() {
                if (this.performanceInterval) {
                    clearInterval(this.performanceInterval);
                    this.performanceInterval = null;
                }
                
                // ÏÑ±Îä• ÌÜµÍ≥Ñ Ï¥àÍ∏∞Ìôî
                document.getElementById('cpu-usage').textContent = '0%';
                document.getElementById('memory-usage').textContent = '0%';
            }

            updatePerformanceStats() {
                if (this.isConnected) {
                    // Ïã§Ï†úÎ°úÎäî Î∞±ÏóîÎìúÏóêÏÑú ÏÑ±Îä• Îç∞Ïù¥ÌÑ∞Î•º Í∞ÄÏ†∏Ïò¥
                    const cpuUsage = Math.floor(Math.random() * 60) + 20;
                    const memoryUsage = Math.floor(Math.random() * 40) + 30;
                    
                    document.getElementById('cpu-usage').textContent = `${cpuUsage}%`;
                    document.getElementById('memory-usage').textContent = `${memoryUsage}%`;
                }
            }

            resizeVNCViewer() {
                if (this.rfb) {
                    this.rfb.autoscale = true;
                }
            }
        }
        // ExtendedSandboxPlatform ÌÅ¥ÎûòÏä§ Ï†ïÏùò Ï∂îÍ∞Ä
        class ExtendedSandboxPlatform extends SandboxPlatform {
            constructor() {
                super();
                this.isRecording = false;
                this.clipboardModal = null;
                this.currentScale = 100;
            }
            
            // ÌôïÏû• Í∏∞Îä•Îì§ Íµ¨ÌòÑ
            showVNCViewer() {
                super.showVNCViewer();
                const noConnection = document.getElementById('no-connection');
                const toolbar = document.getElementById('toolbar');
                const canvas = document.getElementById('vnc-canvas');

                noConnection.style.display = 'none';
                toolbar.style.display = 'flex';
                canvas.style.display = 'block';
            }
        }

        class SecurityManager {
            constructor() {
                this.currentUser = null;
                this.sessionTimeout = 30 * 60 * 1000; // 30Î∂Ñ
                this.maxLoginAttempts = 3;
                this.loginAttempts = 0;
                this.allowedIPs = [];
                this.auditLogs = [];
            }

            async getClientIP() {
                try {
                    const response = await fetch('/api/client-ip');
                    const data = await response.json();
                    return data.ip;
                } catch (error) {
                    return 'unknown';
                }
            }

            handleLoginFailure() {
                this.loginAttempts++;
                if (this.loginAttempts >= this.maxLoginAttempts) {
                    alert('ÏµúÎåÄ Î°úÍ∑∏Ïù∏ ÏãúÎèÑ ÌöüÏàòÎ•º Ï¥àÍ≥ºÌñàÏäµÎãàÎã§.');
                    window.location.href = '/blocked';
                }
            }

            logout(reason) {
                console.log(`Î°úÍ∑∏ÏïÑÏõÉ: ${reason}`);
                this.currentUser = null;
                if (this.sessionTimer) {
                    clearTimeout(this.sessionTimer);
                }
                window.location.href = '/login';
            }

            // ÏÇ¨Ïö©Ïûê Ïù∏Ï¶ù
            async authenticate(username, password, mfaCode = null) {
                try {
                    // IP Ï£ºÏÜå ÌôïÏù∏
                    if (!this.checkIPWhitelist()) {
                        throw new Error('ÌóàÏö©ÎêòÏßÄ ÏïäÏùÄ IP Ï£ºÏÜåÏûÖÎãàÎã§');
                    }

                    const response = await fetch('/api/auth/login', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify({
                            username,
                            password,
                            mfaCode,
                            clientIP: await this.getClientIP()
                        })
                    });

                    if (response.ok) {
                        const userData = await response.json();
                        this.currentUser = userData;
                        this.startSessionTimeout();
                        this.logSecurityEvent('LOGIN_SUCCESS', { username });
                        return true;
                    } else {
                        this.handleLoginFailure();
                        return false;
                    }
                } catch (error) {
                    this.logSecurityEvent('LOGIN_ERROR', { error: error.message });
                    throw error;
                }
            }

            // ÏÑ∏ÏÖò ÌÉÄÏûÑÏïÑÏõÉ Í¥ÄÎ¶¨
            startSessionTimeout() {
                if (this.sessionTimer) {
                    clearTimeout(this.sessionTimer);
                }
                
                this.sessionTimer = setTimeout(() => {
                    this.logout('SESSION_TIMEOUT');
                }, this.sessionTimeout);
            }

            // Í∂åÌïú ÌôïÏù∏
            checkPermission(action, vmId) {
                if (!this.currentUser) {
                    return false;
                }

                const userPermissions = this.currentUser.permissions || [];
                const vmPermissions = this.currentUser.vmAccess || [];

                return userPermissions.includes(action) && 
                    (vmPermissions.includes('*') || vmPermissions.includes(vmId));
            }

            // IP ÌôîÏù¥Ìä∏Î¶¨Ïä§Ìä∏ ÌôïÏù∏
            checkIPWhitelist() {
                if (this.allowedIPs.length === 0) {
                    return true; // ÌôîÏù¥Ìä∏Î¶¨Ïä§Ìä∏Í∞Ä ÎπÑÏñ¥ÏûàÏúºÎ©¥ Î™®Îì† IP ÌóàÏö©
                }
                
                // Ïã§Ï†ú Íµ¨ÌòÑÏóêÏÑúÎäî ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏ IPÎ•º Ï†ïÌôïÌûà Í∞ÄÏ†∏ÏôÄÏïº Ìï®
                const clientIP = this.getClientIP();
                return this.allowedIPs.includes(clientIP);
            }

            // Î≥¥Ïïà Ïù¥Î≤§Ìä∏ Î°úÍπÖ
            logSecurityEvent(eventType, details) {
                const logEntry = {
                    timestamp: new Date().toISOString(),
                    eventType,
                    user: this.currentUser?.username || 'anonymous',
                    ip: this.getClientIP(),
                    details
                };
                
                this.auditLogs.push(logEntry);
                
                // Î∞±ÏóîÎìúÎ°ú Î°úÍ∑∏ Ï†ÑÏÜ°
                fetch('/api/security/log', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(logEntry)
                });
            }
        }

        // Web Crypto APIÎ•º ÏÇ¨Ïö©Ìïú ÏïîÌò∏Ìôî ÎùºÏù¥Î∏åÎü¨Î¶¨
        class SecureConnection {
            constructor() {
                this.sslEnabled = true;
                this.cryptoKey = null;
                this.algorithm = 'AES-GCM';
                this.keyLength = 256;
                this.ivLength = 12;
                this.tagLength = 128;
                this.isEncryptionReady = false;
                this.sessionKeys = new Map(); // ÏÑ∏ÏÖòÎ≥Ñ ÌÇ§ Ï†ÄÏû•
            }

            // ÏïîÌò∏Ìôî ÌÇ§ ÏÉùÏÑ± (Web Crypto API)
            async generateCryptoKey() {
                try {
                    this.cryptoKey = await window.crypto.subtle.generateKey(
                        {
                            name: this.algorithm,
                            length: this.keyLength
                        },
                        true, // extractable
                        ['encrypt', 'decrypt']
                    );
                    this.isEncryptionReady = true;
                    console.log('ÏïîÌò∏Ìôî ÌÇ§Í∞Ä ÏÑ±Í≥µÏ†ÅÏúºÎ°ú ÏÉùÏÑ±ÎêòÏóàÏäµÎãàÎã§.');
                    return this.cryptoKey;
                } catch (error) {
                    console.error('ÏïîÌò∏Ìôî ÌÇ§ ÏÉùÏÑ± Ïã§Ìå®:', error);
                    throw error;
                }
            }

            // ÌÇ§Î•º ArrayBufferÎ°ú ÎÇ¥Î≥¥ÎÇ¥Í∏∞
            async exportKey(key = this.cryptoKey) {
                try {
                    return await window.crypto.subtle.exportKey('raw', key);
                } catch (error) {
                    console.error('ÌÇ§ ÎÇ¥Î≥¥ÎÇ¥Í∏∞ Ïã§Ìå®:', error);
                    throw error;
                }
            }

            // ArrayBufferÏóêÏÑú ÌÇ§ Í∞ÄÏ†∏Ïò§Í∏∞
            async importKey(keyBuffer) {
                try {
                    const key = await window.crypto.subtle.importKey(
                        'raw',
                        keyBuffer,
                        { name: this.algorithm },
                        true,
                        ['encrypt', 'decrypt']
                    );
                    return key;
                } catch (error) {
                    console.error('ÌÇ§ Í∞ÄÏ†∏Ïò§Í∏∞ Ïã§Ìå®:', error);
                    throw error;
                }
            }

            // Îç∞Ïù¥ÌÑ∞ ÏïîÌò∏Ìôî
            async encryptData(data, key = this.cryptoKey) {
                if (!key) {
                    throw new Error('ÏïîÌò∏Ìôî ÌÇ§Í∞Ä ÏÑ§Ï†ïÎêòÏßÄ ÏïäÏïòÏäµÎãàÎã§.');
                }

                try {
                    // ÎûúÎç§ IV ÏÉùÏÑ±
                    const iv = window.crypto.getRandomValues(new Uint8Array(this.ivLength));
                    
                    // Î¨∏ÏûêÏó¥ÏùÑ ArrayBufferÎ°ú Î≥ÄÌôò
                    const encoder = new TextEncoder();
                    const dataBuffer = typeof data === 'string' ? encoder.encode(data) : data;

                    // Îç∞Ïù¥ÌÑ∞ ÏïîÌò∏Ìôî
                    const encryptedBuffer = await window.crypto.subtle.encrypt(
                        {
                            name: this.algorithm,
                            iv: iv,
                            tagLength: this.tagLength
                        },
                        key,
                        dataBuffer
                    );

                    // IVÏôÄ ÏïîÌò∏ÌôîÎêú Îç∞Ïù¥ÌÑ∞Î•º Í≤∞Ìï©
                    const result = new Uint8Array(iv.length + encryptedBuffer.byteLength);
                    result.set(iv, 0);
                    result.set(new Uint8Array(encryptedBuffer), iv.length);

                    return result.buffer;
                } catch (error) {
                    console.error('Îç∞Ïù¥ÌÑ∞ ÏïîÌò∏Ìôî Ïã§Ìå®:', error);
                    throw error;
                }
            }

            // Îç∞Ïù¥ÌÑ∞ Î≥µÌò∏Ìôî
            async decryptData(encryptedData, key = this.cryptoKey) {
                if (!key) {
                    throw new Error('Î≥µÌò∏Ìôî ÌÇ§Í∞Ä ÏÑ§Ï†ïÎêòÏßÄ ÏïäÏïòÏäµÎãàÎã§.');
                }

                try {
                    const dataArray = new Uint8Array(encryptedData);
                    
                    // IVÏôÄ ÏïîÌò∏ÌôîÎêú Îç∞Ïù¥ÌÑ∞ Î∂ÑÎ¶¨
                    const iv = dataArray.slice(0, this.ivLength);
                    const encrypted = dataArray.slice(this.ivLength);

                    // Îç∞Ïù¥ÌÑ∞ Î≥µÌò∏Ìôî
                    const decryptedBuffer = await window.crypto.subtle.decrypt(
                        {
                            name: this.algorithm,
                            iv: iv,
                            tagLength: this.tagLength
                        },
                        key,
                        encrypted
                    );

                    // ArrayBufferÎ•º Î¨∏ÏûêÏó¥Î°ú Î≥ÄÌôò
                    const decoder = new TextDecoder();
                    return decoder.decode(decryptedBuffer);
                } catch (error) {
                    console.error('Îç∞Ïù¥ÌÑ∞ Î≥µÌò∏Ìôî Ïã§Ìå®:', error);
                    throw error;
                }
            }

            // Ìï¥Ïãú ÏÉùÏÑ± (SHA-256)
            async generateHash(data) {
                try {
                    const encoder = new TextEncoder();
                    const dataBuffer = typeof data === 'string' ? encoder.encode(data) : data;
                    
                    const hashBuffer = await window.crypto.subtle.digest('SHA-256', dataBuffer);
                    
                    // ArrayBufferÎ•º hex Î¨∏ÏûêÏó¥Î°ú Î≥ÄÌôò
                    const hashArray = Array.from(new Uint8Array(hashBuffer));
                    return hashArray.map(b => b.toString(16).padStart(2, '0')).join('');
                } catch (error) {
                    console.error('Ìï¥Ïãú ÏÉùÏÑ± Ïã§Ìå®:', error);
                    throw error;
                }
            }

            // ÎîîÏßÄÌÑ∏ ÏÑúÎ™ÖÏùÑ ÏúÑÌïú ÌÇ§ Ïåç ÏÉùÏÑ±
            async generateSigningKeyPair() {
                try {
                    const keyPair = await window.crypto.subtle.generateKey(
                        {
                            name: 'ECDSA',
                            namedCurve: 'P-256'
                        },
                        true,
                        ['sign', 'verify']
                    );
                    
                    return keyPair;
                } catch (error) {
                    console.error('ÏÑúÎ™Ö ÌÇ§ Ïåç ÏÉùÏÑ± Ïã§Ìå®:', error);
                    throw error;
                }
            }

            // Îç∞Ïù¥ÌÑ∞ ÏÑúÎ™Ö
            async signData(data, privateKey) {
                try {
                    const encoder = new TextEncoder();
                    const dataBuffer = typeof data === 'string' ? encoder.encode(data) : data;
                    
                    const signature = await window.crypto.subtle.sign(
                        {
                            name: 'ECDSA',
                            hash: 'SHA-256'
                        },
                        privateKey,
                        dataBuffer
                    );
                    
                    return signature;
                } catch (error) {
                    console.error('Îç∞Ïù¥ÌÑ∞ ÏÑúÎ™Ö Ïã§Ìå®:', error);
                    throw error;
                }
            }

            // ÏÑúÎ™Ö Í≤ÄÏ¶ù
            async verifySignature(data, signature, publicKey) {
                try {
                    const encoder = new TextEncoder();
                    const dataBuffer = typeof data === 'string' ? encoder.encode(data) : data;
                    
                    const isValid = await window.crypto.subtle.verify(
                        {
                            name: 'ECDSA',
                            hash: 'SHA-256'
                        },
                        publicKey,
                        signature,
                        dataBuffer
                    );
                    
                    return isValid;
                } catch (error) {
                    console.error('ÏÑúÎ™Ö Í≤ÄÏ¶ù Ïã§Ìå®:', error);
                    throw error;
                }
            }

            // Î≥¥Ïïà ÎπÑÎ∞ÄÎ≤àÌò∏ ÏÉùÏÑ±
            generateSecurePassword(length = 16) {
                const charset = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*';
                const randomValues = new Uint8Array(length);
                window.crypto.getRandomValues(randomValues);
                
                return Array.from(randomValues, byte => charset[byte % charset.length]).join('');
            }

            // SSL/TLS Ïó∞Í≤∞ ÏÑ§Ï†ï
            async setupSecureConnection(vmConfig) {
                // ÏïîÌò∏Ìôî ÌÇ§Í∞Ä ÏóÜÏúºÎ©¥ ÏÉùÏÑ±
                if (!this.cryptoKey) {
                    await this.generateCryptoKey();
                }

                const protocol = this.sslEnabled ? 'wss:' : 'ws:';
                const wsUrl = `${protocol}//${vmConfig.host}:${vmConfig.securePort}/websockify`;
                
                // ÏÑ∏ÏÖò ÌÇ§ ÏÉùÏÑ± Î∞è Ï†ÄÏû•
                const sessionKey = await this.generateCryptoKey();
                const sessionId = await this.generateHash(Date.now().toString());
                this.sessionKeys.set(sessionId, sessionKey);
                
                return {
                    ...vmConfig,
                    wsUrl,
                    encrypt: true,
                    sessionId,
                    credentials: {
                        password: this.generateSecurePassword()
                    }
                };
            }

            // ÏÑ∏ÏÖòÎ≥Ñ Îç∞Ïù¥ÌÑ∞ ÏïîÌò∏Ìôî
            async encryptSessionData(data, sessionId) {
                const sessionKey = this.sessionKeys.get(sessionId);
                if (!sessionKey) {
                    throw new Error('ÏÑ∏ÏÖò ÌÇ§Î•º Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§.');
                }
                
                return await this.encryptData(data, sessionKey);
            }

            // ÏÑ∏ÏÖòÎ≥Ñ Îç∞Ïù¥ÌÑ∞ Î≥µÌò∏Ìôî
            async decryptSessionData(encryptedData, sessionId) {
                const sessionKey = this.sessionKeys.get(sessionId);
                if (!sessionKey) {
                    throw new Error('ÏÑ∏ÏÖò ÌÇ§Î•º Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§.');
                }
                
                return await this.decryptData(encryptedData, sessionKey);
            }

            // ÏÑ∏ÏÖò ÌÇ§ Ï†ïÎ¶¨
            clearSessionKey(sessionId) {
                this.sessionKeys.delete(sessionId);
            }

            // Î™®Îì† ÏÑ∏ÏÖò ÌÇ§ Ï†ïÎ¶¨
            clearAllSessionKeys() {
                this.sessionKeys.clear();
            }
        }

        class SecureSandboxPlatform extends ExtendedSandboxPlatform {
            constructor() {
                super();
                this.securityManager = new SecurityManager();
                this.secureConnection = new SecureConnection();
                this.currentSessionId = null;
                this.initSecurity();
            }

            async initSecurity() {
                // Web Crypto API ÏßÄÏõê ÌôïÏù∏
                if (!window.crypto || !window.crypto.subtle) {
                    console.error('Web Crypto APIÍ∞Ä ÏßÄÏõêÎêòÏßÄ ÏïäÏäµÎãàÎã§.');
                    alert('Ïù¥ Î∏åÎùºÏö∞Ï†ÄÎäî ÌïÑÏöîÌïú Î≥¥Ïïà Í∏∞Îä•ÏùÑ ÏßÄÏõêÌïòÏßÄ ÏïäÏäµÎãàÎã§.');
                    return;
                }

                // ÏïîÌò∏Ìôî ÌÇ§ Ï¥àÍ∏∞Ìôî
                try {
                    await this.secureConnection.generateCryptoKey();
                    console.log('Î≥¥Ïïà Î™®ÎìàÏù¥ ÏÑ±Í≥µÏ†ÅÏúºÎ°ú Ï¥àÍ∏∞ÌôîÎêòÏóàÏäµÎãàÎã§.');
                } catch (error) {
                    console.error('Î≥¥Ïïà Î™®Îìà Ï¥àÍ∏∞Ìôî Ïã§Ìå®:', error);
                }

                // ÌéòÏù¥ÏßÄ Î°úÎìú Ïãú Ïù∏Ï¶ù ÌôïÏù∏
                this.checkAuthentication();
                
                // ÌÇ§Î≥¥Îìú Ïù¥Î≤§Ìä∏ Î≥¥Ïïà ÌïÑÌÑ∞ÎßÅ
                this.setupSecurityFilters();
                
                // Ï†ïÍ∏∞Ï†ÅÏù∏ Î≥¥Ïïà Ï†êÍ≤Ä
                setInterval(() => {
                    this.performSecurityCheck();
                }, 60000); // 1Î∂ÑÎßàÎã§
            }

            async checkAuthentication() {
                const token = this.getAuthToken();
                if (!token) {
                    return false;
                }

                try {
                    // ÌÜ†ÌÅ∞ Ìï¥Ïãú ÏÉùÏÑ±ÏúºÎ°ú Î¨¥Í≤∞ÏÑ± ÌôïÏù∏
                    const tokenHash = await this.secureConnection.generateHash(token);
                    
                    const response = await fetch('/api/auth/verify', {
                        method: 'POST',
                        headers: {
                            'Authorization': `Bearer ${token}`,
                            'Content-Type': 'application/json',
                            'X-Token-Hash': tokenHash
                        }
                    });
                    
                    return response.ok;
                } catch (error) {
                    console.error('Ïù∏Ï¶ù ÌôïÏù∏ Ïã§Ìå®:', error);
                    return false;
                }
            }

            getAuthToken() {
                // ÌÜ†ÌÅ∞ÏùÑ ÏïàÏ†ÑÌïòÍ≤å Ï†ÄÏû•ÌïòÍ≥† Í∞ÄÏ†∏Ïò§Îäî Î°úÏßÅ
                // localStorage ÎåÄÏã† Î©îÎ™®Î¶¨ÎÇò secure httpOnly Ïø†ÌÇ§ ÏÇ¨Ïö© Í∂åÏû•
                return sessionStorage.getItem('authToken');
            }

            setupSecurityFilters() {
                // ÌÇ§Î≥¥Îìú Ïù¥Î≤§Ìä∏ ÌïÑÌÑ∞ÎßÅ Íµ¨ÌòÑ
                document.addEventListener('keydown', (event) => {
                    // ÏúÑÌóòÌïú ÌÇ§ Ï°∞Ìï© Ï∞®Îã® (Ïòà: F12, Ctrl+Shift+I Îì±)
                    if (event.key === 'F12' || 
                        (event.ctrlKey && event.shiftKey && event.key === 'I')) {
                        event.preventDefault();
                        console.log('Í∞úÎ∞úÏûê ÎèÑÍµ¨ Ï†ëÍ∑ºÏù¥ Ï∞®Îã®ÎêòÏóàÏäµÎãàÎã§.');
                        this.securityManager.logSecurityEvent('DEV_TOOLS_BLOCKED', {
                            key: event.key,
                            timestamp: Date.now()
                        });
                    }
                });

                // Ïö∞ÌÅ¥Î¶≠ Î∞©ÏßÄ
                document.addEventListener('contextmenu', (event) => {
                    event.preventDefault();
                });
            }

            performSecurityCheck() {
                // ÏÑ∏ÏÖò Ïú†Ìö®ÏÑ± Í≤ÄÏÇ¨
                if (!this.securityManager.currentUser) {
                    this.redirectToLogin();
                    return;
                }

                // ÎπÑÏ†ïÏÉÅÏ†ÅÏù∏ ÌôúÎèô Í∞êÏßÄ
                this.detectSuspiciousActivity();
            }

            redirectToLogin() {
                // ÏÑ∏ÏÖò ÌÇ§ Ï†ïÎ¶¨
                if (this.currentSessionId) {
                    this.secureConnection.clearSessionKey(this.currentSessionId);
                }
                window.location.href = '/login';
            }

            detectSuspiciousActivity() {
                // ÏùòÏã¨Ïä§Îü¨Ïö¥ ÌôúÎèô Í∞êÏßÄ Î°úÏßÅ
                // Ïòà: ÎπÑÏ†ïÏÉÅÏ†ÅÏù∏ API Ìò∏Ï∂ú Ìå®ÌÑ¥, Í≥ºÎèÑÌïú ÏöîÏ≤≠ Îì±
                const suspiciousPatterns = [
                    // ÏßßÏùÄ ÏãúÍ∞Ñ ÎÇ¥ Í≥ºÎèÑÌïú ÏöîÏ≤≠
                    { type: 'EXCESSIVE_REQUESTS', threshold: 100, timeWindow: 60000 },
                    // ÎπÑÏ†ïÏÉÅÏ†ÅÏù∏ ÌÇ§ ÏûÖÎ†• Ìå®ÌÑ¥
                    { type: 'ABNORMAL_KEYSTROKES', threshold: 1000, timeWindow: 10000 }
                ];

                // Ìå®ÌÑ¥ Í∞êÏßÄ Î°úÏßÅ Íµ¨ÌòÑ
                // Ïã§Ï†ú Íµ¨ÌòÑÏóêÏÑúÎäî Îçî Ï†ïÍµêÌïú ÏïåÍ≥†Î¶¨Ï¶ò ÌïÑÏöî
            }

            async startVM() {
                // Í∂åÌïú ÌôïÏù∏
                if (!this.securityManager.checkPermission('START_VM', this.currentVM)) {
                    alert('Í∞ÄÏÉÅÎ®∏Ïã† ÏãúÏûë Í∂åÌïúÏù¥ ÏóÜÏäµÎãàÎã§.');
                    return;
                }

                try {
                    // Î≥¥Ïïà Ïó∞Í≤∞ ÏÑ§Ï†ï
                    const secureConfig = await this.secureConnection.setupSecureConnection(this.vmConfig);
                    this.currentSessionId = secureConfig.sessionId;

                    // Î≥¥Ïïà Ïù¥Î≤§Ìä∏ Î°úÍπÖ
                    this.securityManager.logSecurityEvent('VM_START_ATTEMPT', {
                        vmId: this.currentVM,
                        sessionId: this.currentSessionId,
                        timestamp: Date.now()
                    });

                    // VM ÏãúÏûë Ïãú Îç∞Ïù¥ÌÑ∞ ÏïîÌò∏Ìôî
                    const startupData = JSON.stringify({
                        vmId: this.currentVM,
                        config: secureConfig,
                        timestamp: Date.now()
                    });

                    const encryptedStartupData = await this.secureConnection.encryptSessionData(
                        startupData, 
                        this.currentSessionId
                    );

                    console.log('VM ÏãúÏûë Îç∞Ïù¥ÌÑ∞Í∞Ä ÏïîÌò∏ÌôîÎêòÏóàÏäµÎãàÎã§.');

                    await super.startVM();
                } catch (error) {
                    console.error('Î≥¥Ïïà VM ÏãúÏûë Ïã§Ìå®:', error);
                    this.securityManager.logSecurityEvent('VM_START_ERROR', {
                        error: error.message,
                        vmId: this.currentVM
                    });
                }
            }

            // ÏïàÏ†ÑÌïú Îç∞Ïù¥ÌÑ∞ Ï†ÑÏÜ°
            async sendSecureData(data) {
                if (!this.currentSessionId) {
                    throw new Error('Î≥¥Ïïà ÏÑ∏ÏÖòÏù¥ ÏÑ§Ï†ïÎêòÏßÄ ÏïäÏïòÏäµÎãàÎã§.');
                }

                try {
                    const encryptedData = await this.secureConnection.encryptSessionData(
                        JSON.stringify(data), 
                        this.currentSessionId
                    );
                    
                    // Base64Î°ú Ïù∏ÏΩîÎî©ÌïòÏó¨ Ï†ÑÏÜ°
                    const base64Data = btoa(String.fromCharCode(...new Uint8Array(encryptedData)));
                    
                    return base64Data;
                } catch (error) {
                    console.error('Îç∞Ïù¥ÌÑ∞ ÏïîÌò∏Ìôî Ïã§Ìå®:', error);
                    throw error;
                }
            }

            // ÏïîÌò∏ÌôîÎêú Îç∞Ïù¥ÌÑ∞ ÏàòÏã†
            async receiveSecureData(base64Data) {
                if (!this.currentSessionId) {
                    throw new Error('Î≥¥Ïïà ÏÑ∏ÏÖòÏù¥ ÏÑ§Ï†ïÎêòÏßÄ ÏïäÏïòÏäµÎãàÎã§.');
                }

                try {
                    // Base64 ÎîîÏΩîÎî©
                    const binaryString = atob(base64Data);
                    const encryptedData = new Uint8Array(binaryString.length);
                    for (let i = 0; i < binaryString.length; i++) {
                        encryptedData[i] = binaryString.charCodeAt(i);
                    }

                    const decryptedData = await this.secureConnection.decryptSessionData(
                        encryptedData.buffer, 
                        this.currentSessionId
                    );
                    
                    return JSON.parse(decryptedData);
                } catch (error) {
                    console.error('Îç∞Ïù¥ÌÑ∞ Î≥µÌò∏Ìôî Ïã§Ìå®:', error);
                    throw error;
                }
            }
        }



        // Ìà¥Î∞î Í∏∞Îä•Îì§
        function sendCtrlAltDel() {
            if (platform.rfb && platform.isConnected) {
                platform.rfb.sendCtrlAltDel();
            }
        }

        function toggleFullscreen() {
            const container = document.getElementById('vnc-container');
            if (document.fullscreenElement) {
                document.exitFullscreen();
            } else {
                container.requestFullscreen();
            }
        }

        async function takeScreenshot() {
            if (platform.rfb && platform.isConnected) {
                try {
                    const canvas = document.getElementById('vnc-canvas');
                    const dataUrl = canvas.toDataURL();
                    
                    // Ïä§ÌÅ¨Î¶∞ÏÉ∑ Îç∞Ïù¥ÌÑ∞Î•º ÏïîÌò∏Ìôî
                    const encryptedScreenshot = await platform.sendSecureData({
                        type: 'screenshot',
                        data: dataUrl,
                        timestamp: Date.now()
                    });
                    
                    // Î≥¥Ïïà Î°úÍ∑∏ Í∏∞Î°ù
                    platform.securityManager.logSecurityEvent('SCREENSHOT_TAKEN', {
                        vmId: platform.currentVM,
                        encrypted: true
                    });
                    
                    const link = document.createElement('a');
                    link.download = `screenshot-${new Date().getTime()}.png`;
                    link.href = dataUrl;
                    link.click();
                } catch (error) {
                    console.error('Î≥¥Ïïà Ïä§ÌÅ¨Î¶∞ÏÉ∑ Ïã§Ìå®:', error);
                }
            }
        }

        // ÌîåÎû´Ìèº Ï¥àÍ∏∞Ìôî
        // Î≥¥Ïïà Í∏∞Îä•Ïù¥ Ìè¨Ìï®Îêú ÌîåÎû´ÌèºÏúºÎ°ú Î≥ÄÍ≤Ω
        const platform = new SecureSandboxPlatform();

        // Ï¥àÍ∏∞Ìôî Ïãú Ïù∏Ï¶ù ÌôïÏù∏
        document.addEventListener('DOMContentLoaded', async () => {
            console.log('Ïõπ Í∏∞Î∞ò Î≥¥Ïïà ÏÉåÎìúÎ∞ïÏä§ ÌîåÎû´ÌèºÏù¥ Ï¥àÍ∏∞ÌôîÎêòÏóàÏäµÎãàÎã§.');
            
            // Web Crypto API ÏßÄÏõê ÌôïÏù∏
            if (!window.crypto || !window.crypto.subtle) {
                alert('Ïù¥ Î∏åÎùºÏö∞Ï†ÄÎäî ÌïÑÏöîÌïú Î≥¥Ïïà Í∏∞Îä•ÏùÑ ÏßÄÏõêÌïòÏßÄ ÏïäÏäµÎãàÎã§. ÏµúÏã† Î∏åÎùºÏö∞Ï†ÄÎ•º ÏÇ¨Ïö©Ìï¥Ï£ºÏÑ∏Ïöî.');
                return;
            }
            
            // Ïù∏Ï¶ù ÏÉÅÌÉú ÌôïÏù∏
            if (currentConfig.apiBaseUrl !== 'http://localhost:3000') {
                if (!await platform.checkAuthentication()) {
                    window.location.href = '/login';
                    return;
                }
            }

            console.log('Î≥¥Ïïà Ï¥àÍ∏∞ÌôîÍ∞Ä ÏôÑÎ£åÎêòÏóàÏäµÎãàÎã§.');
        });
    </script>
</body>
</html>
