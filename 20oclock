<!DOCTYPE html>
<html lang="ko">
<head>
    <!-- simple-keyboard CSS -->
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/simple-keyboard@latest/build/css/index.css">
    <!-- simple-keyboard JS -->
    <script src="https://cdn.jsdelivr.net/npm/simple-keyboard@latest/build/index.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/novnc/1.3.0/core/util.js"></script>
    <script src="https://unpkg.com/@novnc/novnc/lib/rfb.js"></script>
    
    <!-- 또는 로컬 noVNC 파일 사용 -->
    <!-- <script src="/novnc/core/rfb.js"></script> -->
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>웹 기반 샌드박스 플랫폼</title>
    <script>
        // 환경 변수 설정 개선
        window.ENV = {
            NODE_ENV: 'development', // 실제 환경에 맞게 설정
            API_BASE_URL: 'http://localhost:3000' // 실제 API URL로 변경
        };
    </script>
    <script src="https://unpkg.com/@novnc/novnc/lib/rfb.js"></script>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            display: flex;
            flex-direction: column;
        }

        .header {
            background: rgba(255, 255, 255, 0.1);
            backdrop-filter: blur(10px);
            padding: 1rem 2rem;
            border-bottom: 1px solid rgba(255, 255, 255, 0.2);
        }

        .header h1 {
            color: white;
            font-size: 1.5rem;
            font-weight: 600;
        }

        .main-container {
            display: flex;
            flex: 1;
            gap: 1rem;
            padding: 1rem;
        }

        .sidebar {
            width: 300px;
            background: rgba(255, 255, 255, 0.95);
            border-radius: 15px;
            padding: 1.5rem;
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
            backdrop-filter: blur(10px);
        }

        .sidebar h2 {
            color: #333;
            margin-bottom: 1rem;
            font-size: 1.2rem;
        }

        .vm-list {
            display: flex;
            flex-direction: column;
            gap: 0.5rem;
            margin-bottom: 2rem;
        }

        .vm-item {
            padding: 0.8rem;
            background: linear-gradient(135deg, #667eea, #764ba2);
            color: white;
            border: none;
            border-radius: 10px;
            cursor: pointer;
            transition: all 0.3s ease;
            text-align: left;
            font-size: 0.9rem;
        }

        .vm-item:hover {
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.2);
        }

        .vm-item.active {
            background: linear-gradient(135deg, #4CAF50, #45a049);
        }

        .controls {
            display: flex;
            flex-direction: column;
            gap: 0.5rem;
        }

        .control-btn {
            padding: 0.8rem;
            border: none;
            border-radius: 8px;
            cursor: pointer;
            font-weight: 500;
            transition: all 0.3s ease;
        }

        .start-btn {
            background: #4CAF50;
            color: white;
        }

        .stop-btn {
            background: #f44336;
            color: white;
        }

        .restart-btn {
            background: #ff9800;
            color: white;
        }

        .control-btn:hover {
            opacity: 0.8;
            transform: translateY(-1px);
        }

        .control-btn:disabled {
            opacity: 0.5;
            cursor: not-allowed;
            transform: none;
        }

        .vm-viewer {
            flex: 1;
            background: rgba(255, 255, 255, 0.95);
            border-radius: 15px;
            padding: 1.5rem;
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
            backdrop-filter: blur(10px);
            display: flex;
            flex-direction: column;
        }

        .viewer-header {
            display: flex;
            justify-content: between;
            align-items: center;
            margin-bottom: 1rem;
            padding-bottom: 1rem;
            border-bottom: 1px solid #eee;
        }

        .viewer-title {
            color: #333;
            font-size: 1.1rem;
            font-weight: 600;
        }

        .connection-status {
            display: flex;
            align-items: center;
            gap: 0.5rem;
            font-size: 0.9rem;
        }

        .status-indicator {
            width: 10px;
            height: 10px;
            border-radius: 50%;
            background: #ccc;
            transition: all 0.3s ease;
        }

        .status-indicator.connected {
            background: #4CAF50;
            box-shadow: 0 0 10px rgba(76, 175, 80, 0.5);
        }

        .status-indicator.connecting {
            background: #ff9800;
            animation: pulse 1.5s infinite;
        }

        @keyframes pulse {
            0%, 100% { opacity: 1; }
            50% { opacity: 0.5; }
        }

        .vnc-container {
            flex: 1;
            background: #000;
            border-radius: 10px;
            position: relative;
            min-height: 400px;
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .vnc-screen {
            width: 100%;
            height: 100%;
            border: none;
            border-radius: 10px;
        }

        .no-connection {
            color: #666;
            text-align: center;
            font-size: 1.1rem;
        }

        .loading {
            color: #667eea;
            font-size: 1.1rem;
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }

        .spinner {
            width: 20px;
            height: 20px;
            border: 2px solid #667eea;
            border-top: 2px solid transparent;
            border-radius: 50%;
            animation: spin 1s linear infinite;
        }

        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }

        .vm-info {
            background: #f8f9fa;
            padding: 1rem;
            border-radius: 8px;
            margin-bottom: 1rem;
            font-size: 0.9rem;
        }

        .vm-info-item {
            display: flex;
            justify-content: space-between;
            margin-bottom: 0.5rem;
        }

        .vm-info-item:last-child {
            margin-bottom: 0;
        }

        .performance-stats {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 1rem;
            margin-top: 1rem;
        }

        .stat-card {
            background: white;
            padding: 1rem;
            border-radius: 8px;
            text-align: center;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
        }

        .stat-value {
            font-size: 1.5rem;
            font-weight: bold;
            color: #667eea;
        }

        .stat-label {
            font-size: 0.8rem;
            color: #666;
            margin-top: 0.5rem;
        }

        .toolbar {
            display: flex;
            gap: 0.5rem;
            margin-bottom: 1rem;
            flex-wrap: wrap;
        }

        .toolbar-btn {
            padding: 0.5rem 1rem;
            background: #667eea;
            color: white;
            border: none;
            border-radius: 6px;
            cursor: pointer;
            font-size: 0.8rem;
            transition: all 0.3s ease;
        }

        .toolbar-btn:hover {
            background: #5a6fd8;
        }

        @media (max-width: 768px) {
            .main-container {
                flex-direction: column;
            }
            
            .sidebar {
                width: 100%;
            }
            
            .toolbar {
                flex-wrap: wrap;
            }
            
            .toolbar-btn {
                font-size: 0.7rem;
                padding: 0.4rem 0.8rem;
            }
        }
    </style>
</head>
<body>
    <div class="header">
        <h1>🖥️ 웹 기반 샌드박스 플랫폼</h1>
    </div>
    <!-- vnc-container 내부에 캔버스 요소 추가 필요 -->
    
    <div class="main-container">
        <div class="sidebar">
            <h2>가상환경 목록</h2>
            <div class="vm-list">
                <button class="vm-item" data-vm="ubuntu-desktop">
                    🐧 Ubuntu Desktop 20.04
                </button>
            </div>

            <div class="vm-info" id="vm-info" style="display: none;">
                <div class="vm-info-item">
                    <span>상태:</span>
                    <span id="vm-status">중지됨</span>
                </div>
                <div class="vm-info-item">
                    <span>메모리:</span>
                    <span id="vm-memory">2GB</span>
                </div>
                <div class="vm-info-item">
                    <span>CPU:</span>
                    <span id="vm-cpu">2 cores</span>
                </div>
                <div class="vm-info-item">
                    <span>디스크:</span>
                    <span id="vm-disk">20GB</span>
                </div>
            </div>

            <div class="controls">
                <button class="control-btn start-btn" id="start-btn">🚀 시작</button>
                <button class="control-btn stop-btn" id="stop-btn">⏹️ 중지</button>
                <button class="control-btn restart-btn" id="restart-btn">🔄 재시작</button>
            </div>

            <div class="performance-stats">
                <div class="stat-card">
                    <div class="stat-value" id="cpu-usage">0%</div>
                    <div class="stat-label">CPU 사용률</div>
                </div>
                <div class="stat-card">
                    <div class="stat-value" id="memory-usage">0%</div>
                    <div class="stat-label">메모리 사용률</div>
                </div>
            </div>
        </div>

        <div class="vm-viewer">
            <div class="vnc-container" id="vnc-container">
                <canvas id="vnc-canvas" style="display: none;"></canvas>
                <div class="no-connection" id="no-connection">
                    가상환경을 선택하고 시작 버튼을 눌러주세요
                </div>
            </div>
            <div class="viewer-header">
                <div class="viewer-title" id="viewer-title">가상환경을 선택해주세요</div>
                <div class="connection-status">
                    <div class="status-indicator" id="status-indicator"></div>
                    <span id="connection-text">연결 안됨</span>
                </div>
            </div>

            <div class="toolbar" id="toolbar" style="display: none;">
                <button class="toolbar-btn" onclick="sendCtrlAltDel()">Ctrl+Alt+Del</button>
                <button class="toolbar-btn" onclick="toggleFullscreen()">전체화면</button>
                <button class="toolbar-btn" onclick="takeScreenshot()">스크린샷</button>
                <button class="toolbar-btn" onclick="showKeyboard()">가상키보드</button>
            </div>
            <!-- 툴바 아래에 입력창과 키보드 컨테이너 추가 -->
            <input id="virtual-input" class="input" readonly style="width:300px;font-size:1.2rem; margin-top:10px; display:none;" />
            <div id="keyboard" style="display:none;"></div>
                    </div>
    </div>

    <script>
                // 환경별 설정 분리 - 이 위치가 최적!
        const CONFIG = {
            development: {
                wsProtocol: 'ws:',
                apiBaseUrl: 'http://localhost:3000',
                vncHost: 'localhost'
            },
            production: {
                wsProtocol: 'wss:',
                apiBaseUrl: 'https://your-domain.com',
                vncHost: 'your-vnc-server.com'
            }
        };

        const currentConfig = CONFIG[window.ENV?.NODE_ENV || 'development'];

        function showKeyboard() {
            alert('가상키보드 기능은 구현 예정입니다.');
        }
        function addChar(c) {
          const input = document.getElementById('virtual-input');
          input.value += c;
        }
        function removeChar() {
          const input = document.getElementById('virtual-input');
          input.value = input.value.slice(0, -1);
        }
        function showKeyboard() {
          document.getElementById('virtual-keyboard').style.display = 'block';
        }
        class SandboxPlatform {
            constructor() {
                this.currentVM = null;
                this.vncWebSocket = null;
                this.isConnected = false;
                this.isConnecting = false;
                this.performanceInterval = null;
                this.config = currentConfig; // 추가 필요
                this.authToken = localStorage.getItem('authToken'); // 추가 필요
                
                this.vmConfigs = {
                    'ubuntu-desktop': {
                        name: 'Ubuntu Desktop 20.04',
                        memory: '4GB',
                        cpu: '2 cores',
                        disk: '25GB',
                        host: 'localhost', // VNC 서버 호스트
                        port: 6080,       // Websockify 포트
                        vncPort: 5901,    // 실제 VNC 포트
                        password: '',      // VNC 패스워드
                        path: '/websockify' // WebSocket 경로
                    },
                };

                this.initEventListeners();
                this.updatePerformanceStats();
            }

            initEventListeners() {
                // VM 선택 이벤트
                document.querySelectorAll('.vm-item').forEach(item => {
                    item.addEventListener('click', (e) => {
                        this.selectVM(e.target.dataset.vm);
                    });
                });

                // 컨트롤 버튼 이벤트
                document.getElementById('start-btn').addEventListener('click', () => {
                    this.startVM();
                });

                document.getElementById('stop-btn').addEventListener('click', () => {
                    this.stopVM();
                });

                document.getElementById('restart-btn').addEventListener('click', () => {
                    this.restartVM();
                });

                // 창 크기 변경 이벤트
                window.addEventListener('resize', () => {
                    this.resizeVNCViewer();
                });
            }

            selectVM(vmId) {
                // 이전 선택 해제
                document.querySelectorAll('.vm-item').forEach(item => {
                    item.classList.remove('active');
                });

                // 새로운 VM 선택
                document.querySelector(`[data-vm="${vmId}"]`).classList.add('active');
                this.currentVM = vmId;

                // VM 정보 업데이트
                this.updateVMInfo(vmId);
                
                // 뷰어 제목 업데이트
                document.getElementById('viewer-title').textContent = this.vmConfigs[vmId].name;

                // 연결이 있다면 끊기
                if (this.isConnected) {
                    this.disconnect();
                }
            }

            updateVMInfo(vmId) {
                const config = this.vmConfigs[vmId];
                const vmInfo = document.getElementById('vm-info');
                
                document.getElementById('vm-memory').textContent = config.memory;
                document.getElementById('vm-cpu').textContent = config.cpu;
                document.getElementById('vm-disk').textContent = config.disk;
                
                vmInfo.style.display = 'block';
            }

            async startVMBackend(vmId) {
                try {
                    const response = await fetch(`/api/vm/${vmId}/start`, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'Authorization': `Bearer ${this.getAuthToken()}`
                        }
                    });

                    if (!response.ok) {
                        throw new Error(`VM 시작 실패: ${response.statusText}`);
                    }

                    const result = await response.json();
                    return result;
                } catch (error) {
                    console.error('Backend VM 시작 실패:', error);
                    throw error;
                }
            }

            async startVM() {
                if (!this.currentVM) {
                    alert('먼저 가상환경을 선택해주세요.');
                    return;
                }

                try {
                    this.setConnectionStatus('connecting', '연결 중...');
                    
                    // 실제 VM 시작 API 호출
                    await this.startVMBackend(this.currentVM);
                    
                    // VNC 연결 대기 시간
                    await new Promise(resolve => setTimeout(resolve, 5000));
                    
                    // VNC 연결 시도
                    await this.connectVNC();
                    
                } catch (error) {
                    console.error('VM 시작 실패:', error);
                    this.setConnectionStatus('disconnected', '연결 실패');
                    alert('가상환경 시작에 실패했습니다: ' + error.message);
                }
            }

            async simulateVMStart() {
                // VM 시작 시뮬레이션 (실제로는 백엔드 API 호출)
                return new Promise((resolve) => {
                    setTimeout(() => {
                        resolve();
                    }, 3000);
                });
            }

            async connectVNC() {
                const config = this.vmConfigs[this.currentVM];
                const canvas = document.getElementById('vnc-canvas');
                
                try {
                    // WebSocket URL 구성
                    const wsProtocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';
                    const wsUrl = `${wsProtocol}//${config.host || 'localhost'}:${config.port}/websockify`;

                    // noVNC RFB 객체 생성
                    this.rfb = new RFB(canvas, wsUrl, {
                        credentials: {
                            password: config.password || ''
                        }
                    });
                    
                    // 이벤트 리스너 등록 (주석 해제 및 수정)
                    this.rfb.addEventListener('connect', this.onVNCConnect.bind(this));
                    this.rfb.addEventListener('disconnect', this.onVNCDisconnect.bind(this));
                    this.rfb.addEventListener('credentialsrequired', this.onVNCCredentials.bind(this));
                    this.rfb.addEventListener('securityfailure', this.onVNCSecurityFailure.bind(this));
                    
                    // 연결 설정
                    this.rfb.scaleViewport = true;
                    this.rfb.resizeSession = true;
                    
                } catch (error) {
                    console.error('VNC 연결 실패:', error);
                    this.setConnectionStatus('disconnected', '연결 실패');
                    throw error;
                }
            }

            async callAPI(endpoint, method = 'GET', data = null) {
                const url = `${this.config.apiBaseUrl}${endpoint}`;
                const options = {
                    method,
                    headers: {
                        'Content-Type': 'application/json',
                        'Authorization': this.authToken ? `Bearer ${this.authToken}` : ''
                    }
                };

                if (data) {
                    options.body = JSON.stringify(data);
                }

                try {
                    const response = await fetch(url, options);
                    if (!response.ok) {
                        throw new Error(`API 호출 실패: ${response.statusText}`);
                    }
                    return response.json();
                } catch (error) {
                    console.error('API 호출 오류:', error);
                    throw error;
                }
            }

            getAuthToken() {
                return this.authToken || localStorage.getItem('authToken');
            }

            // VNC 이벤트 핸들러들
            onVNCConnect() {
                console.log('VNC 연결 성공');
                this.isConnected = true;
                this.isConnecting = false;
                this.setConnectionStatus('connected', '연결됨');
                this.updateVMStatus('실행 중');
                this.showVNCViewer();
                this.startPerformanceMonitoring();
            }

            onVNCDisconnect(e) {
                console.log('VNC 연결 해제:', e.detail);
                this.isConnected = false;
                this.isConnecting = false;
                this.setConnectionStatus('disconnected', '연결 안됨');
                this.updateVMStatus('중지됨');
                this.hideVNCViewer();
                this.stopPerformanceMonitoring();
            }

            onVNCCredentials() {
                const password = prompt('VNC 패스워드를 입력하세요:');
                if (password) {
                    this.rfb.sendCredentials({ password: password });
                }
            }

            onVNCSecurityFailure(e) {
                console.error('VNC 보안 실패:', e.detail);
                alert('VNC 인증에 실패했습니다.');
            }

            async simulateVNCConnection() {
                return new Promise((resolve) => {
                    setTimeout(() => {
                        this.isConnected = true;
                        this.isConnecting = false;
                        resolve();
                    }, 2000);
                });
            }

            showVNCViewer() {
                const noConnection = document.getElementById('no-connection');
                const toolbar = document.getElementById('toolbar');
                const canvas = document.getElementById('vnc-canvas');

                noConnection.style.display = 'none';
                toolbar.style.display = 'flex';
                canvas.style.display = 'block';
                
                // 실제 VNC 화면 시뮬레이션
                container.innerHTML = `
                    <div style="width: 100%; height: 100%; background: linear-gradient(45deg, #1e3c72, #2a5298); 
                                display: flex; align-items: center; justify-content: center; 
                                border-radius: 10px; color: white; font-size: 1.2rem;">
                        <div style="text-align: center;">
                            <div style="font-size: 3rem; margin-bottom: 1rem;">🖥️</div>
                            <div>${this.vmConfigs[this.currentVM].name}</div>
                            <div style="font-size: 0.9rem; margin-top: 0.5rem; opacity: 0.8;">
                                VNC 연결됨 - 실제 구현시 noVNC 캔버스가 여기에 표시됩니다
                            </div>
                        </div>
                    </div>
                `;
            }

            stopVM() {
                if (!this.isConnected) {
                    return;
                }

                this.disconnect();
                this.setConnectionStatus('disconnected', '연결 안됨');
                this.updateVMStatus('중지됨');
                this.hideVNCViewer();
                this.stopPerformanceMonitoring();
            }

            restartVM() {
                if (this.isConnected) {
                    this.stopVM();
                    setTimeout(() => {
                        this.startVM();
                    }, 1000);
                }
            }

            disconnect() {
                if (this.rfb) {
                    this.rfb.disconnect();
                    this.rfb = null;
                }
                this.isConnected = false;
                this.isConnecting = false;
            }

            hideVNCViewer() {
                const container = document.getElementById('vnc-container');
                const toolbar = document.getElementById('toolbar');
                const canvas = document.getElementById('vnc-canvas');
                
                toolbar.style.display = 'none';
                canvas.style.display = 'none';
                
                // no-connection div가 없으면 생성
                let noConnection = document.getElementById('no-connection');
                if (!noConnection) {
                    noConnection = document.createElement('div');
                    noConnection.id = 'no-connection';
                    noConnection.className = 'no-connection';
                    container.appendChild(noConnection);
                }
                
                noConnection.style.display = 'block';
                noConnection.textContent = '가상환경을 선택하고 시작 버튼을 눌러주세요';
            }

            setConnectionStatus(status, text) {
                const indicator = document.getElementById('status-indicator');
                const connectionText = document.getElementById('connection-text');
                
                indicator.className = `status-indicator ${status}`;
                connectionText.textContent = text;
            }

            updateVMStatus(status) {
                document.getElementById('vm-status').textContent = status;
            }

            startPerformanceMonitoring() {
                this.performanceInterval = setInterval(() => {
                    this.updatePerformanceStats();
                }, 2000);
            }

            stopPerformanceMonitoring() {
                if (this.performanceInterval) {
                    clearInterval(this.performanceInterval);
                    this.performanceInterval = null;
                }
                
                // 성능 통계 초기화
                document.getElementById('cpu-usage').textContent = '0%';
                document.getElementById('memory-usage').textContent = '0%';
            }

            updatePerformanceStats() {
                if (this.isConnected) {
                    // 실제로는 백엔드에서 성능 데이터를 가져옴
                    const cpuUsage = Math.floor(Math.random() * 60) + 20;
                    const memoryUsage = Math.floor(Math.random() * 40) + 30;
                    
                    document.getElementById('cpu-usage').textContent = `${cpuUsage}%`;
                    document.getElementById('memory-usage').textContent = `${memoryUsage}%`;
                }
            }

            resizeVNCViewer() {
                if (this.rfb) {
                    this.rfb.autoscale = true;
                }
            }
        }
        // ExtendedSandboxPlatform 클래스 정의 추가
        class ExtendedSandboxPlatform extends SandboxPlatform {
            constructor() {
                super();
                this.isRecording = false;
                this.clipboardModal = null;
                this.currentScale = 100;
            }
            
            // 확장 기능들 구현
            showVNCViewer() {
                super.showVNCViewer();
                const noConnection = document.getElementById('no-connection');
                const toolbar = document.getElementById('toolbar');
                const canvas = document.getElementById('vnc-canvas');

                noConnection.style.display = 'none';
                toolbar.style.display = 'flex';
                canvas.style.display = 'block';
            }
        }

        class SecurityManager {
            constructor() {
                this.currentUser = null;
                this.sessionTimeout = 30 * 60 * 1000; // 30분
                this.maxLoginAttempts = 3;
                this.loginAttempts = 0;
                this.allowedIPs = [];
                this.auditLogs = [];
            }

            async getClientIP() {
                try {
                    const response = await fetch('/api/client-ip');
                    const data = await response.json();
                    return data.ip;
                } catch (error) {
                    return 'unknown';
                }
            }

            handleLoginFailure() {
                this.loginAttempts++;
                if (this.loginAttempts >= this.maxLoginAttempts) {
                    alert('최대 로그인 시도 횟수를 초과했습니다.');
                    window.location.href = '/blocked';
                }
            }

            logout(reason) {
                console.log(`로그아웃: ${reason}`);
                this.currentUser = null;
                if (this.sessionTimer) {
                    clearTimeout(this.sessionTimer);
                }
                window.location.href = '/login';
            }

            // 사용자 인증
            async authenticate(username, password, mfaCode = null) {
                try {
                    // IP 주소 확인
                    if (!this.checkIPWhitelist()) {
                        throw new Error('허용되지 않은 IP 주소입니다');
                    }

                    const response = await fetch('/api/auth/login', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify({
                            username,
                            password,
                            mfaCode,
                            clientIP: await this.getClientIP()
                        })
                    });

                    if (response.ok) {
                        const userData = await response.json();
                        this.currentUser = userData;
                        this.startSessionTimeout();
                        this.logSecurityEvent('LOGIN_SUCCESS', { username });
                        return true;
                    } else {
                        this.handleLoginFailure();
                        return false;
                    }
                } catch (error) {
                    this.logSecurityEvent('LOGIN_ERROR', { error: error.message });
                    throw error;
                }
            }

            // 세션 타임아웃 관리
            startSessionTimeout() {
                if (this.sessionTimer) {
                    clearTimeout(this.sessionTimer);
                }
                
                this.sessionTimer = setTimeout(() => {
                    this.logout('SESSION_TIMEOUT');
                }, this.sessionTimeout);
            }

            // 권한 확인
            checkPermission(action, vmId) {
                if (!this.currentUser) {
                    return false;
                }

                const userPermissions = this.currentUser.permissions || [];
                const vmPermissions = this.currentUser.vmAccess || [];

                return userPermissions.includes(action) && 
                    (vmPermissions.includes('*') || vmPermissions.includes(vmId));
            }

            // IP 화이트리스트 확인
            checkIPWhitelist() {
                if (this.allowedIPs.length === 0) {
                    return true; // 화이트리스트가 비어있으면 모든 IP 허용
                }
                
                // 실제 구현에서는 클라이언트 IP를 정확히 가져와야 함
                const clientIP = this.getClientIP();
                return this.allowedIPs.includes(clientIP);
            }

            // 보안 이벤트 로깅
            logSecurityEvent(eventType, details) {
                const logEntry = {
                    timestamp: new Date().toISOString(),
                    eventType,
                    user: this.currentUser?.username || 'anonymous',
                    ip: this.getClientIP(),
                    details
                };
                
                this.auditLogs.push(logEntry);
                
                // 백엔드로 로그 전송
                fetch('/api/security/log', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(logEntry)
                });
            }
        }

        class SecureConnection {
            constructor() {
                this.encryptionKey = null;
                this.sslEnabled = true;
            }

            // SSL/TLS 연결 설정
            setupSecureConnection(vmConfig) {
                const protocol = this.sslEnabled ? 'wss:' : 'ws:';
                const wsUrl = `${protocol}//${vmConfig.host}:${vmConfig.securePort}/websockify`;
                
                return {
                    ...vmConfig,
                    wsUrl,
                    encrypt: true,
                    credentials: {
                        password: this.generateSecurePassword()
                    }
                };
            }

            // 데이터 암호화
            encryptData(data) {
                if (!this.encryptionKey) {
                    return data;
                }
                // 실제 구현에서는 적절한 암호화 라이브러리 사용
                return btoa(data); // 예시용 Base64 인코딩
            }

            // 보안 패스워드 생성
            generateSecurePassword() {
                const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*';
                let password = '';
                for (let i = 0; i < 16; i++) {
                    password += chars.charAt(Math.floor(Math.random() * chars.length));
                }
                return password;
            }
        }

        class SecureSandboxPlatform extends ExtendedSandboxPlatform {
            constructor() {
                super();
                this.securityManager = new SecurityManager();
                this.secureConnection = new SecureConnection();
                this.initSecurity();
            }

            initSecurity() {
                // 페이지 로드 시 인증 확인
                this.checkAuthentication();
                
                // 키보드 이벤트 보안 필터링
                this.setupSecurityFilters();
                
                // 정기적인 보안 점검
                setInterval(() => {
                    this.performSecurityCheck();
                }, 60000); // 1분마다
            }

            async checkAuthentication() {
                const token = this.getAuthToken();
                if (!token) {
                    return false;
                }

                try {
                    const response = await fetch('/api/auth/verify', {
                        method: 'POST',
                        headers: {
                            'Authorization': `Bearer ${token}`,
                            'Content-Type': 'application/json'
                        }
                    });
                    
                    return response.ok;
                } catch (error) {
                    console.error('인증 확인 실패:', error);
                    return false;
                }
            }

            setupSecurityFilters() {
                // 키보드 이벤트 필터링 구현
                document.addEventListener('keydown', (event) => {
                    // 위험한 키 조합 차단 (예: F12, Ctrl+Shift+I 등)
                    if (event.key === 'F12' || 
                        (event.ctrlKey && event.shiftKey && event.key === 'I')) {
                        event.preventDefault();
                        console.log('개발자 도구 접근이 차단되었습니다.');
                    }
                });
            }

            performSecurityCheck() {
                // 세션 유효성 검사
                if (!this.securityManager.currentUser) {
                    this.redirectToLogin();
                    return;
                }

                // 비정상적인 활동 감지
                this.detectSuspiciousActivity();
            }

            redirectToLogin() {
                window.location.href = '/login';
            }

            detectSuspiciousActivity() {
                // 의심스러운 활동 감지 로직
                // 예: 비정상적인 API 호출 패턴, 과도한 요청 등
            }

            async startVM() {
                // 권한 확인
                if (!this.securityManager.checkPermission('START_VM', this.currentVM)) {
                    alert('가상머신 시작 권한이 없습니다.');
                    return;
                }

                // 보안 이벤트 로깅
                this.securityManager.logSecurityEvent('VM_START_ATTEMPT', {
                    vmId: this.currentVM
                });

                await super.startVM();
            }

            performSecurityCheck() {
                // 세션 유효성 검사
                if (!this.securityManager.currentUser) {
                    this.redirectToLogin();
                    return;
                }

                // 비정상적인 활동 감지
                this.detectSuspiciousActivity();
            }
        }



        // 툴바 기능들

        function toggleFullscreen() {
            const container = document.getElementById('vnc-container');
            if (document.fullscreenElement) {
                document.exitFullscreen();
            } else {
            container.requestFullscreen();
            }
        }

        function takeScreenshot() {
            if (platform.rfb && platform.isConnected) {
                const canvas = document.getElementById('vnc-canvas');
                const link = document.createElement('a');
                link.download = `screenshot-${new Date().getTime()}.png`;
                link.href = canvas.toDataURL();
                link.click();
            }
        }

        // 플랫폼 초기화
        // 보안 기능이 포함된 플랫폼으로 변경
        const platform = new SecureSandboxPlatform();

        // 초기화 시 인증 확인
        document.addEventListener('DOMContentLoaded', async () => {
            console.log('웹 기반 샌드박스 플랫폼이 초기화되었습니다.');
            
            // 인증 상태 확인
            if (currentConfig.apiBaseUrl !== 'http://localhost:3000') {
                if (!await platform.checkAuthentication()) {
                    window.location.href = '/login';
                    return;
                }
            }
        });
    </script>
</body>
</html>
