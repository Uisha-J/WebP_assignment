<!DOCTYPE html>
<html lang="ko">
<head>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/novnc/1.3.0/core/util.js"></script>
    <script src="https://unpkg.com/@novnc/novnc/lib/rfb.js"></script>
    
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>웹 기반 샌드박스 플랫폼</title>
    <script>
        // 환경 변수 설정 개선
        window.ENV = {
            NODE_ENV: 'development', // 실제 환경에 맞게 설정
            API_BASE_URL: 'http://localhost:3000' // 실제 API URL로 변경
        };
    </script>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #e0f7fa 0%, #b2ebf2 100%);
            min-height: 100vh;
            display: flex;
            flex-direction: column;
        }

        .header {
            background: rgba(255, 255, 255, 0.1);
            backdrop-filter: blur(10px);
            padding: 1rem 2rem;
            border-bottom: 1px solid rgba(255, 255, 255, 0.2);
        }

        .header h1 {
            color: black;
            font-size: 1.5rem;
            font-weight: 600;
        }

        .main-container {
            display: flex;
            flex: 1;
            gap: 1rem;
            padding: 1rem;
        }

        .sidebar {
            width: 300px;
            background: rgba(255, 255, 255, 0.95);
            border-radius: 15px;
            padding: 1.5rem;
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
            backdrop-filter: blur(10px);
        }

        .sidebar h2 {
            color: #333;
            margin-bottom: 1rem;
            font-size: 1.2rem;
        }

        .vm-list {
            display: flex;
            flex-direction: column;
            gap: 0.5rem;
            margin-bottom: 2rem;
        }

        .vm-item {
            padding: 0.8rem;
            background: linear-gradient(135deg, #667eea, #764ba2);
            color: white;
            border: none;
            border-radius: 10px;
            cursor: pointer;
            transition: all 0.3s ease;
            text-align: left;
            font-size: 0.9rem;
        }

        .vm-item:hover {
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.2);
        }

        .vm-item.active {
            background: linear-gradient(135deg, #4CAF50, #45a049);
        }

        .controls {
            display: flex;
            flex-direction: column;
            gap: 0.5rem;
        }

        .control-btn {
            padding: 0.8rem;
            border: none;
            border-radius: 8px;
            cursor: pointer;
            font-weight: 500;
            transition: all 0.3s ease;
        }

        .start-btn {
            background: #4CAF50;
            color: white;
        }

        .stop-btn {
            background: #f44336;
            color: white;
        }

        .restart-btn {
            background: #ff9800;
            color: white;
        }

        .control-btn:hover {
            opacity: 0.8;
            transform: translateY(-1px);
        }

        .control-btn:disabled {
            opacity: 0.5;
            cursor: not-allowed;
            transform: none;
        }

        .vm-viewer {
            flex: 1;
            background: rgba(255, 255, 255, 0.95);
            border-radius: 15px;
            padding: 1.5rem;
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
            backdrop-filter: blur(10px);
            display: flex;
            flex-direction: column;
        }

        .viewer-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 1rem;
            padding-bottom: 1rem;
            border-bottom: 1px solid #eee;
        }

        .viewer-title {
            color: #333;
            font-size: 1.1rem;
            font-weight: 600;
        }

        .connection-status {
            display: flex;
            align-items: center;
            gap: 0.5rem;
            font-size: 0.9rem;
        }

        .status-indicator {
            width: 10px;
            height: 10px;
            border-radius: 50%;
            background: #ccc;
            transition: all 0.3s ease;
        }

        .status-indicator.connected {
            background: #4CAF50;
            box-shadow: 0 0 10px rgba(76, 175, 80, 0.5);
        }

        .status-indicator.connecting {
            background: #ff9800;
            animation: pulse 1.5s infinite;
        }

        .status-indicator.restarting {
            background: #2196F3;
            animation: pulse 1.5s infinite;
        }

        .toolbar {
            display: flex;
            gap: 0.5rem;
            margin-bottom: 1rem;
            flex-wrap: wrap;
        }

        .toolbar-btn {
            padding: 0.5rem 1rem;
            background: #667eea;
            color: white;
            border: none;
            border-radius: 6px;
            cursor: pointer;
            font-size: 0.8rem;
            transition: all 0.3s ease;
            display: inline-flex;
            align-items: center;
            gap: 0.3rem;
        }

        .toolbar-btn:hover {
            background: #5a6fd8;
            transform: translateY(-1px);
        }

        .toolbar-btn:active {
            transform: translateY(0);
        }

        .vnc-container {
            flex: 1;
            background: #000;
            border-radius: 10px;
            position: relative;
            min-height: 400px;
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .vnc-screen {
            width: 100%;
            height: 100%;
            border: none;
            border-radius: 10px;
        }

        .no-connection {
            color: #666;
            text-align: center;
            font-size: 1.1rem;
        }

        .loading {
            color: #667eea;
            font-size: 1.1rem;
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }

        .spinner {
            width: 20px;
            height: 20px;
            border: 2px solid #667eea;
            border-top: 2px solid transparent;
            border-radius: 50%;
            animation: spin 1s linear infinite;
        }

        .vm-info {
            background: #f8f9fa;
            padding: 1rem;
            border-radius: 8px;
            margin-bottom: 1rem;
            font-size: 0.9rem;
        }

        .vm-info-item {
            display: flex;
            justify-content: space-between;
            margin-bottom: 0.5rem;
        }

        .vm-info-item:last-child {
            margin-bottom: 0;
        }

        .performance-stats {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 1rem;
            margin-top: 1rem;
        }

        .stat-card {
            background: white;
            padding: 1rem;
            border-radius: 8px;
            text-align: center;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
        }

        .stat-value {
            font-size: 1.5rem;
            font-weight: bold;
            color: #667eea;
        }

        .stat-label {
            font-size: 0.8rem;
            color: #666;
            margin-top: 0.5rem;
        }

        @media (max-width: 768px) {
            .main-container {
                flex-direction: column;
            }

            .sidebar {
                width: 100%;
            }

            .toolbar {
                flex-wrap: wrap;
            }

            .toolbar-btn {
                font-size: 0.7rem;
                padding: 0.4rem 0.8rem;
            }
        }
    </style>
</head>
<body>
    <div class="header">
        <h1>🖥️ 웹 기반 샌드박스 플랫폼</h1>
    </div>
    
    <div class="main-container">
        <div class="sidebar">
            <h2>가상환경 목록</h2>
            <div class="vm-list">
                <button class="vm-item" data-vm="ubuntu-desktop">
                    🐧 Ubuntu Desktop 20.04
                </button>
            </div>

            <div class="vm-info" id="vm-info" style="display: none;">
                <div class="vm-info-item">
                    <span>상태:</span>
                    <span id="vm-status">중지됨</span>
                </div>
                <div class="vm-info-item">
                    <span>메모리:</span>
                    <span id="vm-memory">2GB</span>
                </div>
                <div class="vm-info-item">
                    <span>CPU:</span>
                    <span id="vm-cpu">2 cores</span>
                </div>
                <div class="vm-info-item">
                    <span>디스크:</span>
                    <span id="vm-disk">20GB</span>
                </div>
            </div>

            <div class="controls">
                <button class="control-btn start-btn" id="start-btn">🚀 시작</button>
                <button class="control-btn stop-btn" id="stop-btn">⏹️ 중지</button>
                <button class="control-btn restart-btn" id="restart-btn">🔄 재시작</button>
            </div>

            <div class="performance-stats">
                <div class="stat-card">
                    <div class="stat-value" id="cpu-usage">0%</div>
                    <div class="stat-label">CPU 사용률</div>
                </div>
                <div class="stat-card">
                    <div class="stat-value" id="memory-usage">0%</div>
                    <div class="stat-label">메모리 사용률</div>
                </div>
            </div>
        </div>

        <div class="vm-viewer">
            <div class="viewer-header">
                <div class="viewer-title" id="viewer-title">가상환경을 선택해주세요</div>
                <div class="connection-status">
                    <div class="status-indicator" id="status-indicator"></div>
                    <span id="connection-text">연결 안됨</span>
                </div>
            </div>

            <div class="toolbar" id="toolbar">
                <button class="toolbar-btn" onclick="toggleFullscreen()">
                    🔲 전체화면
                </button>
                <button class="toolbar-btn" onclick="takeScreenshot()">
                    📷 스크린샷
                </button>
            </div>

            <div class="vnc-container" id="vnc-container">
                <canvas id="vnc-canvas" style="display: none;"></canvas>
                <div class="no-connection" id="no-connection">
                    가상환경을 선택하고 시작 버튼을 눌러주세요
                </div>
            </div>
        </div>
    </div>


    <script>
        // 환경별 설정
        const CONFIG = {
            development: {
                wsProtocol: 'ws:',
                apiBaseUrl: 'http://localhost:3000',
                vncHost: 'localhost'
            },
            production: {
                wsProtocol: 'wss:',
                apiBaseUrl: 'https://your-domain.com',
                vncHost: 'your-vnc-server.com'
            }
        };

        const currentConfig = CONFIG[window.ENV?.NODE_ENV || 'development'];

        // 수정된 플랫폼 클래스
        class SandboxPlatform {
            constructor() {
                this.currentVM = null;
                this.vncWebSocket = null;
                this.isConnected = false;
                this.isConnecting = false;
                this.isRestarting = false;
                this.performanceInterval = null;
                this.config = currentConfig;
                this.authToken = sessionStorage.getItem('authToken');
                
                this.vmConfigs = {
                    'ubuntu-desktop': {
                        name: 'Ubuntu Desktop 20.04',
                        memory: '4GB',
                        cpu: '2 cores',
                        disk: '25GB',
                        host: 'localhost',
                        port: 6080,
                        vncPort: 5901,
                        password: '',
                        path: '/websockify'
                    },
                };

                this.initEventListeners();
                this.updatePerformanceStats();
            }

            initEventListeners() {
                // VM 선택 이벤트
                document.querySelectorAll('.vm-item').forEach(item => {
                    item.addEventListener('click', (e) => {
                        this.selectVM(e.target.dataset.vm);
                    });
                });

                // 컨트롤 버튼 이벤트
                document.getElementById('start-btn').addEventListener('click', () => {
                    this.startVM();
                });

                document.getElementById('stop-btn').addEventListener('click', () => {
                    this.stopVM();
                });

                document.getElementById('restart-btn').addEventListener('click', () => {
                    this.restartVM();
                });

                // 창 크기 변경 이벤트
                window.addEventListener('resize', () => {
                    this.resizeVNCViewer();
                });
            }

            selectVM(vmId) {
                // 이전 선택 해제
                document.querySelectorAll('.vm-item').forEach(item => {
                    item.classList.remove('active');
                });

                // 새로운 VM 선택
                document.querySelector(`[data-vm="${vmId}"]`).classList.add('active');
                this.currentVM = vmId;

                // VM 정보 업데이트
                this.updateVMInfo(vmId);
                
                // 뷰어 제목 업데이트
                document.getElementById('viewer-title').textContent = this.vmConfigs[vmId].name;

                // 연결이 있다면 끊기
                if (this.isConnected) {
                    this.disconnect();
                }
            }

            updateVMInfo(vmId) {
                const config = this.vmConfigs[vmId];
                const vmInfo = document.getElementById('vm-info');
                
                document.getElementById('vm-memory').textContent = config.memory;
                document.getElementById('vm-cpu').textContent = config.cpu;
                document.getElementById('vm-disk').textContent = config.disk;
                
                vmInfo.style.display = 'block';
            }

            async startVM() {
                if (!this.currentVM) {
                    alert('먼저 가상환경을 선택해주세요.');
                    return;
                }

                if (this.isConnecting || this.isRestarting) {
                    return;
                }

                try {
                    this.isConnecting = true;
                    this.updateControlButtons();
                    this.setConnectionStatus('connecting', '연결 중...');
                    
                    // 실제 VM 시작 시뮬레이션
                    await this.simulateVMStart();
                    
                    // VNC 연결 시뮬레이션
                    await this.simulateVNCConnection();
                    
                    this.setConnectionStatus('connected', '연결됨');
                    this.updateVMStatus('실행 중');
                    this.showVNCViewer();
                    this.startPerformanceMonitoring();
                    
                } catch (error) {
                    console.error('VM 시작 실패:', error);
                    this.setConnectionStatus('disconnected', '연결 실패');
                    alert('가상환경 시작에 실패했습니다: ' + error.message);
                } finally {
                    this.isConnecting = false;
                    this.updateControlButtons();
                }
            }

            async simulateVMStart() {
                return new Promise((resolve) => {
                    setTimeout(() => {
                        resolve();
                    }, 3000);
                });
            }

            async simulateVNCConnection() {
                return new Promise((resolve) => {
                    setTimeout(() => {
                        this.isConnected = true;
                        resolve();
                    }, 2000);
                });
            }

            showVNCViewer() {
                const container = document.getElementById('vnc-container');
                const noConnection = document.getElementById('no-connection');
                const toolbar = document.getElementById('toolbar');
                const canvas = document.getElementById('vnc-canvas');

                // no-connection 숨김
                if (noConnection) {
                    noConnection.style.display = 'none';
                }
                
                // 툴바 표시 (명시적으로)
                toolbar.style.display = 'flex';
                toolbar.classList.remove('hidden');
                
                // 캔버스 표시
                if (canvas) {
                    canvas.style.display = 'block';
                }
                
                // 실제 VNC 화면 시뮬레이션
                container.innerHTML = `
                    <div style="width: 100%; height: 100%; background: linear-gradient(45deg, #1e3c72, #2a5298); 
                                display: flex; align-items: center; justify-content: center; 
                                border-radius: 10px; color: white; font-size: 1.2rem;">
                        <div style="text-align: center;">
                            <div style="font-size: 3rem; margin-bottom: 1rem;">🖥️</div>
                            <div>${this.vmConfigs[this.currentVM].name}</div>
                            <div style="font-size: 0.9rem; margin-top: 0.5rem; opacity: 0.8;">
                                VNC 연결됨 - 실제 구현시 noVNC 캔버스가 여기에 표시됩니다
                            </div>
                        </div>
                    </div>
                `;
            }

            stopVM() {
                if (!this.isConnected && !this.isConnecting && !this.isRestarting) {
                    return;
                }

                try {
                    // 연결 상태 초기화
                    this.disconnect();
                    this.isConnecting = false;
                    this.isRestarting = false;
                    
                    // UI 상태 업데이트
                    this.setConnectionStatus('disconnected', '연결 안됨');
                    this.updateVMStatus('중지됨');
                    this.hideVNCViewer();
                    this.stopPerformanceMonitoring();
                    
                    // 버튼 상태 업데이트 (중요!)
                    this.updateControlButtons();
                    
                } catch (error) {
                    console.error('VM 중지 실패:', error);
                } finally {
                    // 확실히 상태 초기화
                    this.isConnecting = false;
                    this.isRestarting = false;
                    this.updateControlButtons();
                }
            }

            async restartVM() {
                if (!this.currentVM) {
                    alert('먼저 가상환경을 선택해주세요.');
                    return;
                }

                if (this.isRestarting || this.isConnecting) {
                    return;
                }

                try {
                    this.isRestarting = true;
                    this.updateControlButtons();
                    this.setConnectionStatus('restarting', '재시작 중...');
                    this.updateVMStatus('재시작 중');

                    // 연결된 상태라면 먼저 연결 해제
                    if (this.isConnected) {
                        this.disconnect();
                        // 연결 해제 대기
                        await new Promise(resolve => setTimeout(resolve, 1000));
                    }

                    // VM 재시작 시뮬레이션 (중지 + 시작)
                    await this.simulateVMRestart();
                    
                    // VNC 재연결
                    await this.simulateVNCConnection();
                    
                    this.setConnectionStatus('connected', '연결됨');
                    this.updateVMStatus('실행 중');
                    this.showVNCViewer();
                    this.startPerformanceMonitoring();
                    
                } catch (error) {
                    console.error('VM 재시작 실패:', error);
                    this.setConnectionStatus('disconnected', '재시작 실패');
                    this.updateVMStatus('중지됨');
                    this.hideVNCViewer();
                    alert('가상환경 재시작에 실패했습니다: ' + error.message);
                } finally {
                    this.isRestarting = false;
                    this.updateControlButtons();
                }
            }

            async simulateVMRestart() {
                return new Promise((resolve) => {
                    // 재시작은 시작보다 조금 더 오래 걸림
                    setTimeout(() => {
                        resolve();
                    }, 4000);
                });
            }

            disconnect() {
                if (this.rfb) {
                    this.rfb.disconnect();
                    this.rfb = null;
                }
                this.isConnected = false;
            }

            hideVNCViewer() {
                const container = document.getElementById('vnc-container');

                // 컨테이너 내용 초기화 및 no-connection 메시지 표시
                container.innerHTML = `
                    <div class="no-connection" id="no-connection">
                        가상환경을 선택하고 시작 버튼을 눌러주세요
                    </div>
                `;
            }

            setConnectionStatus(status, text) {
                const indicator = document.getElementById('status-indicator');
                const connectionText = document.getElementById('connection-text');
                
                // 기존 클래스 제거
                indicator.className = 'status-indicator';
                // 새로운 상태 클래스 추가
                indicator.classList.add(status);
                connectionText.textContent = text;
            }

            updateVMStatus(status) {
                document.getElementById('vm-status').textContent = status;
            }

            updateControlButtons() {
                const startBtn = document.getElementById('start-btn');
                const stopBtn = document.getElementById('stop-btn');
                const restartBtn = document.getElementById('restart-btn');

                if (this.isConnecting) {
                    // 연결 중 상태
                    startBtn.disabled = true;
                    stopBtn.disabled = false;
                    restartBtn.disabled = true;
                    startBtn.textContent = '🔄 연결 중...';
                    stopBtn.textContent = '⏹️ 중지';
                    restartBtn.textContent = '🔄 재시작';
                } else if (this.isRestarting) {
                    // 재시작 중 상태
                    startBtn.disabled = true;
                    stopBtn.disabled = true;
                    restartBtn.disabled = true;
                    startBtn.textContent = '🚀 시작';
                    stopBtn.textContent = '⏹️ 중지';
                    restartBtn.textContent = '🔄 재시작 중...';
                } else if (this.isConnected) {
                    // 연결됨 상태
                    startBtn.disabled = true;
                    stopBtn.disabled = false;
                    restartBtn.disabled = false;
                    startBtn.textContent = '🚀 시작';
                    stopBtn.textContent = '⏹️ 중지';
                    restartBtn.textContent = '🔄 재시작';
                } else {
                    // 중지됨/연결 안됨 상태
                    startBtn.disabled = false;
                    stopBtn.disabled = true;
                    restartBtn.disabled = true;
                    startBtn.textContent = '🚀 시작';
                    stopBtn.textContent = '⏹️ 중지';
                    restartBtn.textContent = '🔄 재시작';
                }
            }

            startPerformanceMonitoring() {
                this.performanceInterval = setInterval(() => {
                    this.updatePerformanceStats();
                }, 2000);
            }

            stopPerformanceMonitoring() {
                if (this.performanceInterval) {
                    clearInterval(this.performanceInterval);
                    this.performanceInterval = null;
                }
                
                // 성능 통계 초기화
                document.getElementById('cpu-usage').textContent = '0%';
                document.getElementById('memory-usage').textContent = '0%';
            }

            updatePerformanceStats() {
                if (this.isConnected) {
                    // 실제로는 백엔드에서 성능 데이터를 가져옴
                    const cpuUsage = Math.floor(Math.random() * 60) + 20;
                    const memoryUsage = Math.floor(Math.random() * 40) + 30;
                    
                    document.getElementById('cpu-usage').textContent = `${cpuUsage}%`;
                    document.getElementById('memory-usage').textContent = `${memoryUsage}%`;
                }
            }

            resizeVNCViewer() {
                if (this.rfb) {
                    this.rfb.autoscale = true;
                }
            }
        }

        // 기타 툴바 함수들
        function toggleFullscreen() {
            const container = document.getElementById('vnc-container');
            if (document.fullscreenElement) {
                document.exitFullscreen();
            } else {
                container.requestFullscreen().catch(error => {
                    console.error('전체화면 전환 실패:', error);
                });
            }
        }

        function takeScreenshot() {
            if (!window.platform || !window.platform.isConnected) {
                alert('VM에 연결되지 않았습니다.');
                return;
            }

            try {
                // 실제 구현에서는 VNC 캔버스에서 스크린샷 생성
                console.log('스크린샷 촬영 시뮬레이션');
                alert('스크린샷이 촬영되었습니다. (시뮬레이션)');
            } catch (error) {
                console.error('스크린샷 실패:', error);
                alert('스크린샷 생성에 실패했습니다.');
            }
        }

        // 플랫폼 초기화
        window.platform = new SandboxPlatform();

        // 페이지 로드 완료 후 초기화
        document.addEventListener('DOMContentLoaded', () => {
            console.log('웹 기반 샌드박스 플랫폼이 초기화되었습니다.');
            
            // 초기 버튼 상태 설정
            window.platform.updateControlButtons();
        });
    </script>
</body>
</html>
