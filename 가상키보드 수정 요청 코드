<!DOCTYPE html>
<html lang="ko">
<head>
    <!-- simple-keyboard CSS -->
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/simple-keyboard@latest/build/css/index.css">
    <!-- simple-keyboard JS -->
    <script src="https://cdn.jsdelivr.net/npm/simple-keyboard@latest/build/index.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/novnc/1.3.0/core/util.js"></script>
    <script src="https://unpkg.com/@novnc/novnc/lib/rfb.js"></script>
    
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>보안 웹 기반 샌드박스 플랫폼</title>
    <script>
        // 환경 변수 설정 및 보안 구성
        window.ENV = {
            NODE_ENV: 'development',
            API_BASE_URL: 'http://localhost:3000',
            SECURITY_LEVEL: 'high',
            SESSION_TIMEOUT: 30 * 60 * 1000, // 30분
            MAX_LOGIN_ATTEMPTS: 3
        };
        
        // CSP 설정
        window.CSP_NONCE = Math.random().toString(36).substring(2, 15);
    </script>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #e0f7fa 0%, #b2ebf2 100%);
            min-height: 100vh;
            display: flex;
            flex-direction: column;
        }

        /* 보안 헤더 스타일 */
        .header {
            background: rgba(255, 255, 255, 0.1);
            backdrop-filter: blur(10px);
            padding: 1rem 2rem;
            border-bottom: 1px solid rgba(255, 255, 255, 0.2);
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .header h1 {
            color: black;
            font-size: 1.5rem;
            font-weight: 600;
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }

        .security-status {
            display: flex;
            align-items: center;
            gap: 1rem;
            font-size: 0.9rem;
        }

        .security-indicator {
            display: flex;
            align-items: center;
            gap: 0.3rem;
            padding: 0.3rem 0.8rem;
            border-radius: 15px;
            background: rgba(76, 175, 80, 0.1);
            color: #4CAF50;
            font-weight: 500;
        }

        .security-indicator.warning {
            background: rgba(255, 152, 0, 0.1);
            color: #ff9800;
        }

        .security-indicator.danger {
            background: rgba(244, 67, 54, 0.1);
            color: #f44336;
        }

        /* 보안 로그 패널 */
        .security-log-panel {
            position: fixed;
            top: 80px;
            right: -350px;
            width: 350px;
            height: calc(100vh - 80px);
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(10px);
            border-left: 1px solid rgba(0, 0, 0, 0.1);
            transition: right 0.3s ease;
            z-index: 1000;
            display: flex;
            flex-direction: column;
        }

        .security-log-panel.open {
            right: 0;
        }

        .security-log-header {
            padding: 1rem;
            background: #667eea;
            color: white;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .security-log-content {
            flex: 1;
            overflow-y: auto;
            padding: 1rem;
        }

        .security-log-item {
            padding: 0.8rem;
            margin-bottom: 0.5rem;
            border-radius: 8px;
            font-size: 0.8rem;
            border-left: 4px solid;
        }

        .security-log-item.info {
            background: #e3f2fd;
            border-left-color: #2196f3;
        }

        .security-log-item.warning {
            background: #fff3e0;
            border-left-color: #ff9800;
        }

        .security-log-item.error {
            background: #ffebee;
            border-left-color: #f44336;
        }

        .security-log-time {
            font-weight: bold;
            color: #666;
        }

        .security-toggle-btn {
            position: fixed;
            top: 50%;
            right: 10px;
            transform: translateY(-50%);
            background: #667eea;
            color: white;
            border: none;
            padding: 0.8rem;
            border-radius: 50%;
            cursor: pointer;
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.2);
            z-index: 1001;
            transition: all 0.3s ease;
        }

        .security-toggle-btn:hover {
            background: #5a6fd8;
            transform: translateY(-50%) scale(1.1);
        }

        /* 기존 스타일들 유지 */
        .main-container {
            display: flex;
            flex: 1;
            gap: 1rem;
            padding: 1rem;
        }

        .sidebar {
            width: 300px;
            background: rgba(255, 255, 255, 0.95);
            border-radius: 15px;
            padding: 1.5rem;
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
            backdrop-filter: blur(10px);
        }

        .sidebar h2 {
            color: #333;
            margin-bottom: 1rem;
            font-size: 1.2rem;
        }

        .vm-list {
            display: flex;
            flex-direction: column;
            gap: 0.5rem;
            margin-bottom: 2rem;
        }

        .vm-item {
            padding: 0.8rem;
            background: linear-gradient(135deg, #667eea, #764ba2);
            color: white;
            border: none;
            border-radius: 10px;
            cursor: pointer;
            transition: all 0.3s ease;
            text-align: left;
            font-size: 0.9rem;
            position: relative;
        }

        .vm-item:hover {
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.2);
        }

        .vm-item.active {
            background: linear-gradient(135deg, #4CAF50, #45a049);
        }

        .vm-item.restricted {
            background: linear-gradient(135deg, #666, #888);
            cursor: not-allowed;
            opacity: 0.6;
        }

        .vm-security-level {
            position: absolute;
            top: 0.5rem;
            right: 0.5rem;
            font-size: 0.7rem;
            background: rgba(255, 255, 255, 0.2);
            padding: 0.2rem 0.4rem;
            border-radius: 4px;
        }

        .controls {
            display: flex;
            flex-direction: column;
            gap: 0.5rem;
            margin-bottom: 1rem;
        }

        .control-btn {
            padding: 0.8rem;
            border: none;
            border-radius: 8px;
            cursor: pointer;
            font-weight: 500;
            transition: all 0.3s ease;
        }

        .start-btn {
            background: #4CAF50;
            color: white;
        }

        .stop-btn {
            background: #f44336;
            color: white;
        }

        .restart-btn {
            background: #ff9800;
            color: white;
        }

        .control-btn:hover {
            opacity: 0.8;
            transform: translateY(-1px);
        }

        .control-btn:disabled {
            opacity: 0.5;
            cursor: not-allowed;
            transform: none;
        }

        /* 보안 제어 패널 */
        .security-controls {
            background: #f8f9fa;
            padding: 1rem;
            border-radius: 8px;
            margin-bottom: 1rem;
        }

        .security-controls h3 {
            color: #333;
            font-size: 1rem;
            margin-bottom: 0.5rem;
            display: flex;
            align-items: center;
            gap: 0.3rem;
        }

        .security-toggle {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 0.5rem;
            font-size: 0.9rem;
        }

        .toggle-switch {
            position: relative;
            width: 40px;
            height: 20px;
            background: #ccc;
            border-radius: 20px;
            cursor: pointer;
            transition: background 0.3s ease;
        }

        .toggle-switch.active {
            background: #4CAF50;
        }

        .toggle-switch::after {
            content: '';
            position: absolute;
            top: 2px;
            left: 2px;
            width: 16px;
            height: 16px;
            background: white;
            border-radius: 50%;
            transition: transform 0.3s ease;
        }

        .toggle-switch.active::after {
            transform: translateX(20px);
        }

        .vm-viewer {
            flex: 1;
            background: rgba(255, 255, 255, 0.95);
            border-radius: 15px;
            padding: 1.5rem;
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
            backdrop-filter: blur(10px);
            display: flex;
            flex-direction: column;
        }

        .viewer-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 1rem;
            padding-bottom: 1rem;
            border-bottom: 1px solid #eee;
        }

        .viewer-title {
            color: #333;
            font-size: 1.1rem;
            font-weight: 600;
        }

        .connection-status {
            display: flex;
            align-items: center;
            gap: 0.5rem;
            font-size: 0.9rem;
        }

        .status-indicator {
            width: 10px;
            height: 10px;
            border-radius: 50%;
            background: #ccc;
            transition: all 0.3s ease;
        }

        .status-indicator.connected {
            background: #4CAF50;
            box-shadow: 0 0 10px rgba(76, 175, 80, 0.5);
        }

        .status-indicator.connecting {
            background: #ff9800;
            animation: pulse 1.5s infinite;
        }

        @keyframes pulse {
            0%, 100% { opacity: 1; }
            50% { opacity: 0.5; }
        }

        .toolbar {
            display: flex;
            gap: 0.5rem;
            margin-bottom: 1rem;
            flex-wrap: wrap;
        }

        .toolbar-btn {
            padding: 0.5rem 1rem;
            background: #667eea;
            color: white;
            border: none;
            border-radius: 6px;
            cursor: pointer;
            font-size: 0.8rem;
            transition: all 0.3s ease;
            display: inline-flex;
            align-items: center;
            gap: 0.3rem;
        }

        .toolbar-btn:hover {
            background: #5a6fd8;
            transform: translateY(-1px);
        }

        .toolbar-btn:active {
            transform: translateY(0);
        }

        .vnc-container {
            flex: 1;
            background: #000;
            border-radius: 10px;
            position: relative;
            min-height: 400px;
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .vnc-screen {
            width: 100%;
            height: 100%;
            border: none;
            border-radius: 10px;
        }

        .no-connection {
            color: #666;
            text-align: center;
            font-size: 1.1rem;
        }

        .loading {
            color: #667eea;
            font-size: 1.1rem;
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }

        .spinner {
            width: 20px;
            height: 20px;
            border: 2px solid #667eea;
            border-top: 2px solid transparent;
            border-radius: 50%;
            animation: spin 1s linear infinite;
        }

        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }

        .vm-info {
            background: #f8f9fa;
            padding: 1rem;
            border-radius: 8px;
            margin-bottom: 1rem;
            font-size: 0.9rem;
        }

        .vm-info-item {
            display: flex;
            justify-content: space-between;
            margin-bottom: 0.5rem;
        }

        .vm-info-item:last-child {
            margin-bottom: 0;
        }

        .performance-stats {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 1rem;
            margin-top: 1rem;
        }

        .stat-card {
            background: white;
            padding: 1rem;
            border-radius: 8px;
            text-align: center;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
        }

        .stat-value {
            font-size: 1.5rem;
            font-weight: bold;
            color: #667eea;
        }

        .stat-label {
            font-size: 0.8rem;
            color: #666;
            margin-top: 0.5rem;
        }

        /* 가상 키보드 모달 (기존 스타일 유지) */
        .virtual-keyboard-modal {
            display: none;
            position: fixed;
            z-index: 1000;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.5);
            align-items: center;
            justify-content: center;
        }

        .virtual-keyboard-content {
            background-color: #fefefe;
            margin: auto;
            padding: 20px;
            border: none;
            border-radius: 10px;
            width: 90%;
            max-width: 800px;
            max-height: 80vh;
            overflow-y: auto;
            box-shadow: 0 4px 20px rgba(0,0,0,0.3);
        }

        .keyboard-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 15px;
            padding-bottom: 10px;
            border-bottom: 1px solid #eee;
        }

        .keyboard-title {
            font-size: 1.2rem;
            font-weight: 600;
            color: #333;
        }

        .close-btn {
            color: #aaa;
            font-size: 28px;
            font-weight: bold;
            cursor: pointer;
            background: none;
            border: none;
            padding: 0;
            line-height: 1;
        }

        .close-btn:hover {
            color: #000;
        }

        .simple-keyboard {
            max-width: 100%;
            background: #f8f9fa;
            border-radius: 8px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        }

        .hg-button {
            background: white;
            border: 1px solid #ddd;
            color: #333;
            transition: all 0.2s ease;
        }

        .hg-button:hover {
            background: #e9ecef;
            border-color: #adb5bd;
        }

        .hg-button:active {
            background: #dee2e6;
            transform: scale(0.95);
        }

        .virtual-input-container {
            margin-bottom: 15px;
            padding: 10px;
            background: #f8f9fa;
            border-radius: 8px;
        }

        .virtual-input {
            width: 100%;
            padding: 10px;
            font-size: 16px;
            border: 1px solid #ddd;
            border-radius: 6px;
            background: white;
            font-family: 'Consolas', 'Monaco', monospace;
        }

        .keyboard-controls {
            display: flex;
            gap: 10px;
            margin-bottom: 15px;
            flex-wrap: wrap;
        }

        .keyboard-control-btn {
            padding: 8px 16px;
            background: #667eea;
            color: white;
            border: none;
            border-radius: 6px;
            cursor: pointer;
            font-size: 14px;
            transition: background 0.2s ease;
        }

        .keyboard-control-btn:hover {
            background: #5a6fd8;
        }

        .keyboard-control-btn.active {
            background: #4CAF50;
        }

        @media (max-width: 768px) {
            .main-container {
                flex-direction: column;
            }

            .sidebar {
                width: 100%;
            }

            .toolbar {
                flex-wrap: wrap;
            }

            .toolbar-btn {
                font-size: 0.7rem;
                padding: 0.4rem 0.8rem;
            }

            .virtual-keyboard-content {
                width: 95%;
                padding: 15px;
            }

            .security-log-panel {
                width: 90%;
                right: -90%;
            }

            .security-status {
                display: none;
            }
        }
    </style>
</head>
<body>


    <div class="header">
        <h1>🛡️ 보안 웹 기반 샌드박스 플랫폼</h1>
        <div class="security-status">
            <div class="security-indicator" id="security-indicator">
                🔒 보안 활성
            </div>
        </div>
    </div>

    <!-- 보안 로그 토글 버튼 -->
    <button class="security-toggle-btn" onclick="toggleSecurityLog()">
        📊
    </button>

    <!-- 보안 로그 패널 -->
    <div class="security-log-panel" id="security-log-panel">
        <div class="security-log-header">
            <h3>🔍 보안 로그</h3>
            <button onclick="toggleSecurityLog()" style="background: none; border: none; color: white; font-size: 1.2rem; cursor: pointer;">×</button>
        </div>
        <div class="security-log-content" id="security-log-content">
            <!-- 보안 로그 항목들이 여기에 추가됩니다 -->
        </div>
    </div>
    
    <div class="main-container">
        <div class="sidebar">
            <h2>가상환경 목록</h2>
            <div class="vm-list">
                <button class="vm-item" data-vm="ubuntu-desktop" data-security="medium">
                    🐧 Ubuntu Desktop 20.04
                    <span class="vm-security-level">중간</span>
                </button>
                <button class="vm-item" data-vm="windows-sandbox" data-security="high">
                    🪟 Windows Sandbox
                    <span class="vm-security-level">높음</span>
                </button>
                <button class="vm-item" data-vm="kali-linux" data-security="high">
                    🐱‍💻 Kali Linux
                    <span class="vm-security-level">높음</span>
                </button>
            </div>

            <!-- 보안 제어 패널 -->
            <div class="security-controls">
                <h3>🛡️ 보안 제어</h3>
                <div class="security-toggle">
                    <span>네트워크 격리</span>
                    <div class="toggle-switch active" onclick="toggleSecurity('network')" id="network-toggle"></div>
                </div>
                <div class="security-toggle">
                    <span>파일 접근 제한</span>
                    <div class="toggle-switch active" onclick="toggleSecurity('file')" id="file-toggle"></div>
                </div>
                <div class="security-toggle">
                    <span>실시간 모니터링</span>
                    <div class="toggle-switch active" onclick="toggleSecurity('monitor')" id="monitor-toggle"></div>
                </div>
                <div class="security-toggle">
                    <span>스크린샷 방지</span>
                    <div class="toggle-switch" onclick="toggleSecurity('screenshot')" id="screenshot-toggle"></div>
                </div>
            </div>

            <div class="vm-info" id="vm-info" style="display: none;">
                <div class="vm-info-item">
                    <span>상태:</span>
                    <span id="vm-status">중지됨</span>
                </div>
                <div class="vm-info-item">
                    <span>보안 수준:</span>
                    <span id="vm-security">-</span>
                </div>
                <div class="vm-info-item">
                    <span>메모리:</span>
                    <span id="vm-memory">2GB</span>
                </div>
                <div class="vm-info-item">
                    <span>CPU:</span>
                    <span id="vm-cpu">2 cores</span>
                </div>
                <div class="vm-info-item">
                    <span>디스크:</span>
                    <span id="vm-disk">20GB</span>
                </div>
            </div>

            <div class="controls">
                <button class="control-btn start-btn" id="start-btn">🚀 시작</button>
                <button class="control-btn stop-btn" id="stop-btn">⏹️ 중지</button>
                <button class="control-btn restart-btn" id="restart-btn">🔄 재시작</button>
            </div>

            <div class="performance-stats">
                <div class="stat-card">
                    <div class="stat-value" id="cpu-usage">0%</div>
                    <div class="stat-label">CPU 사용률</div>
                </div>
                <div class="stat-card">
                    <div class="stat-value" id="memory-usage">0%</div>
                    <div class="stat-label">메모리 사용률</div>
                </div>
            </div>
        </div>

        <div class="vm-viewer">
            <div class="viewer-header">
                <div class="viewer-title" id="viewer-title">가상환경을 선택해주세요</div>
                <div class="connection-status">
                    <div class="status-indicator" id="status-indicator"></div>
                    <span id="connection-text">연결 안됨</span>
                </div>
            </div>

            <div class="toolbar" id="toolbar">
                <button class="toolbar-btn" onclick="toggleFullscreen()">
                    🔲 전체화면
                </button>
                <button class="toolbar-btn" onclick="takeScreenshot()">
                    📷 스크린샷
                </button>
                <button class="toolbar-btn" onclick="showVirtualKeyboard()">
                    ⌨️ 가상키보드
                </button>
                <button class="toolbar-btn" onclick="resetView()">
                    🔄 화면 재설정
                </button>
                <button class="toolbar-btn" onclick="exportSecurityLog()">
                    📋 보안 로그 내보내기
                </button>
            </div>

            <div class="vnc-container" id="vnc-container">
                <canvas id="vnc-canvas" style="display: none;"></canvas>
                <div class="no-connection" id="no-connection">
                    가상환경을 선택하고 시작 버튼을 눌러주세요
                </div>
            </div>
        </div>
    </div>

    <!-- 가상 키보드 모달 -->
    <div class="virtual-keyboard-modal" id="virtual-keyboard-modal">
        <div class="virtual-keyboard-content">
            <div class="keyboard-header">
                <h3 class="keyboard-title">가상 키보드</h3>
                <button class="close-btn" onclick="hideVirtualKeyboard()">&times;</button>
            </div>
            
            <div class="virtual-input-container">
                <input id="virtual-input" class="virtual-input" placeholder="여기에 입력하세요..." readonly />
            </div>
            
            <div class="keyboard-controls">
                <button class="keyboard-control-btn" id="lang-toggle" onclick="toggleLanguage()">
                    한/영
                </button>
                <button class="keyboard-control-btn" onclick="clearInput()">
                    지우기
                </button>
                <button class="keyboard-control-btn" onclick="sendToVM()">
                    VM으로 전송
                </button>
            </div>
            
            <div id="simple-keyboard-container"></div>
        </div>
    </div>

    <script>
        // 보안 관리 클래스 (로그인 기능 제거)
        class SecurityManager {
            constructor() {
                this.securitySettings = {
                    network: true,
                    file: true,
                    monitor: true,
                    screenshot: false
                };
                this.securityLogs = [];
                
                this.initSecurity();
            }

            initSecurity() {
                // 보안 이벤트 리스너 설정
                this.setupSecurityListeners();
                
                // 정기적인 보안 검사
                this.startSecurityMonitoring();
                
                // CSP 정책 설정
                this.enforceCSP();
                
                // 초기 상태 설정
                this.updateSecurityStatus('secure');
            }

            setupSecurityListeners() {
                // 의심스러운 활동 감지
                document.addEventListener('keydown', (e) => {
                    // 개발자 도구 열기 시도 감지
                    if (e.key === 'F12' || (e.ctrlKey && e.shiftKey && e.key === 'I')) {
                        e.preventDefault();
                        this.logSecurityEvent('warning', '개발자 도구 접근 시도 감지');
                    }
                });

                // 우클릭 방지 (옵션)
                document.addEventListener('contextmenu', (e) => {
                    if (this.securitySettings.screenshot) {
                        e.preventDefault();
                        this.logSecurityEvent('info', '우클릭 차단');
                    }
                });

                // 복사/붙여넣기 제한 (보안 설정에 따라)
                document.addEventListener('copy', (e) => {
                    if (this.securitySettings.file) {
                        // 특정 요소에서만 복사 허용
                        if (!e.target.classList.contains('allowed-copy')) {
                            e.preventDefault();
                            this.logSecurityEvent('warning', '복사 시도 차단');
                        }
                    }
                });

                // 페이지 이탈 감지
                window.addEventListener('beforeunload', (e) => {
                    if (window.platform && window.platform.isConnected) {
                        e.preventDefault();
                        e.returnValue = '';
                        this.logSecurityEvent('warning', '페이지 이탈 시도');
                    }
                });
            }

            startSecurityMonitoring() {
                setInterval(() => {
                    this.performSecurityCheck();
                }, 30000); // 30초마다 보안 검사
            }

            performSecurityCheck() {
                // 메모리 사용량 검사
                if (performance.memory) {
                    const memoryUsage = performance.memory.usedJSHeapSize / performance.memory.totalJSHeapSize;
                    if (memoryUsage > 0.9) {
                        this.logSecurityEvent('warning', '높은 메모리 사용량 감지');
                    }
                }

                // 네트워크 연결 검사
                if (!navigator.onLine) {
                    this.logSecurityEvent('warning', '네트워크 연결 끊김');
                    this.updateSecurityStatus('warning');
                } else {
                    this.updateSecurityStatus('secure');
                }
            }

            enforceCSP() {
                // Content Security Policy 설정
                const meta = document.createElement('meta');
                meta.httpEquiv = 'Content-Security-Policy';
                meta.content = `
                    default-src 'self';
                    script-src 'self' 'nonce-${window.CSP_NONCE}' https://cdn.jsdelivr.net https://cdnjs.cloudflare.com https://unpkg.com;
                    style-src 'self' 'unsafe-inline' https://cdn.jsdelivr.net;
                    connect-src 'self' ws://localhost:* wss://localhost:*;
                    img-src 'self' data:;
                    font-src 'self' https://fonts.googleapis.com https://fonts.gstatic.com;
                `;
                document.head.appendChild(meta);
            }

            toggleSecuritySetting(setting) {
                this.securitySettings[setting] = !this.securitySettings[setting];
                this.logSecurityEvent('info', `보안 설정 변경: ${setting} = ${this.securitySettings[setting]}`);
                
                // 설정에 따른 추가 동작
                switch (setting) {
                    case 'network':
                        this.updateNetworkIsolation();
                        break;
                    case 'screenshot':
                        this.updateScreenshotProtection();
                        break;
                    case 'monitor':
                        this.updateMonitoring();
                        break;
                }
            }

            updateNetworkIsolation() {
                // 네트워크 격리 설정 적용
                if (this.securitySettings.network) {
                    this.logSecurityEvent('info', '네트워크 격리 활성화');
                } else {
                    this.logSecurityEvent('warning', '네트워크 격리 비활성화');
                }
            }

            updateScreenshotProtection() {
                // 스크린샷 방지 설정
                if (this.securitySettings.screenshot) {
                    document.body.style.webkitUserSelect = 'none';
                    document.body.style.userSelect = 'none';
                    this.logSecurityEvent('info', '스크린샷 보호 활성화');
                } else {
                    document.body.style.webkitUserSelect = 'auto';
                    document.body.style.userSelect = 'auto';
                    this.logSecurityEvent('info', '스크린샷 보호 비활성화');
                }
            }

            updateMonitoring() {
                if (this.securitySettings.monitor) {
                    this.logSecurityEvent('info', '실시간 모니터링 활성화');
                } else {
                    this.logSecurityEvent('warning', '실시간 모니터링 비활성화');
                }
            }

            logSecurityEvent(level, message) {
                }
            }

            logSecurityEvent(level, message) {
                const timestamp = new Date().toLocaleString();
                const event = {
                    timestamp,
                    level,
                    message
                };
                
                this.securityLogs.unshift(event);
                
                // 로그 개수 제한 (최대 100개)
                if (this.securityLogs.length > 100) {
                    this.securityLogs = this.securityLogs.slice(0, 100);
                }
                
                // UI 업데이트
                this.updateSecurityLogDisplay();
                
                console.log(`[SECURITY] ${level.toUpperCase()}: ${message}`);
            }

            updateSecurityLogDisplay() {
                const container = document.getElementById('security-log-content');
                container.innerHTML = '';
                
                this.securityLogs.forEach(log => {
                    const logItem = document.createElement('div');
                    logItem.className = `security-log-item ${log.level}`;
                    logItem.innerHTML = `
                        <div class="security-log-time">${log.timestamp}</div>
                        <div>${log.message}</div>
                    `;
                    container.appendChild(logItem);
                });
            }

            updateSecurityStatus(status) {
                const indicator = document.getElementById('security-indicator');
                
                switch (status) {
                    case 'secure':
                        indicator.className = 'security-indicator';
                        indicator.innerHTML = '🔒 보안 활성';
                        break;
                    case 'warning':
                        indicator.className = 'security-indicator warning';
                        indicator.innerHTML = '⚠️ 주의 필요';
                        break;
                    case 'danger':
                        indicator.className = 'security-indicator danger';
                        indicator.innerHTML = '🚨 위험';
                        break;
                }
            }

            exportSecurityLog() {
                const logs = this.securityLogs.map(log => 
                    `${log.timestamp}\t${log.level}\t${log.message}`
                ).join('\n');
                
                const blob = new Blob([`시간\t레벨\t메시지\n${logs}`], 
                    { type: 'text/tab-separated-values' });
                const url = URL.createObjectURL(blob);
                
                const a = document.createElement('a');
                a.href = url;
                a.download = `security_log_${new Date().toISOString().split('T')[0]}.tsv`;
                a.click();
                
                URL.revokeObjectURL(url);
                this.logSecurityEvent('info', '보안 로그 내보내기');
            }
        }
                } else {
                    this.logSecurityEvent('warning', '실시간 모니터링 비활성화');
                }
            }

            logSecurityEvent(level, message) {
                const timestamp = new Date().toLocaleString();
                const event = {
                    timestamp,
                    level,
                    message,
                    user: this.currentUser || 'anonymous'
                };
                
                this.securityLogs.unshift(event);
                
                // 로그 개수 제한 (최대 100개)
                if (this.securityLogs.length > 100) {
                    this.securityLogs = this.securityLogs.slice(0, 100);
                }
                
                // UI 업데이트
                this.updateSecurityLogDisplay();
                
                console.log(`[SECURITY] ${level.toUpperCase()}: ${message}`);
            }

            updateSecurityLogDisplay() {
                const container = document.getElementById('security-log-content');
                container.innerHTML = '';
                
                this.securityLogs.forEach(log => {
                    const logItem = document.createElement('div');
                    logItem.className = `security-log-item ${log.level}`;
                    logItem.innerHTML = `
                        <div class="security-log-time">${log.timestamp}</div>
                        <div>${log.message}</div>
                        <div style="font-size: 0.7rem; color: #888;">사용자: ${log.user}</div>
                    `;
                    container.appendChild(logItem);
                });
            }

            updateSecurityStatus(status) {
                const indicator = document.getElementById('security-indicator');
                
                switch (status) {
                    case 'secure':
                        indicator.className = 'security-indicator';
                        indicator.innerHTML = '🔒 보안 활성';
                        break;
                    case 'warning':
                        indicator.className = 'security-indicator warning';
                        indicator.innerHTML = '⚠️ 주의 필요';
                        break;
                    case 'danger':
                        indicator.className = 'security-indicator danger';
                        indicator.innerHTML = '🚨 위험';
                        break;
                    case 'unauthenticated':
                        indicator.className = 'security-indicator danger';
                        indicator.innerHTML = '🔓 인증 필요';
                        break;
                }
            }

            exportSecurityLog() {
                const logs = this.securityLogs.map(log => 
                    `${log.timestamp}\t${log.level}\t${log.user}\t${log.message}`
                ).join('\n');
                
                const blob = new Blob([`시간\t레벨\t사용자\t메시지\n${logs}`], 
                    { type: 'text/tab-separated-values' });
                const url = URL.createObjectURL(blob);
                
                const a = document.createElement('a');
                a.href = url;
                a.download = `security_log_${new Date().toISOString().split('T')[0]}.tsv`;
                a.click();
                
                URL.revokeObjectURL(url);
                this.logSecurityEvent('info', '보안 로그 내보내기');
            }

            checkVMPermission(vmId) {
                if (!this.isAuthenticated) {
                    return false;
                }
                
                // 사용자별 VM 접근 권한 검사
                const vmConfig = window.platform.vmConfigs[vmId];
                if (vmConfig.security === 'restricted' && this.currentUser !== 'admin') {
                    this.logSecurityEvent('warning', `제한된 VM 접근 시도: ${vmId}`);
                    return false;
                }
                
                return true;
            }
        }

        // 가상 키보드 변수들
        let keyboard = null;
        let isKorean = true;
        let isShift = false;
        let isVirtualKeyboardVisible = false;

        // 보안 매니저 초기화
        window.securityManager = new SecurityManager();

        // 가상 키보드 함수들 (기존과 동일)
        function initVirtualKeyboard() {
            if (keyboard) {
                keyboard.destroy();
            }

            const Keyboard = window.SimpleKeyboard.default;
            
            keyboard = new Keyboard('#simple-keyboard-container', {
                onChange: input => onVirtualKeyboardChange(input),
                onKeyPress: button => onVirtualKeyboardKeyPress(button),
                layout: {
                    default: [
                        "` 1 2 3 4 5 6 7 8 9 0 - = {bksp}",
                        "{tab} ㅂ ㅈ ㄷ ㄱ ㅅ ㅛ ㅕ ㅑ ㅐ ㅔ [ ] \\",
                        "{lock} ㅁ ㄴ ㅇ ㄹ ㅎ ㅗ ㅓ ㅏ ㅣ ; ' {enter}",
                        "{shift} ㅋ ㅌ ㅊ ㅍ ㅠ ㅜ ㅡ , . / {shift}",
                        "{space}"
                    ],
                    shift: [
                        "~ ! @ # $ % ^ & * ( ) _ + {bksp}",
                        "{tab} ㅃ ㅉ ㄸ ㄲ ㅆ ㅛ ㅕ ㅑ ㅒ ㅖ { } |",
                        "{lock} ㅁ ㄴ ㅇ ㄹ ㅎ ㅗ ㅓ ㅏ ㅣ : \" {enter}",
                        "{shift} ㅋ ㅌ ㅊ ㅍ ㅠ ㅜ ㅡ < > ? {shift}",
                        "{space}"
                    ],
                    english: [
                        "` 1 2 3 4 5 6 7 8 9 0 - = {bksp}",
                        "{tab} q w e r t y u i o p [ ] \\",
                        "{lock} a s d f g h j k l ; ' {enter}",
                        "{shift} z x c v b n m , . / {shift}",
                        "{space}"
                    ],
                    englishShift: [
                        "~ ! @ # $ % ^ & * ( ) _ + {bksp}",
                        "{tab} Q W E R T Y U I O P { } |",
                        "{lock} A S D F G H J K L : \" {enter}",
                        "{shift} Z X C V B N M < > ? {shift}",
                        "{space}"
                    ]
                },
                display: {
                    "{bksp}": "⌫ Backspace",
                    "{enter}": "⏎ Enter", 
                    "{shift}": "⇧ Shift",
                    "{space}": "Space",
                    "{tab}": "Tab",
                    "{lock}": "⇪ Caps"
                },
                buttonTheme: [
                    {
                        class: "hg-red",
                        buttons: "{bksp}"
                    },
                    {
                        class: "hg-blue", 
                        buttons: "{enter} {shift} {space} {tab} {lock}"
                    }
                ]
            });

            updateKeyboardLayout();
        }

        function onVirtualKeyboardChange(input) {
            document.getElementById("virtual-input").value = input;
        }

        function onVirtualKeyboardKeyPress(button) {
            if (button === "{shift}") {
                isShift = !isShift;
                updateKeyboardLayout();
                
                const shiftButton = document.querySelector('.hg-button[data-skbtn="{shift}"]');
                if (shiftButton) {
                    if (isShift) {
                        shiftButton.classList.add('active');
                    } else {
                        shiftButton.classList.remove('active');
                    }
                }
            }
            
            if (button === "{enter}") {
                sendToVM();
            }
            
            if (button === "{tab}") {
                sendKeyToVM("Tab");
            }
            
            if (button === "{lock}") {
                sendKeyToVM("CapsLock");
            }
        }

        function updateKeyboardLayout() {
            if (!keyboard) return;
            
            let layoutName;
            if (isKorean) {
                layoutName = isShift ? "shift" : "default";
            } else {
                layoutName = isShift ? "englishShift" : "english";
            }
            
            keyboard.setOptions({
                layoutName: layoutName
            });
            
            const langToggle = document.getElementById('lang-toggle');
            if (langToggle) {
                langToggle.textContent = isKorean ? "EN" : "한";
                langToggle.classList.toggle('active', !isKorean);
            }
        }

        function toggleLanguage() {
            isKorean = !isKorean;
            isShift = false;
            updateKeyboardLayout();
        }

        function clearInput() {
            document.getElementById("virtual-input").value = "";
            if (keyboard) {
                keyboard.clearInput();
            }
        }

        function sendToVM() {
            const input = document.getElementById("virtual-input").value;
            if (!input) return;
            
            if (window.platform && window.platform.rfb && window.platform.isConnected) {
                try {
                    for (let char of input) {
                        sendCharToVM(char);
                    }
                    
                    clearInput();
                    window.securityManager.logSecurityEvent('info', `VM으로 텍스트 전송: ${input.length}자`);
                    console.log("VM으로 텍스트 전송 완료:", input);
                } catch (error) {
                    console.error("VM 텍스트 전송 실패:", error);
                    window.securityManager.logSecurityEvent('error', 'VM 텍스트 전송 실패');
                    alert("VM으로 텍스트 전송에 실패했습니다.");
                }
            } else {
                alert("VM에 연결되지 않았습니다.");
            }
        }

        function sendCharToVM(char) {
            if (window.platform && window.platform.rfb) {
                const keyCode = char.charCodeAt(0);
                window.platform.rfb.sendKey(keyCode, true);
                window.platform.rfb.sendKey(keyCode, false);
            }
        }

        function sendKeyToVM(keyName) {
            if (window.platform && window.platform.rfb) {
                const keyMap = {
                    'Tab': 0xFF09,
                    'Enter': 0xFF0D, 
                    'Escape': 0xFF1B,
                    'CapsLock': 0xFFE5,
                    'Shift': 0xFFE1,
                    'Control': 0xFFE3,
                    'Alt': 0xFFE9
                };
                
                const keyCode = keyMap[keyName];
                if (keyCode) {
                    window.platform.rfb.sendKey(keyCode, true);
                    window.platform.rfb.sendKey(keyCode, false);
                }
            }
        }

        function showVirtualKeyboard() {
            const modal = document.getElementById('virtual-keyboard-modal');
            modal.style.display = 'flex';
            isVirtualKeyboardVisible = true;
            
            if (!keyboard) {
                setTimeout(() => {
                    initVirtualKeyboard();
                }, 100);
            }
            
            window.securityManager.logSecurityEvent('info', '가상 키보드 열기');
        }

        function hideVirtualKeyboard() {
            const modal = document.getElementById('virtual-keyboard-modal');
            modal.style.display = 'none';
            isVirtualKeyboardVisible = false;
            
            clearInput();
            window.securityManager.logSecurityEvent('info', '가상 키보드 닫기');
        }

        // 보안 관련 함수들
        function toggleSecurityLog() {
            const panel = document.getElementById('security-log-panel');
            panel.classList.toggle('open');
        }

        function toggleSecurity(setting) {
            window.securityManager.toggleSecuritySetting(setting);
            
            const toggle = document.getElementById(`${setting}-toggle`);
            toggle.classList.toggle('active');
        }

        function exportSecurityLog() {
            window.securityManager.exportSecurityLog();
        }

        // 환경별 설정
        const CONFIG = {
            development: {
                wsProtocol: 'ws:',
                apiBaseUrl: 'http://localhost:3000',
                vncHost: 'localhost'
            },
            production: {
                wsProtocol: 'wss:',
                apiBaseUrl: 'https://your-domain.com',
                vncHost: 'your-vnc-server.com'
            }
        };

        const currentConfig = CONFIG[window.ENV?.NODE_ENV || 'development'];

        // 보안 강화된 샌드박스 플랫폼 클래스
        class SecureSandboxPlatform {
            constructor() {
                this.currentVM = null;
                this.vncWebSocket = null;
                this.isConnected = false;
                this.isConnecting = false;
                this.performanceInterval = null;
                this.config = currentConfig;
                this.authToken = sessionStorage.getItem('authToken');
                
                this.vmConfigs = {
                    'ubuntu-desktop': {
                        name: 'Ubuntu Desktop 20.04',
                        memory: '4GB',
                        cpu: '2 cores',
                        disk: '25GB',
                        security: 'medium',
                        host: 'localhost',
                        port: 6080,
                        vncPort: 5901,
                        password: '',
                        path: '/websockify'
                    },
                    'windows-sandbox': {
                        name: 'Windows Sandbox',
                        memory: '6GB',
                        cpu: '4 cores',
                        disk: '30GB',
                        security: 'high',
                        host: 'localhost',
                        port: 6081,
                        vncPort: 5902,
                        password: 'secure123',
                        path: '/websockify'
                    },
                    'kali-linux': {
                        name: 'Kali Linux',
                        memory: '8GB',
                        cpu: '4 cores',
                        disk: '40GB',
                        security: 'high',
                        host: 'localhost',
                        port: 6082,
                        vncPort: 5903,
                        password: 'kali123',
                        path: '/websockify'
                    }
                };

                this.initEventListeners();
                this.updatePerformanceStats();
            }

            initEventListeners() {
                document.querySelectorAll('.vm-item').forEach(item => {
                    item.addEventListener('click', (e) => {
                        this.selectVM(e.target.dataset.vm);
                    });
                });

                document.getElementById('start-btn').addEventListener('click', () => {
                    this.startVM();
                });

                document.getElementById('stop-btn').addEventListener('click', () => {
                    this.stopVM();
                });

                document.getElementById('restart-btn').addEventListener('click', () => {
                    this.restartVM();
                });

                window.addEventListener('resize', () => {
                    this.resizeVNCViewer();
                });
            }

            selectVM(vmId) {

                // 이전 선택 해제
                document.querySelectorAll('.vm-item').forEach(item => {
                    item.classList.remove('active');
                });

                // 새로운 VM 선택
                document.querySelector(`[data-vm="${vmId}"]`).classList.add('active');
                this.currentVM = vmId;

                // VM 정보 업데이트
                this.updateVMInfo(vmId);
                
                // 뷰어 제목 업데이트
                document.getElementById('viewer-title').textContent = this.vmConfigs[vmId].name;

                // 연결이 있다면 끊기
                if (this.isConnected) {
                    this.disconnect();
                }

                window.securityManager.logSecurityEvent('info', `VM 선택: ${vmId}`);
            }

            updateVMInfo(vmId) {
                const config = this.vmConfigs[vmId];
                const vmInfo = document.getElementById('vm-info');
                
                document.getElementById('vm-memory').textContent = config.memory;
                document.getElementById('vm-cpu').textContent = config.cpu;
                document.getElementById('vm-disk').textContent = config.disk;
                document.getElementById('vm-security').textContent = config.security;
                
                vmInfo.style.display = 'block';
            }

            async startVM() {
                if (!this.currentVM) {
                    alert('먼저 가상환경을 선택해주세요.');
                    return;
                }

                try {
                    this.setConnectionStatus('connecting', '연결 중...');
                    window.securityManager.logSecurityEvent('info', `VM 시작 시도: ${this.currentVM}`);
                    
                    // 보안 검사 수행
                    await this.performSecurityCheck();
                    
                    // 실제 VM 시작 시뮬레이션
                    await this.simulateVMStart();
                    
                    // VNC 연결 시뮬레이션
                    await this.simulateVNCConnection();
                    
                    this.setConnectionStatus('connected', '연결됨');
                    this.updateVMStatus('실행 중');
                    this.showVNCViewer();
                    this.startPerformanceMonitoring();
                    
                    window.securityManager.logSecurityEvent('info', `VM 시작 성공: ${this.currentVM}`);
                    
                } catch (error) {
                    console.error('VM 시작 실패:', error);
                    this.setConnectionStatus('disconnected', '연결 실패');
                    window.securityManager.logSecurityEvent('error', `VM 시작 실패: ${error.message}`);
                    alert('가상환경 시작에 실패했습니다: ' + error.message);
                }
            }

            async performSecurityCheck() {
                // 보안 정책 검사
                return new Promise((resolve, reject) => {
                    setTimeout(() => {
                        // 네트워크 격리 상태 검사
                        if (window.securityManager.securitySettings.network) {
                            window.securityManager.logSecurityEvent('info', '네트워크 격리 정책 적용됨');
                        }

                        // 파일 접근 제한 검사
                        if (window.securityManager.securitySettings.file) {
                            window.securityManager.logSecurityEvent('info', '파일 접근 제한 정책 적용됨');
                        }

                        // 모니터링 설정 검사
                        if (window.securityManager.securitySettings.monitor) {
                            window.securityManager.logSecurityEvent('info', '실시간 모니터링 활성화됨');
                        }

                        resolve();
                    }, 1000);
                });
            }

            async simulateVMStart() {
                return new Promise((resolve) => {
                    setTimeout(() => {
                        resolve();
                    }, 3000);
                });
            }

            async simulateVNCConnection() {
                return new Promise((resolve) => {
                    setTimeout(() => {
                        this.isConnected = true;
                        this.isConnecting = false;
                        resolve();
                    }, 2000);
                });
            }

            showVNCViewer() {
                const container = document.getElementById('vnc-container');
                const noConnection = document.getElementById('no-connection');
                const toolbar = document.getElementById('toolbar');
                const canvas = document.getElementById('vnc-canvas');

                noConnection.style.display = 'none';
                toolbar.style.display = 'flex';
                canvas.style.display = 'block';
                
                // 보안 수준에 따른 다른 화면 표시
                const vmConfig = this.vmConfigs[this.currentVM];
                let securityBadge = '';
                let bgColor = '#1e3c72';
                
                switch (vmConfig.security) {
                    case 'high':
                        securityBadge = '🔒 높은 보안';
                        bgColor = '#2d5016';
                        break;
                    case 'medium':
                        securityBadge = '🟡 중간 보안';
                        bgColor = '#1e3c72';
                        break;
                }
                
                container.innerHTML = `
                    <div style="width: 100%; height: 100%; background: linear-gradient(45deg, ${bgColor}, #2a5298); 
                                display: flex; align-items: center; justify-content: center; 
                                border-radius: 10px; color: white; font-size: 1.2rem;">
                        <div style="text-align: center;">
                            <div style="font-size: 3rem; margin-bottom: 1rem;">🖥️</div>
                            <div>${vmConfig.name}</div>
                            <div style="font-size: 0.9rem; margin-top: 0.5rem; opacity: 0.8;">
                                ${securityBadge}
                            </div>
                            <div style="font-size: 0.8rem; margin-top: 1rem; opacity: 0.7;">
                                VNC 연결됨 - 실제 구현시 noVNC 캔버스가 여기에 표시됩니다
                            </div>
                        </div>
                    </div>
                `;
            }

            stopVM() {
                if (!this.isConnected) {
                    return;
                }

                this.disconnect();
                this.setConnectionStatus('disconnected', '연결 안됨');
                this.updateVMStatus('중지됨');
                this.hideVNCViewer();
                this.stopPerformanceMonitoring();
                
                window.securityManager.logSecurityEvent('info', `VM 중지: ${this.currentVM}`);
            }

            restartVM() {
                if (this.isConnected) {
                    window.securityManager.logSecurityEvent('info', `VM 재시작: ${this.currentVM}`);
                    this.stopVM();
                    setTimeout(() => {
                        this.startVM();
                    }, 1000);
                }
            }

            disconnect() {
                if (this.rfb) {
                    this.rfb.disconnect();
                    this.rfb = null;
                }
                this.isConnected = false;
                this.isConnecting = false;
            }

            hideVNCViewer() {
                const container = document.getElementById('vnc-container');
                const toolbar = document.getElementById('toolbar');
                const canvas = document.getElementById('vnc-canvas');
                
                toolbar.style.display = 'none';
                canvas.style.display = 'none';
                
                let noConnection = document.getElementById('no-connection');
                if (!noConnection) {
                    noConnection = document.createElement('div');
                    noConnection.id = 'no-connection';
                    noConnection.className = 'no-connection';
                    container.appendChild(noConnection);
                }
                
                noConnection.style.display = 'block';
                noConnection.textContent = '가상환경을 선택하고 시작 버튼을 눌러주세요';
            }

            setConnectionStatus(status, text) {
                const indicator = document.getElementById('status-indicator');
                const connectionText = document.getElementById('connection-text');
                
                indicator.className = `status-indicator ${status}`;
                connectionText.textContent = text;
            }

            updateVMStatus(status) {
                document.getElementById('vm-status').textContent = status;
            }

            startPerformanceMonitoring() {
                this.performanceInterval = setInterval(() => {
                    this.updatePerformanceStats();
                }, 2000);
            }

            stopPerformanceMonitoring() {
                if (this.performanceInterval) {
                    clearInterval(this.performanceInterval);
                    this.performanceInterval = null;
                }
                
                document.getElementById('cpu-usage').textContent = '0%';
                document.getElementById('memory-usage').textContent = '0%';
            }

            updatePerformanceStats() {
                if (this.isConnected) {
                    // 보안 모니터링이 활성화된 경우 더 정확한 데이터 시뮬레이션
                    const monitoringActive = window.securityManager.securitySettings.monitor;
                    
                    let cpuUsage, memoryUsage;
                    
                    if (monitoringActive) {
                        // 보안 모니터링 시 더 상세한 성능 데이터
                        cpuUsage = Math.floor(Math.random() * 50) + 25;
                        memoryUsage = Math.floor(Math.random() * 35) + 35;
                        
                        // 비정상적인 사용률 감지
                        if (cpuUsage > 80 || memoryUsage > 85) {
                            window.securityManager.logSecurityEvent('warning', 
                                `높은 리소스 사용률 감지 - CPU: ${cpuUsage}%, Memory: ${memoryUsage}%`);
                        }
                    } else {
                        cpuUsage = Math.floor(Math.random() * 60) + 20;
                        memoryUsage = Math.floor(Math.random() * 40) + 30;
                    }
                    
                    document.getElementById('cpu-usage').textContent = `${cpuUsage}%`;
                    document.getElementById('memory-usage').textContent = `${memoryUsage}%`;
                }
            }

            resizeVNCViewer() {
                if (this.rfb) {
                    this.rfb.autoscale = true;
                }
            }
        }

        // 기타 툴바 함수들
        function toggleFullscreen() {
            const container = document.getElementById('vnc-container');
            if (document.fullscreenElement) {
                document.exitFullscreen();
                window.securityManager.logSecurityEvent('info', '전체화면 모드 종료');
            } else {
                container.requestFullscreen().catch(error => {
                    console.error('전체화면 전환 실패:', error);
                    window.securityManager.logSecurityEvent('error', '전체화면 전환 실패');
                });
                window.securityManager.logSecurityEvent('info', '전체화면 모드 진입');
            }
        }

        function takeScreenshot() {
            if (!window.platform || !window.platform.isConnected) {
                alert('VM에 연결되지 않았습니다.');
                return;
            }

            // 스크린샷 방지 설정 확인
            if (window.securityManager.securitySettings.screenshot) {
                alert('보안 정책에 의해 스크린샷이 제한되어 있습니다.');
                window.securityManager.logSecurityEvent('warning', '스크린샷 시도 차단');
                return;
            }

            try {
                console.log('스크린샷 촬영 시뮬레이션');
                window.securityManager.logSecurityEvent('info', 'VM 스크린샷 촬영');
                alert('스크린샷이 촬영되었습니다. (시뮬레이션)');
            } catch (error) {
                console.error('스크린샷 실패:', error);
                window.securityManager.logSecurityEvent('error', '스크린샷 촬영 실패');
                alert('스크린샷 생성에 실패했습니다.');
            }
        }

        function resetView() {
            if (window.platform && window.platform.rfb) {
                console.log('화면 재설정');
                window.securityManager.logSecurityEvent('info', 'VNC 화면 재설정');
            }
        }

        // 모달 이벤트 리스너들
        document.getElementById('virtual-keyboard-modal').addEventListener('click', function(e) {
            if (e.target === this) {
                hideVirtualKeyboard();
            }
        });

        document.addEventListener('keydown', function(e) {
            if (e.key === 'Escape' && isVirtualKeyboardVisible) {
                hideVirtualKeyboard();
            }
            
            // Ctrl+K로 가상 키보드 토글
            if (e.ctrlKey && e.key === 'k') {
                e.preventDefault();
                if (isVirtualKeyboardVisible) {
                    hideVirtualKeyboard();
                } else {
                    showVirtualKeyboard();
                }
            }
        });

        // 플랫폼 초기화
        window.platform = new SecureSandboxPlatform();

        // 페이지 로드 완료 후 초기화
        document.addEventListener('DOMContentLoaded', () => {
            console.log('보안 웹 기반 샌드박스 플랫폼이 초기화되었습니다.');
            
            // 보안 설정 UI 초기화
            Object.keys(window.securityManager.securitySettings).forEach(setting => {
                const toggle = document.getElementById(`${setting}-toggle`);
                if (toggle && window.securityManager.securitySettings[setting]) {
                    toggle.classList.add('active');
                }
            });
            
            // 초기 보안 로그
            window.securityManager.logSecurityEvent('info', '플랫폼 초기화 완료');
            
            // 주기적인 보안 상태 업데이트
            setInterval(() => {
                // 정기적인 보안 검사 수행
                window.securityManager.performSecurityCheck();
            }, 60000); // 1분마다 검사
        });

        // 전역 에러 핸들러
        window.addEventListener('error', function(e) {
            window.securityManager.logSecurityEvent('error', 
                `JavaScript 오류: ${e.error?.message || e.message} at ${e.filename}:${e.lineno}`);
        });

        // 네트워크 상태 모니터링
        window.addEventListener('online', function() {
            window.securityManager.logSecurityEvent('info', '네트워크 연결 복구');
            window.securityManager.updateSecurityStatus('secure');
        });

        window.addEventListener('offline', function() {
            window.securityManager.logSecurityEvent('warning', '네트워크 연결 끊김');
            window.securityManager.updateSecurityStatus('warning');
        });

        // 페이지 가시성 변경 모니터링
        document.addEventListener('visibilitychange', function() {
            if (document.hidden) {
                window.securityManager.logSecurityEvent('info', '페이지가 백그라운드로 이동');
            } else {
                window.securityManager.logSecurityEvent('info', '페이지가 포어그라운드로 복귀');
            }
        });

    </script>
</body>
</html>
